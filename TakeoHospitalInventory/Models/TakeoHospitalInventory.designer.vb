'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8794
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="TakeoDB")>  _
Partial Public Class TakeoHospitalInventoryDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttblCabinet(instance As tblCabinet)
    End Sub
  Partial Private Sub UpdatetblCabinet(instance As tblCabinet)
    End Sub
  Partial Private Sub DeletetblCabinet(instance As tblCabinet)
    End Sub
  Partial Private Sub InserttblCabinetLocation(instance As tblCabinetLocation)
    End Sub
  Partial Private Sub UpdatetblCabinetLocation(instance As tblCabinetLocation)
    End Sub
  Partial Private Sub DeletetblCabinetLocation(instance As tblCabinetLocation)
    End Sub
  Partial Private Sub InserttblCategory(instance As tblCategory)
    End Sub
  Partial Private Sub UpdatetblCategory(instance As tblCategory)
    End Sub
  Partial Private Sub DeletetblCategory(instance As tblCategory)
    End Sub
  Partial Private Sub InserttblChemical(instance As tblChemical)
    End Sub
  Partial Private Sub UpdatetblChemical(instance As tblChemical)
    End Sub
  Partial Private Sub DeletetblChemical(instance As tblChemical)
    End Sub
  Partial Private Sub InserttblItemChemicalDetail(instance As tblItemChemicalDetail)
    End Sub
  Partial Private Sub UpdatetblItemChemicalDetail(instance As tblItemChemicalDetail)
    End Sub
  Partial Private Sub DeletetblItemChemicalDetail(instance As tblItemChemicalDetail)
    End Sub
  Partial Private Sub InserttblItemUnit(instance As tblItemUnit)
    End Sub
  Partial Private Sub UpdatetblItemUnit(instance As tblItemUnit)
    End Sub
  Partial Private Sub DeletetblItemUnit(instance As tblItemUnit)
    End Sub
  Partial Private Sub InserttblLabourFactory(instance As tblLabourFactory)
    End Sub
  Partial Private Sub UpdatetblLabourFactory(instance As tblLabourFactory)
    End Sub
  Partial Private Sub DeletetblLabourFactory(instance As tblLabourFactory)
    End Sub
  Partial Private Sub InserttblLocationItemDetail(instance As tblLocationItemDetail)
    End Sub
  Partial Private Sub UpdatetblLocationItemDetail(instance As tblLocationItemDetail)
    End Sub
  Partial Private Sub DeletetblLocationItemDetail(instance As tblLocationItemDetail)
    End Sub
  Partial Private Sub InserttblOrderDetail(instance As tblOrderDetail)
    End Sub
  Partial Private Sub UpdatetblOrderDetail(instance As tblOrderDetail)
    End Sub
  Partial Private Sub DeletetblOrderDetail(instance As tblOrderDetail)
    End Sub
  Partial Private Sub InserttblPermissionItemShoworHideForDepart(instance As tblPermissionItemShoworHideForDepart)
    End Sub
  Partial Private Sub UpdatetblPermissionItemShoworHideForDepart(instance As tblPermissionItemShoworHideForDepart)
    End Sub
  Partial Private Sub DeletetblPermissionItemShoworHideForDepart(instance As tblPermissionItemShoworHideForDepart)
    End Sub
  Partial Private Sub InserttblPurchaseOrderStatus(instance As tblPurchaseOrderStatus)
    End Sub
  Partial Private Sub UpdatetblPurchaseOrderStatus(instance As tblPurchaseOrderStatus)
    End Sub
  Partial Private Sub DeletetblPurchaseOrderStatus(instance As tblPurchaseOrderStatus)
    End Sub
  Partial Private Sub InserttblReceivedDetail(instance As tblReceivedDetail)
    End Sub
  Partial Private Sub UpdatetblReceivedDetail(instance As tblReceivedDetail)
    End Sub
  Partial Private Sub DeletetblReceivedDetail(instance As tblReceivedDetail)
    End Sub
  Partial Private Sub InserttblReceivedStatusTracking(instance As tblReceivedStatusTracking)
    End Sub
  Partial Private Sub UpdatetblReceivedStatusTracking(instance As tblReceivedStatusTracking)
    End Sub
  Partial Private Sub DeletetblReceivedStatusTracking(instance As tblReceivedStatusTracking)
    End Sub
  Partial Private Sub InserttblRequestStatusTracking(instance As tblRequestStatusTracking)
    End Sub
  Partial Private Sub UpdatetblRequestStatusTracking(instance As tblRequestStatusTracking)
    End Sub
  Partial Private Sub DeletetblRequestStatusTracking(instance As tblRequestStatusTracking)
    End Sub
  Partial Private Sub InserttblVender(instance As tblVender)
    End Sub
  Partial Private Sub UpdatetblVender(instance As tblVender)
    End Sub
  Partial Private Sub DeletetblVender(instance As tblVender)
    End Sub
  Partial Private Sub InserttblReceived(instance As tblReceived)
    End Sub
  Partial Private Sub UpdatetblReceived(instance As tblReceived)
    End Sub
  Partial Private Sub DeletetblReceived(instance As tblReceived)
    End Sub
  Partial Private Sub InserttblUsed(instance As tblUsed)
    End Sub
  Partial Private Sub UpdatetblUsed(instance As tblUsed)
    End Sub
  Partial Private Sub DeletetblUsed(instance As tblUsed)
    End Sub
  Partial Private Sub InserttblUsedDetail(instance As tblUsedDetail)
    End Sub
  Partial Private Sub UpdatetblUsedDetail(instance As tblUsedDetail)
    End Sub
  Partial Private Sub DeletetblUsedDetail(instance As tblUsedDetail)
    End Sub
  Partial Private Sub InserttblBeginBalanceTrace(instance As tblBeginBalanceTrace)
    End Sub
  Partial Private Sub UpdatetblBeginBalanceTrace(instance As tblBeginBalanceTrace)
    End Sub
  Partial Private Sub DeletetblBeginBalanceTrace(instance As tblBeginBalanceTrace)
    End Sub
  Partial Private Sub InserttblDeptStock(instance As tblDeptStock)
    End Sub
  Partial Private Sub UpdatetblDeptStock(instance As tblDeptStock)
    End Sub
  Partial Private Sub DeletetblDeptStock(instance As tblDeptStock)
    End Sub
  Partial Private Sub InserttblAdjustStockHistory(instance As tblAdjustStockHistory)
    End Sub
  Partial Private Sub UpdatetblAdjustStockHistory(instance As tblAdjustStockHistory)
    End Sub
  Partial Private Sub DeletetblAdjustStockHistory(instance As tblAdjustStockHistory)
    End Sub
  Partial Private Sub InsertTblPatient(instance As TblPatient)
    End Sub
  Partial Private Sub UpdateTblPatient(instance As TblPatient)
    End Sub
  Partial Private Sub DeleteTblPatient(instance As TblPatient)
    End Sub
  Partial Private Sub InsertTblDoctor(instance As TblDoctor)
    End Sub
  Partial Private Sub UpdateTblDoctor(instance As TblDoctor)
    End Sub
  Partial Private Sub DeleteTblDoctor(instance As TblDoctor)
    End Sub
  Partial Private Sub InserttblEndofDayRunStatus(instance As tblEndofDayRunStatus)
    End Sub
  Partial Private Sub UpdatetblEndofDayRunStatus(instance As tblEndofDayRunStatus)
    End Sub
  Partial Private Sub DeletetblEndofDayRunStatus(instance As tblEndofDayRunStatus)
    End Sub
  Partial Private Sub InserttblItemPrice(instance As tblItemPrice)
    End Sub
  Partial Private Sub UpdatetblItemPrice(instance As tblItemPrice)
    End Sub
  Partial Private Sub DeletetblItemPrice(instance As tblItemPrice)
    End Sub
  Partial Private Sub InsertCURRENCY(instance As CURRENCY)
    End Sub
  Partial Private Sub UpdateCURRENCY(instance As CURRENCY)
    End Sub
  Partial Private Sub DeleteCURRENCY(instance As CURRENCY)
    End Sub
  Partial Private Sub InsertCOUNTRY(instance As COUNTRY)
    End Sub
  Partial Private Sub UpdateCOUNTRY(instance As COUNTRY)
    End Sub
  Partial Private Sub DeleteCOUNTRY(instance As COUNTRY)
    End Sub
  Partial Private Sub InserttblItem(instance As tblItem)
    End Sub
  Partial Private Sub UpdatetblItem(instance As tblItem)
    End Sub
  Partial Private Sub DeletetblItem(instance As tblItem)
    End Sub
  Partial Private Sub InsertITEM_OUTSIDE_INVENTORY(instance As ITEM_OUTSIDE_INVENTORY)
    End Sub
  Partial Private Sub UpdateITEM_OUTSIDE_INVENTORY(instance As ITEM_OUTSIDE_INVENTORY)
    End Sub
  Partial Private Sub DeleteITEM_OUTSIDE_INVENTORY(instance As ITEM_OUTSIDE_INVENTORY)
    End Sub
  Partial Private Sub InsertITEM_PROVIDER_TRAN(instance As ITEM_PROVIDER_TRAN)
    End Sub
  Partial Private Sub UpdateITEM_PROVIDER_TRAN(instance As ITEM_PROVIDER_TRAN)
    End Sub
  Partial Private Sub DeleteITEM_PROVIDER_TRAN(instance As ITEM_PROVIDER_TRAN)
    End Sub
  Partial Private Sub InserttblContainer(instance As tblContainer)
    End Sub
  Partial Private Sub UpdatetblContainer(instance As tblContainer)
    End Sub
  Partial Private Sub DeletetblContainer(instance As tblContainer)
    End Sub
  Partial Private Sub InserttblCentralInventory(instance As tblCentralInventory)
    End Sub
  Partial Private Sub UpdatetblCentralInventory(instance As tblCentralInventory)
    End Sub
  Partial Private Sub DeletetblCentralInventory(instance As tblCentralInventory)
    End Sub
  Partial Private Sub InsertPRESCIP_INVENTORY(instance As PRESCIP_INVENTORY)
    End Sub
  Partial Private Sub UpdatePRESCIP_INVENTORY(instance As PRESCIP_INVENTORY)
    End Sub
  Partial Private Sub DeletePRESCIP_INVENTORY(instance As PRESCIP_INVENTORY)
    End Sub
  Partial Private Sub InserttblVendorItemSupplyStatus(instance As tblVendorItemSupplyStatus)
    End Sub
  Partial Private Sub UpdatetblVendorItemSupplyStatus(instance As tblVendorItemSupplyStatus)
    End Sub
  Partial Private Sub DeletetblVendorItemSupplyStatus(instance As tblVendorItemSupplyStatus)
    End Sub
  Partial Private Sub InserttblDepartment(instance As tblDepartment)
    End Sub
  Partial Private Sub UpdatetblDepartment(instance As tblDepartment)
    End Sub
  Partial Private Sub DeletetblDepartment(instance As tblDepartment)
    End Sub
  Partial Private Sub InsertPARAMS_INVEN(instance As PARAMS_INVEN)
    End Sub
  Partial Private Sub UpdatePARAMS_INVEN(instance As PARAMS_INVEN)
    End Sub
  Partial Private Sub DeletePARAMS_INVEN(instance As PARAMS_INVEN)
    End Sub
  Partial Private Sub InsertTblReceiptNIL(instance As TblReceiptNIL)
    End Sub
  Partial Private Sub UpdateTblReceiptNIL(instance As TblReceiptNIL)
    End Sub
  Partial Private Sub DeleteTblReceiptNIL(instance As TblReceiptNIL)
    End Sub
  Partial Private Sub InsertTblReceiptNILDetail(instance As TblReceiptNILDetail)
    End Sub
  Partial Private Sub UpdateTblReceiptNILDetail(instance As TblReceiptNILDetail)
    End Sub
  Partial Private Sub DeleteTblReceiptNILDetail(instance As TblReceiptNILDetail)
    End Sub
  Partial Private Sub InserttblRequestHistoryStatusTracking(instance As tblRequestHistoryStatusTracking)
    End Sub
  Partial Private Sub UpdatetblRequestHistoryStatusTracking(instance As tblRequestHistoryStatusTracking)
    End Sub
  Partial Private Sub DeletetblRequestHistoryStatusTracking(instance As tblRequestHistoryStatusTracking)
    End Sub
  Partial Private Sub InserttblRequestDetail(instance As tblRequestDetail)
    End Sub
  Partial Private Sub UpdatetblRequestDetail(instance As tblRequestDetail)
    End Sub
  Partial Private Sub DeletetblRequestDetail(instance As tblRequestDetail)
    End Sub
  Partial Private Sub InserttblRequest(instance As tblRequest)
    End Sub
  Partial Private Sub UpdatetblRequest(instance As tblRequest)
    End Sub
  Partial Private Sub DeletetblRequest(instance As tblRequest)
    End Sub
  Partial Private Sub InserttblTempUsedItem(instance As tblTempUsedItem)
    End Sub
  Partial Private Sub UpdatetblTempUsedItem(instance As tblTempUsedItem)
    End Sub
  Partial Private Sub DeletetblTempUsedItem(instance As tblTempUsedItem)
    End Sub
  Partial Private Sub InserttblTempBeginBalance(instance As tblTempBeginBalance)
    End Sub
  Partial Private Sub UpdatetblTempBeginBalance(instance As tblTempBeginBalance)
    End Sub
  Partial Private Sub DeletetblTempBeginBalance(instance As tblTempBeginBalance)
    End Sub
  Partial Private Sub InserttblItemExpireControl(instance As tblItemExpireControl)
    End Sub
  Partial Private Sub UpdatetblItemExpireControl(instance As tblItemExpireControl)
    End Sub
  Partial Private Sub DeletetblItemExpireControl(instance As tblItemExpireControl)
    End Sub
  Partial Private Sub InsertCARITAS_REQ_ITEM_PROVIDER_INFO(instance As CARITAS_REQ_ITEM_PROVIDER_INFO)
    End Sub
  Partial Private Sub UpdateCARITAS_REQ_ITEM_PROVIDER_INFO(instance As CARITAS_REQ_ITEM_PROVIDER_INFO)
    End Sub
  Partial Private Sub DeleteCARITAS_REQ_ITEM_PROVIDER_INFO(instance As CARITAS_REQ_ITEM_PROVIDER_INFO)
    End Sub
  Partial Private Sub InsertPRESCRIP_DETAIL_INVENTORY(instance As PRESCRIP_DETAIL_INVENTORY)
    End Sub
  Partial Private Sub UpdatePRESCRIP_DETAIL_INVENTORY(instance As PRESCRIP_DETAIL_INVENTORY)
    End Sub
  Partial Private Sub DeletePRESCRIP_DETAIL_INVENTORY(instance As PRESCRIP_DETAIL_INVENTORY)
    End Sub
  Partial Private Sub InserttblTempRequestAllItem(instance As tblTempRequestAllItem)
    End Sub
  Partial Private Sub UpdatetblTempRequestAllItem(instance As tblTempRequestAllItem)
    End Sub
  Partial Private Sub DeletetblTempRequestAllItem(instance As tblTempRequestAllItem)
    End Sub
  Partial Private Sub InserttblEndofDayRun(instance As tblEndofDayRun)
    End Sub
  Partial Private Sub UpdatetblEndofDayRun(instance As tblEndofDayRun)
    End Sub
  Partial Private Sub DeletetblEndofDayRun(instance As tblEndofDayRun)
    End Sub
  Partial Private Sub InsertCARITAS_REQUEST_INVENTORY(instance As CARITAS_REQUEST_INVENTORY)
    End Sub
  Partial Private Sub UpdateCARITAS_REQUEST_INVENTORY(instance As CARITAS_REQUEST_INVENTORY)
    End Sub
  Partial Private Sub DeleteCARITAS_REQUEST_INVENTORY(instance As CARITAS_REQUEST_INVENTORY)
    End Sub
  Partial Private Sub InsertCARITAS_REQUEST_DETAIL_INVENTORY(instance As CARITAS_REQUEST_DETAIL_INVENTORY)
    End Sub
  Partial Private Sub UpdateCARITAS_REQUEST_DETAIL_INVENTORY(instance As CARITAS_REQUEST_DETAIL_INVENTORY)
    End Sub
  Partial Private Sub DeleteCARITAS_REQUEST_DETAIL_INVENTORY(instance As CARITAS_REQUEST_DETAIL_INVENTORY)
    End Sub
  Partial Private Sub InsertITEM_EXPIREDATE_DETAIL(instance As ITEM_EXPIREDATE_DETAIL)
    End Sub
  Partial Private Sub UpdateITEM_EXPIREDATE_DETAIL(instance As ITEM_EXPIREDATE_DETAIL)
    End Sub
  Partial Private Sub DeleteITEM_EXPIREDATE_DETAIL(instance As ITEM_EXPIREDATE_DETAIL)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tblCabinets() As System.Data.Linq.Table(Of tblCabinet)
		Get
			Return Me.GetTable(Of tblCabinet)
		End Get
	End Property
	
	Public ReadOnly Property tblCabinetLocations() As System.Data.Linq.Table(Of tblCabinetLocation)
		Get
			Return Me.GetTable(Of tblCabinetLocation)
		End Get
	End Property
	
	Public ReadOnly Property tblCategories() As System.Data.Linq.Table(Of tblCategory)
		Get
			Return Me.GetTable(Of tblCategory)
		End Get
	End Property
	
	Public ReadOnly Property tblChemicals() As System.Data.Linq.Table(Of tblChemical)
		Get
			Return Me.GetTable(Of tblChemical)
		End Get
	End Property
	
	Public ReadOnly Property tblItemChemicalDetails() As System.Data.Linq.Table(Of tblItemChemicalDetail)
		Get
			Return Me.GetTable(Of tblItemChemicalDetail)
		End Get
	End Property
	
	Public ReadOnly Property tblItemUnits() As System.Data.Linq.Table(Of tblItemUnit)
		Get
			Return Me.GetTable(Of tblItemUnit)
		End Get
	End Property
	
	Public ReadOnly Property tblLabourFactories() As System.Data.Linq.Table(Of tblLabourFactory)
		Get
			Return Me.GetTable(Of tblLabourFactory)
		End Get
	End Property
	
	Public ReadOnly Property tblLocationItemDetails() As System.Data.Linq.Table(Of tblLocationItemDetail)
		Get
			Return Me.GetTable(Of tblLocationItemDetail)
		End Get
	End Property
	
	Public ReadOnly Property tblOrderDetails() As System.Data.Linq.Table(Of tblOrderDetail)
		Get
			Return Me.GetTable(Of tblOrderDetail)
		End Get
	End Property
	
	Public ReadOnly Property tblPermissionItemShoworHideForDeparts() As System.Data.Linq.Table(Of tblPermissionItemShoworHideForDepart)
		Get
			Return Me.GetTable(Of tblPermissionItemShoworHideForDepart)
		End Get
	End Property
	
	Public ReadOnly Property tblPurchaseOrderStatus() As System.Data.Linq.Table(Of tblPurchaseOrderStatus)
		Get
			Return Me.GetTable(Of tblPurchaseOrderStatus)
		End Get
	End Property
	
	Public ReadOnly Property tblReceivedDetails() As System.Data.Linq.Table(Of tblReceivedDetail)
		Get
			Return Me.GetTable(Of tblReceivedDetail)
		End Get
	End Property
	
	Public ReadOnly Property tblReceivedStatusTrackings() As System.Data.Linq.Table(Of tblReceivedStatusTracking)
		Get
			Return Me.GetTable(Of tblReceivedStatusTracking)
		End Get
	End Property
	
	Public ReadOnly Property tblRequestStatusTrackings() As System.Data.Linq.Table(Of tblRequestStatusTracking)
		Get
			Return Me.GetTable(Of tblRequestStatusTracking)
		End Get
	End Property
	
	Public ReadOnly Property tblVenders() As System.Data.Linq.Table(Of tblVender)
		Get
			Return Me.GetTable(Of tblVender)
		End Get
	End Property
	
	Public ReadOnly Property tblReceiveds() As System.Data.Linq.Table(Of tblReceived)
		Get
			Return Me.GetTable(Of tblReceived)
		End Get
	End Property
	
	Public ReadOnly Property tblUseds() As System.Data.Linq.Table(Of tblUsed)
		Get
			Return Me.GetTable(Of tblUsed)
		End Get
	End Property
	
	Public ReadOnly Property tblUsedDetails() As System.Data.Linq.Table(Of tblUsedDetail)
		Get
			Return Me.GetTable(Of tblUsedDetail)
		End Get
	End Property
	
	Public ReadOnly Property tblBeginBalanceTraces() As System.Data.Linq.Table(Of tblBeginBalanceTrace)
		Get
			Return Me.GetTable(Of tblBeginBalanceTrace)
		End Get
	End Property
	
	Public ReadOnly Property tblEndofMonthRuns() As System.Data.Linq.Table(Of tblEndofMonthRun)
		Get
			Return Me.GetTable(Of tblEndofMonthRun)
		End Get
	End Property
	
	Public ReadOnly Property tblDeptStocks() As System.Data.Linq.Table(Of tblDeptStock)
		Get
			Return Me.GetTable(Of tblDeptStock)
		End Get
	End Property
	
	Public ReadOnly Property tblAdjustStockHistories() As System.Data.Linq.Table(Of tblAdjustStockHistory)
		Get
			Return Me.GetTable(Of tblAdjustStockHistory)
		End Get
	End Property
	
	Public ReadOnly Property TblPatients() As System.Data.Linq.Table(Of TblPatient)
		Get
			Return Me.GetTable(Of TblPatient)
		End Get
	End Property
	
	Public ReadOnly Property TblDoctors() As System.Data.Linq.Table(Of TblDoctor)
		Get
			Return Me.GetTable(Of TblDoctor)
		End Get
	End Property
	
	Public ReadOnly Property tblEndofDayRunStatus() As System.Data.Linq.Table(Of tblEndofDayRunStatus)
		Get
			Return Me.GetTable(Of tblEndofDayRunStatus)
		End Get
	End Property
	
	Public ReadOnly Property tblItemPrices() As System.Data.Linq.Table(Of tblItemPrice)
		Get
			Return Me.GetTable(Of tblItemPrice)
		End Get
	End Property
	
	Public ReadOnly Property CURRENCies() As System.Data.Linq.Table(Of CURRENCY)
		Get
			Return Me.GetTable(Of CURRENCY)
		End Get
	End Property
	
	Public ReadOnly Property COUNTRies() As System.Data.Linq.Table(Of COUNTRY)
		Get
			Return Me.GetTable(Of COUNTRY)
		End Get
	End Property
	
	Public ReadOnly Property tblItems() As System.Data.Linq.Table(Of tblItem)
		Get
			Return Me.GetTable(Of tblItem)
		End Get
	End Property
	
	Public ReadOnly Property ITEM_OUTSIDE_INVENTORies() As System.Data.Linq.Table(Of ITEM_OUTSIDE_INVENTORY)
		Get
			Return Me.GetTable(Of ITEM_OUTSIDE_INVENTORY)
		End Get
	End Property
	
	Public ReadOnly Property ITEM_PROVIDER_TRANs() As System.Data.Linq.Table(Of ITEM_PROVIDER_TRAN)
		Get
			Return Me.GetTable(Of ITEM_PROVIDER_TRAN)
		End Get
	End Property
	
	Public ReadOnly Property tblContainers() As System.Data.Linq.Table(Of tblContainer)
		Get
			Return Me.GetTable(Of tblContainer)
		End Get
	End Property
	
	Public ReadOnly Property tblCentralInventories() As System.Data.Linq.Table(Of tblCentralInventory)
		Get
			Return Me.GetTable(Of tblCentralInventory)
		End Get
	End Property
	
	Public ReadOnly Property PRESCIP_INVENTORies() As System.Data.Linq.Table(Of PRESCIP_INVENTORY)
		Get
			Return Me.GetTable(Of PRESCIP_INVENTORY)
		End Get
	End Property
	
	Public ReadOnly Property tblVendorItemSupplyStatus() As System.Data.Linq.Table(Of tblVendorItemSupplyStatus)
		Get
			Return Me.GetTable(Of tblVendorItemSupplyStatus)
		End Get
	End Property
	
	Public ReadOnly Property tblDepartments() As System.Data.Linq.Table(Of tblDepartment)
		Get
			Return Me.GetTable(Of tblDepartment)
		End Get
	End Property
	
	Public ReadOnly Property PARAMS_INVENs() As System.Data.Linq.Table(Of PARAMS_INVEN)
		Get
			Return Me.GetTable(Of PARAMS_INVEN)
		End Get
	End Property
	
	Public ReadOnly Property TblReceiptNILs() As System.Data.Linq.Table(Of TblReceiptNIL)
		Get
			Return Me.GetTable(Of TblReceiptNIL)
		End Get
	End Property
	
	Public ReadOnly Property TblReceiptNILDetails() As System.Data.Linq.Table(Of TblReceiptNILDetail)
		Get
			Return Me.GetTable(Of TblReceiptNILDetail)
		End Get
	End Property
	
	Public ReadOnly Property tblRequestHistoryStatusTrackings() As System.Data.Linq.Table(Of tblRequestHistoryStatusTracking)
		Get
			Return Me.GetTable(Of tblRequestHistoryStatusTracking)
		End Get
	End Property
	
	Public ReadOnly Property tblRequestDetails() As System.Data.Linq.Table(Of tblRequestDetail)
		Get
			Return Me.GetTable(Of tblRequestDetail)
		End Get
	End Property
	
	Public ReadOnly Property tblRequests() As System.Data.Linq.Table(Of tblRequest)
		Get
			Return Me.GetTable(Of tblRequest)
		End Get
	End Property
	
	Public ReadOnly Property tblTempUsedItems() As System.Data.Linq.Table(Of tblTempUsedItem)
		Get
			Return Me.GetTable(Of tblTempUsedItem)
		End Get
	End Property
	
	Public ReadOnly Property VAllUsedItems() As System.Data.Linq.Table(Of VAllUsedItem)
		Get
			Return Me.GetTable(Of VAllUsedItem)
		End Get
	End Property
	
	Public ReadOnly Property tblTempBeginBalances() As System.Data.Linq.Table(Of tblTempBeginBalance)
		Get
			Return Me.GetTable(Of tblTempBeginBalance)
		End Get
	End Property
	
	Public ReadOnly Property tblItemExpireControls() As System.Data.Linq.Table(Of tblItemExpireControl)
		Get
			Return Me.GetTable(Of tblItemExpireControl)
		End Get
	End Property
	
	Public ReadOnly Property CARITAS_REQ_ITEM_PROVIDER_INFOs() As System.Data.Linq.Table(Of CARITAS_REQ_ITEM_PROVIDER_INFO)
		Get
			Return Me.GetTable(Of CARITAS_REQ_ITEM_PROVIDER_INFO)
		End Get
	End Property
	
	Public ReadOnly Property PRESCRIP_DETAIL_INVENTORies() As System.Data.Linq.Table(Of PRESCRIP_DETAIL_INVENTORY)
		Get
			Return Me.GetTable(Of PRESCRIP_DETAIL_INVENTORY)
		End Get
	End Property
	
	Public ReadOnly Property tblTempRequestAllItems() As System.Data.Linq.Table(Of tblTempRequestAllItem)
		Get
			Return Me.GetTable(Of tblTempRequestAllItem)
		End Get
	End Property
	
	Public ReadOnly Property VAllRequestItems() As System.Data.Linq.Table(Of VAllRequestItem)
		Get
			Return Me.GetTable(Of VAllRequestItem)
		End Get
	End Property
	
	Public ReadOnly Property VAllBeginBalances() As System.Data.Linq.Table(Of VAllBeginBalance)
		Get
			Return Me.GetTable(Of VAllBeginBalance)
		End Get
	End Property
	
	Public ReadOnly Property tblEndofDayRuns() As System.Data.Linq.Table(Of tblEndofDayRun)
		Get
			Return Me.GetTable(Of tblEndofDayRun)
		End Get
	End Property
	
	Public ReadOnly Property CARITAS_REQUEST_INVENTORies() As System.Data.Linq.Table(Of CARITAS_REQUEST_INVENTORY)
		Get
			Return Me.GetTable(Of CARITAS_REQUEST_INVENTORY)
		End Get
	End Property
	
	Public ReadOnly Property CARITAS_REQUEST_DETAIL_INVENTORies() As System.Data.Linq.Table(Of CARITAS_REQUEST_DETAIL_INVENTORY)
		Get
			Return Me.GetTable(Of CARITAS_REQUEST_DETAIL_INVENTORY)
		End Get
	End Property
	
	Public ReadOnly Property ITEM_EXPIREDATE_DETAILs() As System.Data.Linq.Table(Of ITEM_EXPIREDATE_DETAIL)
		Get
			Return Me.GetTable(Of ITEM_EXPIREDATE_DETAIL)
		End Get
	End Property
End Class

<Table(Name:="dbo.tblCabinet")>  _
Partial Public Class tblCabinet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CabinetID As Decimal
	
	Private _DepartID As System.Nullable(Of Integer)
	
	Private _CabinetName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCabinetIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCabinetIDChanged()
    End Sub
    Partial Private Sub OnDepartIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDepartIDChanged()
    End Sub
    Partial Private Sub OnCabinetNameChanging(value As String)
    End Sub
    Partial Private Sub OnCabinetNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_CabinetID", DbType:="Decimal(18,0) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CabinetID() As Decimal
		Get
			Return Me._CabinetID
		End Get
		Set
			If ((Me._CabinetID = value)  _
						= false) Then
				Me.OnCabinetIDChanging(value)
				Me.SendPropertyChanging
				Me._CabinetID = value
				Me.SendPropertyChanged("CabinetID")
				Me.OnCabinetIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DepartID", DbType:="Int")>  _
	Public Property DepartID() As System.Nullable(Of Integer)
		Get
			Return Me._DepartID
		End Get
		Set
			If (Me._DepartID.Equals(value) = false) Then
				Me.OnDepartIDChanging(value)
				Me.SendPropertyChanging
				Me._DepartID = value
				Me.SendPropertyChanged("DepartID")
				Me.OnDepartIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CabinetName", DbType:="NVarChar(100)")>  _
	Public Property CabinetName() As String
		Get
			Return Me._CabinetName
		End Get
		Set
			If (String.Equals(Me._CabinetName, value) = false) Then
				Me.OnCabinetNameChanging(value)
				Me.SendPropertyChanging
				Me._CabinetName = value
				Me.SendPropertyChanged("CabinetName")
				Me.OnCabinetNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblCabinetLocation")>  _
Partial Public Class tblCabinetLocation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LocationID As Decimal
	
	Private _LocationName As String
	
	Private _ShelfNum As String
	
	Private _BlockNum As String
	
	Private _CabinetID As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLocationIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnLocationIDChanged()
    End Sub
    Partial Private Sub OnLocationNameChanging(value As String)
    End Sub
    Partial Private Sub OnLocationNameChanged()
    End Sub
    Partial Private Sub OnShelfNumChanging(value As String)
    End Sub
    Partial Private Sub OnShelfNumChanged()
    End Sub
    Partial Private Sub OnBlockNumChanging(value As String)
    End Sub
    Partial Private Sub OnBlockNumChanged()
    End Sub
    Partial Private Sub OnCabinetIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCabinetIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_LocationID", DbType:="Decimal(18,0) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property LocationID() As Decimal
		Get
			Return Me._LocationID
		End Get
		Set
			If ((Me._LocationID = value)  _
						= false) Then
				Me.OnLocationIDChanging(value)
				Me.SendPropertyChanging
				Me._LocationID = value
				Me.SendPropertyChanged("LocationID")
				Me.OnLocationIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LocationName", DbType:="NVarChar(50)")>  _
	Public Property LocationName() As String
		Get
			Return Me._LocationName
		End Get
		Set
			If (String.Equals(Me._LocationName, value) = false) Then
				Me.OnLocationNameChanging(value)
				Me.SendPropertyChanging
				Me._LocationName = value
				Me.SendPropertyChanged("LocationName")
				Me.OnLocationNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ShelfNum", DbType:="NVarChar(50)")>  _
	Public Property ShelfNum() As String
		Get
			Return Me._ShelfNum
		End Get
		Set
			If (String.Equals(Me._ShelfNum, value) = false) Then
				Me.OnShelfNumChanging(value)
				Me.SendPropertyChanging
				Me._ShelfNum = value
				Me.SendPropertyChanged("ShelfNum")
				Me.OnShelfNumChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BlockNum", DbType:="NVarChar(50)")>  _
	Public Property BlockNum() As String
		Get
			Return Me._BlockNum
		End Get
		Set
			If (String.Equals(Me._BlockNum, value) = false) Then
				Me.OnBlockNumChanging(value)
				Me.SendPropertyChanging
				Me._BlockNum = value
				Me.SendPropertyChanged("BlockNum")
				Me.OnBlockNumChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CabinetID", DbType:="Decimal(18,0)")>  _
	Public Property CabinetID() As System.Nullable(Of Decimal)
		Get
			Return Me._CabinetID
		End Get
		Set
			If (Me._CabinetID.Equals(value) = false) Then
				Me.OnCabinetIDChanging(value)
				Me.SendPropertyChanging
				Me._CabinetID = value
				Me.SendPropertyChanged("CabinetID")
				Me.OnCabinetIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblCategory")>  _
Partial Public Class tblCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CateID As Integer
	
	Private _CateName As String
	
	Private _ParentID As System.Nullable(Of Integer)
	
	Private _CateDescription As String
	
	Private _ItemCount As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCateIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCateIDChanged()
    End Sub
    Partial Private Sub OnCateNameChanging(value As String)
    End Sub
    Partial Private Sub OnCateNameChanged()
    End Sub
    Partial Private Sub OnParentIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentIDChanged()
    End Sub
    Partial Private Sub OnCateDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnCateDescriptionChanged()
    End Sub
    Partial Private Sub OnItemCountChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemCountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_CateID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CateID() As Integer
		Get
			Return Me._CateID
		End Get
		Set
			If ((Me._CateID = value)  _
						= false) Then
				Me.OnCateIDChanging(value)
				Me.SendPropertyChanging
				Me._CateID = value
				Me.SendPropertyChanged("CateID")
				Me.OnCateIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CateName", DbType:="NVarChar(150)")>  _
	Public Property CateName() As String
		Get
			Return Me._CateName
		End Get
		Set
			If (String.Equals(Me._CateName, value) = false) Then
				Me.OnCateNameChanging(value)
				Me.SendPropertyChanging
				Me._CateName = value
				Me.SendPropertyChanged("CateName")
				Me.OnCateNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ParentID", DbType:="Int")>  _
	Public Property ParentID() As System.Nullable(Of Integer)
		Get
			Return Me._ParentID
		End Get
		Set
			If (Me._ParentID.Equals(value) = false) Then
				Me.OnParentIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentID = value
				Me.SendPropertyChanged("ParentID")
				Me.OnParentIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CateDescription", DbType:="NVarChar(250)")>  _
	Public Property CateDescription() As String
		Get
			Return Me._CateDescription
		End Get
		Set
			If (String.Equals(Me._CateDescription, value) = false) Then
				Me.OnCateDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._CateDescription = value
				Me.SendPropertyChanged("CateDescription")
				Me.OnCateDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemCount", DbType:="Int")>  _
	Public Property ItemCount() As System.Nullable(Of Integer)
		Get
			Return Me._ItemCount
		End Get
		Set
			If (Me._ItemCount.Equals(value) = false) Then
				Me.OnItemCountChanging(value)
				Me.SendPropertyChanging
				Me._ItemCount = value
				Me.SendPropertyChanged("ItemCount")
				Me.OnItemCountChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblChemical")>  _
Partial Public Class tblChemical
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ChemicalID As Integer
	
	Private _ChemicalName As String
	
	Private _Description As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnChemicalIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnChemicalIDChanged()
    End Sub
    Partial Private Sub OnChemicalNameChanging(value As String)
    End Sub
    Partial Private Sub OnChemicalNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ChemicalID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ChemicalID() As Integer
		Get
			Return Me._ChemicalID
		End Get
		Set
			If ((Me._ChemicalID = value)  _
						= false) Then
				Me.OnChemicalIDChanging(value)
				Me.SendPropertyChanging
				Me._ChemicalID = value
				Me.SendPropertyChanged("ChemicalID")
				Me.OnChemicalIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ChemicalName", DbType:="NVarChar(150)")>  _
	Public Property ChemicalName() As String
		Get
			Return Me._ChemicalName
		End Get
		Set
			If (String.Equals(Me._ChemicalName, value) = false) Then
				Me.OnChemicalNameChanging(value)
				Me.SendPropertyChanging
				Me._ChemicalName = value
				Me.SendPropertyChanged("ChemicalName")
				Me.OnChemicalNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(250)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblItemChemicalDetail")>  _
Partial Public Class tblItemChemicalDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ItemChemicalDetailID As Decimal
	
	Private _ItemID As Integer
	
	Private _ChemicalID As Integer
	
	Private _ContainerID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnItemChemicalDetailIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnItemChemicalDetailIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnChemicalIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnChemicalIDChanged()
    End Sub
    Partial Private Sub OnContainerIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnContainerIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ItemChemicalDetailID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ItemChemicalDetailID() As Decimal
		Get
			Return Me._ItemChemicalDetailID
		End Get
		Set
			If ((Me._ItemChemicalDetailID = value)  _
						= false) Then
				Me.OnItemChemicalDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemChemicalDetailID = value
				Me.SendPropertyChanged("ItemChemicalDetailID")
				Me.OnItemChemicalDetailIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int NOT NULL")>  _
	Public Property ItemID() As Integer
		Get
			Return Me._ItemID
		End Get
		Set
			If ((Me._ItemID = value)  _
						= false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ChemicalID", DbType:="Int NOT NULL")>  _
	Public Property ChemicalID() As Integer
		Get
			Return Me._ChemicalID
		End Get
		Set
			If ((Me._ChemicalID = value)  _
						= false) Then
				Me.OnChemicalIDChanging(value)
				Me.SendPropertyChanging
				Me._ChemicalID = value
				Me.SendPropertyChanged("ChemicalID")
				Me.OnChemicalIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContainerID", DbType:="Int")>  _
	Public Property ContainerID() As System.Nullable(Of Integer)
		Get
			Return Me._ContainerID
		End Get
		Set
			If (Me._ContainerID.Equals(value) = false) Then
				Me.OnContainerIDChanging(value)
				Me.SendPropertyChanging
				Me._ContainerID = value
				Me.SendPropertyChanged("ContainerID")
				Me.OnContainerIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblItemUnit")>  _
Partial Public Class tblItemUnit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ItemUnitID As Integer
	
	Private _ItemUnitName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnItemUnitIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnItemUnitIDChanged()
    End Sub
    Partial Private Sub OnItemUnitNameChanging(value As String)
    End Sub
    Partial Private Sub OnItemUnitNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ItemUnitID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ItemUnitID() As Integer
		Get
			Return Me._ItemUnitID
		End Get
		Set
			If ((Me._ItemUnitID = value)  _
						= false) Then
				Me.OnItemUnitIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemUnitID = value
				Me.SendPropertyChanged("ItemUnitID")
				Me.OnItemUnitIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemUnitName", DbType:="NVarChar(150)")>  _
	Public Property ItemUnitName() As String
		Get
			Return Me._ItemUnitName
		End Get
		Set
			If (String.Equals(Me._ItemUnitName, value) = false) Then
				Me.OnItemUnitNameChanging(value)
				Me.SendPropertyChanging
				Me._ItemUnitName = value
				Me.SendPropertyChanged("ItemUnitName")
				Me.OnItemUnitNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblLabourFactory")>  _
Partial Public Class tblLabourFactory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LabourFacID As Integer
	
	Private _LabourFacName As String
	
	Private _LabourPhone As String
	
	Private _LabourFacAddress As String
	
	Private _LabourFacEmail As String
	
	Private _LabourFacFax As String
	
	Private _LabourFacRegisterDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLabourFacIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLabourFacIDChanged()
    End Sub
    Partial Private Sub OnLabourFacNameChanging(value As String)
    End Sub
    Partial Private Sub OnLabourFacNameChanged()
    End Sub
    Partial Private Sub OnLabourPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnLabourPhoneChanged()
    End Sub
    Partial Private Sub OnLabourFacAddressChanging(value As String)
    End Sub
    Partial Private Sub OnLabourFacAddressChanged()
    End Sub
    Partial Private Sub OnLabourFacEmailChanging(value As String)
    End Sub
    Partial Private Sub OnLabourFacEmailChanged()
    End Sub
    Partial Private Sub OnLabourFacFaxChanging(value As String)
    End Sub
    Partial Private Sub OnLabourFacFaxChanged()
    End Sub
    Partial Private Sub OnLabourFacRegisterDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLabourFacRegisterDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_LabourFacID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property LabourFacID() As Integer
		Get
			Return Me._LabourFacID
		End Get
		Set
			If ((Me._LabourFacID = value)  _
						= false) Then
				Me.OnLabourFacIDChanging(value)
				Me.SendPropertyChanging
				Me._LabourFacID = value
				Me.SendPropertyChanged("LabourFacID")
				Me.OnLabourFacIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LabourFacName", DbType:="NVarChar(150)")>  _
	Public Property LabourFacName() As String
		Get
			Return Me._LabourFacName
		End Get
		Set
			If (String.Equals(Me._LabourFacName, value) = false) Then
				Me.OnLabourFacNameChanging(value)
				Me.SendPropertyChanging
				Me._LabourFacName = value
				Me.SendPropertyChanged("LabourFacName")
				Me.OnLabourFacNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LabourPhone", DbType:="NVarChar(50)")>  _
	Public Property LabourPhone() As String
		Get
			Return Me._LabourPhone
		End Get
		Set
			If (String.Equals(Me._LabourPhone, value) = false) Then
				Me.OnLabourPhoneChanging(value)
				Me.SendPropertyChanging
				Me._LabourPhone = value
				Me.SendPropertyChanged("LabourPhone")
				Me.OnLabourPhoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LabourFacAddress", DbType:="NVarChar(50)")>  _
	Public Property LabourFacAddress() As String
		Get
			Return Me._LabourFacAddress
		End Get
		Set
			If (String.Equals(Me._LabourFacAddress, value) = false) Then
				Me.OnLabourFacAddressChanging(value)
				Me.SendPropertyChanging
				Me._LabourFacAddress = value
				Me.SendPropertyChanged("LabourFacAddress")
				Me.OnLabourFacAddressChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LabourFacEmail", DbType:="NVarChar(50)")>  _
	Public Property LabourFacEmail() As String
		Get
			Return Me._LabourFacEmail
		End Get
		Set
			If (String.Equals(Me._LabourFacEmail, value) = false) Then
				Me.OnLabourFacEmailChanging(value)
				Me.SendPropertyChanging
				Me._LabourFacEmail = value
				Me.SendPropertyChanged("LabourFacEmail")
				Me.OnLabourFacEmailChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LabourFacFax", DbType:="NVarChar(50)")>  _
	Public Property LabourFacFax() As String
		Get
			Return Me._LabourFacFax
		End Get
		Set
			If (String.Equals(Me._LabourFacFax, value) = false) Then
				Me.OnLabourFacFaxChanging(value)
				Me.SendPropertyChanging
				Me._LabourFacFax = value
				Me.SendPropertyChanged("LabourFacFax")
				Me.OnLabourFacFaxChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LabourFacRegisterDate", DbType:="DateTime")>  _
	Public Property LabourFacRegisterDate() As System.Nullable(Of Date)
		Get
			Return Me._LabourFacRegisterDate
		End Get
		Set
			If (Me._LabourFacRegisterDate.Equals(value) = false) Then
				Me.OnLabourFacRegisterDateChanging(value)
				Me.SendPropertyChanging
				Me._LabourFacRegisterDate = value
				Me.SendPropertyChanged("LabourFacRegisterDate")
				Me.OnLabourFacRegisterDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblLocationItemDetail")>  _
Partial Public Class tblLocationItemDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LocationItemDetailID As Decimal
	
	Private _LocationID As System.Nullable(Of Decimal)
	
	Private _ItemID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLocationItemDetailIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnLocationItemDetailIDChanged()
    End Sub
    Partial Private Sub OnLocationIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnLocationIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_LocationItemDetailID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property LocationItemDetailID() As Decimal
		Get
			Return Me._LocationItemDetailID
		End Get
		Set
			If ((Me._LocationItemDetailID = value)  _
						= false) Then
				Me.OnLocationItemDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._LocationItemDetailID = value
				Me.SendPropertyChanged("LocationItemDetailID")
				Me.OnLocationItemDetailIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LocationID", DbType:="Decimal(18,0)")>  _
	Public Property LocationID() As System.Nullable(Of Decimal)
		Get
			Return Me._LocationID
		End Get
		Set
			If (Me._LocationID.Equals(value) = false) Then
				Me.OnLocationIDChanging(value)
				Me.SendPropertyChanging
				Me._LocationID = value
				Me.SendPropertyChanged("LocationID")
				Me.OnLocationIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblOrderDetail")>  _
Partial Public Class tblOrderDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrderDetailID As Integer
	
	Private _LabourID As System.Nullable(Of Integer)
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _Quantity As System.Nullable(Of Integer)
	
	Private _IsUnStock As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderDetailIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderDetailIDChanged()
    End Sub
    Partial Private Sub OnLabourIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLabourIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnIsUnStockChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsUnStockChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_OrderDetailID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property OrderDetailID() As Integer
		Get
			Return Me._OrderDetailID
		End Get
		Set
			If ((Me._OrderDetailID = value)  _
						= false) Then
				Me.OnOrderDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderDetailID = value
				Me.SendPropertyChanged("OrderDetailID")
				Me.OnOrderDetailIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LabourID", DbType:="Int")>  _
	Public Property LabourID() As System.Nullable(Of Integer)
		Get
			Return Me._LabourID
		End Get
		Set
			If (Me._LabourID.Equals(value) = false) Then
				Me.OnLabourIDChanging(value)
				Me.SendPropertyChanging
				Me._LabourID = value
				Me.SendPropertyChanged("LabourID")
				Me.OnLabourIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Quantity", DbType:="Int")>  _
	Public Property Quantity() As System.Nullable(Of Integer)
		Get
			Return Me._Quantity
		End Get
		Set
			If (Me._Quantity.Equals(value) = false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsUnStock", DbType:="Bit")>  _
	Public Property IsUnStock() As System.Nullable(Of Boolean)
		Get
			Return Me._IsUnStock
		End Get
		Set
			If (Me._IsUnStock.Equals(value) = false) Then
				Me.OnIsUnStockChanging(value)
				Me.SendPropertyChanging
				Me._IsUnStock = value
				Me.SendPropertyChanged("IsUnStock")
				Me.OnIsUnStockChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblPermissionItemShoworHideForDepart")>  _
Partial Public Class tblPermissionItemShoworHideForDepart
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PermissionItemShoworHideForDepartID As Decimal
	
	Private _DepartID As System.Nullable(Of Integer)
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _IsShow As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPermissionItemShoworHideForDepartIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPermissionItemShoworHideForDepartIDChanged()
    End Sub
    Partial Private Sub OnDepartIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDepartIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnIsShowChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsShowChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_PermissionItemShoworHideForDepartID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PermissionItemShoworHideForDepartID() As Decimal
		Get
			Return Me._PermissionItemShoworHideForDepartID
		End Get
		Set
			If ((Me._PermissionItemShoworHideForDepartID = value)  _
						= false) Then
				Me.OnPermissionItemShoworHideForDepartIDChanging(value)
				Me.SendPropertyChanging
				Me._PermissionItemShoworHideForDepartID = value
				Me.SendPropertyChanged("PermissionItemShoworHideForDepartID")
				Me.OnPermissionItemShoworHideForDepartIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DepartID", DbType:="Int")>  _
	Public Property DepartID() As System.Nullable(Of Integer)
		Get
			Return Me._DepartID
		End Get
		Set
			If (Me._DepartID.Equals(value) = false) Then
				Me.OnDepartIDChanging(value)
				Me.SendPropertyChanging
				Me._DepartID = value
				Me.SendPropertyChanged("DepartID")
				Me.OnDepartIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsShow", DbType:="Bit")>  _
	Public Property IsShow() As System.Nullable(Of Boolean)
		Get
			Return Me._IsShow
		End Get
		Set
			If (Me._IsShow.Equals(value) = false) Then
				Me.OnIsShowChanging(value)
				Me.SendPropertyChanging
				Me._IsShow = value
				Me.SendPropertyChanged("IsShow")
				Me.OnIsShowChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblPurchaseOrderStatus")>  _
Partial Public Class tblPurchaseOrderStatus
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _POStatusID As Integer
	
	Private _POStatus As String
	
	Private _Description As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPOStatusIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPOStatusIDChanged()
    End Sub
    Partial Private Sub OnPOStatusChanging(value As String)
    End Sub
    Partial Private Sub OnPOStatusChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_POStatusID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property POStatusID() As Integer
		Get
			Return Me._POStatusID
		End Get
		Set
			If ((Me._POStatusID = value)  _
						= false) Then
				Me.OnPOStatusIDChanging(value)
				Me.SendPropertyChanging
				Me._POStatusID = value
				Me.SendPropertyChanged("POStatusID")
				Me.OnPOStatusIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_POStatus", DbType:="NVarChar(100)")>  _
	Public Property POStatus() As String
		Get
			Return Me._POStatus
		End Get
		Set
			If (String.Equals(Me._POStatus, value) = false) Then
				Me.OnPOStatusChanging(value)
				Me.SendPropertyChanging
				Me._POStatus = value
				Me.SendPropertyChanged("POStatus")
				Me.OnPOStatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(250)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblReceivedDetail")>  _
Partial Public Class tblReceivedDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ReceivedDetailID As Decimal
	
	Private _ReceivedID As System.Nullable(Of Decimal)
	
	Private _ItemID As System.Nullable(Of Decimal)
	
	Private _ReceivedQuantity As System.Nullable(Of Integer)
	
	Private _Status As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnReceivedDetailIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnReceivedDetailIDChanged()
    End Sub
    Partial Private Sub OnReceivedIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnReceivedIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnReceivedQuantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReceivedQuantityChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ReceivedDetailID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ReceivedDetailID() As Decimal
		Get
			Return Me._ReceivedDetailID
		End Get
		Set
			If ((Me._ReceivedDetailID = value)  _
						= false) Then
				Me.OnReceivedDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._ReceivedDetailID = value
				Me.SendPropertyChanged("ReceivedDetailID")
				Me.OnReceivedDetailIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceivedID", DbType:="Decimal(18,0)")>  _
	Public Property ReceivedID() As System.Nullable(Of Decimal)
		Get
			Return Me._ReceivedID
		End Get
		Set
			If (Me._ReceivedID.Equals(value) = false) Then
				Me.OnReceivedIDChanging(value)
				Me.SendPropertyChanging
				Me._ReceivedID = value
				Me.SendPropertyChanged("ReceivedID")
				Me.OnReceivedIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Decimal(18,0)")>  _
	Public Property ItemID() As System.Nullable(Of Decimal)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceivedQuantity", DbType:="Int")>  _
	Public Property ReceivedQuantity() As System.Nullable(Of Integer)
		Get
			Return Me._ReceivedQuantity
		End Get
		Set
			If (Me._ReceivedQuantity.Equals(value) = false) Then
				Me.OnReceivedQuantityChanging(value)
				Me.SendPropertyChanging
				Me._ReceivedQuantity = value
				Me.SendPropertyChanged("ReceivedQuantity")
				Me.OnReceivedQuantityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblReceivedStatusTracking")>  _
Partial Public Class tblReceivedStatusTracking
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ReceivedStatusTrackingID As Decimal
	
	Private _ReceivedID As System.Nullable(Of Decimal)
	
	Private _POStatusID As System.Nullable(Of Integer)
	
	Private _UserIDReceivedUpdateStatus As System.Nullable(Of Integer)
	
	Private _UpdateReceivedStatusDate As System.Nullable(Of Date)
	
	Private _Comment As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnReceivedStatusTrackingIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnReceivedStatusTrackingIDChanged()
    End Sub
    Partial Private Sub OnReceivedIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnReceivedIDChanged()
    End Sub
    Partial Private Sub OnPOStatusIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPOStatusIDChanged()
    End Sub
    Partial Private Sub OnUserIDReceivedUpdateStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIDReceivedUpdateStatusChanged()
    End Sub
    Partial Private Sub OnUpdateReceivedStatusDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUpdateReceivedStatusDateChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ReceivedStatusTrackingID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ReceivedStatusTrackingID() As Decimal
		Get
			Return Me._ReceivedStatusTrackingID
		End Get
		Set
			If ((Me._ReceivedStatusTrackingID = value)  _
						= false) Then
				Me.OnReceivedStatusTrackingIDChanging(value)
				Me.SendPropertyChanging
				Me._ReceivedStatusTrackingID = value
				Me.SendPropertyChanged("ReceivedStatusTrackingID")
				Me.OnReceivedStatusTrackingIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceivedID", DbType:="Decimal(18,0)")>  _
	Public Property ReceivedID() As System.Nullable(Of Decimal)
		Get
			Return Me._ReceivedID
		End Get
		Set
			If (Me._ReceivedID.Equals(value) = false) Then
				Me.OnReceivedIDChanging(value)
				Me.SendPropertyChanging
				Me._ReceivedID = value
				Me.SendPropertyChanged("ReceivedID")
				Me.OnReceivedIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_POStatusID", DbType:="Int")>  _
	Public Property POStatusID() As System.Nullable(Of Integer)
		Get
			Return Me._POStatusID
		End Get
		Set
			If (Me._POStatusID.Equals(value) = false) Then
				Me.OnPOStatusIDChanging(value)
				Me.SendPropertyChanging
				Me._POStatusID = value
				Me.SendPropertyChanged("POStatusID")
				Me.OnPOStatusIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserIDReceivedUpdateStatus", DbType:="Int")>  _
	Public Property UserIDReceivedUpdateStatus() As System.Nullable(Of Integer)
		Get
			Return Me._UserIDReceivedUpdateStatus
		End Get
		Set
			If (Me._UserIDReceivedUpdateStatus.Equals(value) = false) Then
				Me.OnUserIDReceivedUpdateStatusChanging(value)
				Me.SendPropertyChanging
				Me._UserIDReceivedUpdateStatus = value
				Me.SendPropertyChanged("UserIDReceivedUpdateStatus")
				Me.OnUserIDReceivedUpdateStatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UpdateReceivedStatusDate", DbType:="DateTime")>  _
	Public Property UpdateReceivedStatusDate() As System.Nullable(Of Date)
		Get
			Return Me._UpdateReceivedStatusDate
		End Get
		Set
			If (Me._UpdateReceivedStatusDate.Equals(value) = false) Then
				Me.OnUpdateReceivedStatusDateChanging(value)
				Me.SendPropertyChanging
				Me._UpdateReceivedStatusDate = value
				Me.SendPropertyChanged("UpdateReceivedStatusDate")
				Me.OnUpdateReceivedStatusDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Comment", DbType:="NVarChar(500)")>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblRequestStatusTracking")>  _
Partial Public Class tblRequestStatusTracking
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RequestStatusTrackingID As Integer
	
	Private _RequestID As System.Nullable(Of Decimal)
	
	Private _POStatusID As System.Nullable(Of Integer)
	
	Private _UserIDRequestUpdateStatus As System.Nullable(Of Integer)
	
	Private _UpdateRequestStatusDate As System.Nullable(Of Date)
	
	Private _Comment As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRequestStatusTrackingIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequestStatusTrackingIDChanged()
    End Sub
    Partial Private Sub OnRequestIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRequestIDChanged()
    End Sub
    Partial Private Sub OnPOStatusIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPOStatusIDChanged()
    End Sub
    Partial Private Sub OnUserIDRequestUpdateStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIDRequestUpdateStatusChanged()
    End Sub
    Partial Private Sub OnUpdateRequestStatusDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUpdateRequestStatusDateChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_RequestStatusTrackingID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RequestStatusTrackingID() As Integer
		Get
			Return Me._RequestStatusTrackingID
		End Get
		Set
			If ((Me._RequestStatusTrackingID = value)  _
						= false) Then
				Me.OnRequestStatusTrackingIDChanging(value)
				Me.SendPropertyChanging
				Me._RequestStatusTrackingID = value
				Me.SendPropertyChanged("RequestStatusTrackingID")
				Me.OnRequestStatusTrackingIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestID", DbType:="Decimal(18,0)")>  _
	Public Property RequestID() As System.Nullable(Of Decimal)
		Get
			Return Me._RequestID
		End Get
		Set
			If (Me._RequestID.Equals(value) = false) Then
				Me.OnRequestIDChanging(value)
				Me.SendPropertyChanging
				Me._RequestID = value
				Me.SendPropertyChanged("RequestID")
				Me.OnRequestIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_POStatusID", DbType:="Int")>  _
	Public Property POStatusID() As System.Nullable(Of Integer)
		Get
			Return Me._POStatusID
		End Get
		Set
			If (Me._POStatusID.Equals(value) = false) Then
				Me.OnPOStatusIDChanging(value)
				Me.SendPropertyChanging
				Me._POStatusID = value
				Me.SendPropertyChanged("POStatusID")
				Me.OnPOStatusIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserIDRequestUpdateStatus", DbType:="Int")>  _
	Public Property UserIDRequestUpdateStatus() As System.Nullable(Of Integer)
		Get
			Return Me._UserIDRequestUpdateStatus
		End Get
		Set
			If (Me._UserIDRequestUpdateStatus.Equals(value) = false) Then
				Me.OnUserIDRequestUpdateStatusChanging(value)
				Me.SendPropertyChanging
				Me._UserIDRequestUpdateStatus = value
				Me.SendPropertyChanged("UserIDRequestUpdateStatus")
				Me.OnUserIDRequestUpdateStatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UpdateRequestStatusDate", DbType:="DateTime")>  _
	Public Property UpdateRequestStatusDate() As System.Nullable(Of Date)
		Get
			Return Me._UpdateRequestStatusDate
		End Get
		Set
			If (Me._UpdateRequestStatusDate.Equals(value) = false) Then
				Me.OnUpdateRequestStatusDateChanging(value)
				Me.SendPropertyChanging
				Me._UpdateRequestStatusDate = value
				Me.SendPropertyChanged("UpdateRequestStatusDate")
				Me.OnUpdateRequestStatusDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Comment", DbType:="NVarChar(500)")>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblVender")>  _
Partial Public Class tblVender
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _VenderID As Integer
	
	Private _VenderName As String
	
	Private _VenderPhone As String
	
	Private _VenderEmail As String
	
	Private _VenderFax As String
	
	Private _VenderAddress As String
	
	Private _Description As String
	
	Private _Website As String
	
	Private _IsDonator As System.Nullable(Of Boolean)
	
	Private _IsVendor As System.Nullable(Of Boolean)
	
	Private _IsMarkDelete As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnVenderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVenderIDChanged()
    End Sub
    Partial Private Sub OnVenderNameChanging(value As String)
    End Sub
    Partial Private Sub OnVenderNameChanged()
    End Sub
    Partial Private Sub OnVenderPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnVenderPhoneChanged()
    End Sub
    Partial Private Sub OnVenderEmailChanging(value As String)
    End Sub
    Partial Private Sub OnVenderEmailChanged()
    End Sub
    Partial Private Sub OnVenderFaxChanging(value As String)
    End Sub
    Partial Private Sub OnVenderFaxChanged()
    End Sub
    Partial Private Sub OnVenderAddressChanging(value As String)
    End Sub
    Partial Private Sub OnVenderAddressChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnWebsiteChanging(value As String)
    End Sub
    Partial Private Sub OnWebsiteChanged()
    End Sub
    Partial Private Sub OnIsDonatorChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDonatorChanged()
    End Sub
    Partial Private Sub OnIsVendorChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsVendorChanged()
    End Sub
    Partial Private Sub OnIsMarkDeleteChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsMarkDeleteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_VenderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property VenderID() As Integer
		Get
			Return Me._VenderID
		End Get
		Set
			If ((Me._VenderID = value)  _
						= false) Then
				Me.OnVenderIDChanging(value)
				Me.SendPropertyChanging
				Me._VenderID = value
				Me.SendPropertyChanged("VenderID")
				Me.OnVenderIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_VenderName", DbType:="NVarChar(150)")>  _
	Public Property VenderName() As String
		Get
			Return Me._VenderName
		End Get
		Set
			If (String.Equals(Me._VenderName, value) = false) Then
				Me.OnVenderNameChanging(value)
				Me.SendPropertyChanging
				Me._VenderName = value
				Me.SendPropertyChanged("VenderName")
				Me.OnVenderNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_VenderPhone", DbType:="NVarChar(50)")>  _
	Public Property VenderPhone() As String
		Get
			Return Me._VenderPhone
		End Get
		Set
			If (String.Equals(Me._VenderPhone, value) = false) Then
				Me.OnVenderPhoneChanging(value)
				Me.SendPropertyChanging
				Me._VenderPhone = value
				Me.SendPropertyChanged("VenderPhone")
				Me.OnVenderPhoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_VenderEmail", DbType:="NVarChar(50)")>  _
	Public Property VenderEmail() As String
		Get
			Return Me._VenderEmail
		End Get
		Set
			If (String.Equals(Me._VenderEmail, value) = false) Then
				Me.OnVenderEmailChanging(value)
				Me.SendPropertyChanging
				Me._VenderEmail = value
				Me.SendPropertyChanged("VenderEmail")
				Me.OnVenderEmailChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_VenderFax", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property VenderFax() As String
		Get
			Return Me._VenderFax
		End Get
		Set
			If (String.Equals(Me._VenderFax, value) = false) Then
				Me.OnVenderFaxChanging(value)
				Me.SendPropertyChanging
				Me._VenderFax = value
				Me.SendPropertyChanged("VenderFax")
				Me.OnVenderFaxChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_VenderAddress", DbType:="NVarChar(50)")>  _
	Public Property VenderAddress() As String
		Get
			Return Me._VenderAddress
		End Get
		Set
			If (String.Equals(Me._VenderAddress, value) = false) Then
				Me.OnVenderAddressChanging(value)
				Me.SendPropertyChanging
				Me._VenderAddress = value
				Me.SendPropertyChanged("VenderAddress")
				Me.OnVenderAddressChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(250)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Website", DbType:="NVarChar(100)")>  _
	Public Property Website() As String
		Get
			Return Me._Website
		End Get
		Set
			If (String.Equals(Me._Website, value) = false) Then
				Me.OnWebsiteChanging(value)
				Me.SendPropertyChanging
				Me._Website = value
				Me.SendPropertyChanged("Website")
				Me.OnWebsiteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsDonator", DbType:="Bit")>  _
	Public Property IsDonator() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDonator
		End Get
		Set
			If (Me._IsDonator.Equals(value) = false) Then
				Me.OnIsDonatorChanging(value)
				Me.SendPropertyChanging
				Me._IsDonator = value
				Me.SendPropertyChanged("IsDonator")
				Me.OnIsDonatorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsVendor", DbType:="Bit")>  _
	Public Property IsVendor() As System.Nullable(Of Boolean)
		Get
			Return Me._IsVendor
		End Get
		Set
			If (Me._IsVendor.Equals(value) = false) Then
				Me.OnIsVendorChanging(value)
				Me.SendPropertyChanging
				Me._IsVendor = value
				Me.SendPropertyChanged("IsVendor")
				Me.OnIsVendorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsMarkDelete", DbType:="Bit")>  _
	Public Property IsMarkDelete() As System.Nullable(Of Boolean)
		Get
			Return Me._IsMarkDelete
		End Get
		Set
			If (Me._IsMarkDelete.Equals(value) = false) Then
				Me.OnIsMarkDeleteChanging(value)
				Me.SendPropertyChanging
				Me._IsMarkDelete = value
				Me.SendPropertyChanged("IsMarkDelete")
				Me.OnIsMarkDeleteChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblReceived")>  _
Partial Public Class tblReceived
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ReceivedID As Decimal
	
	Private _RequestID As System.Nullable(Of Decimal)
	
	Private _ReceivedDate As System.Nullable(Of Date)
	
	Private _ReceivedDepartID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnReceivedIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnReceivedIDChanged()
    End Sub
    Partial Private Sub OnRequestIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRequestIDChanged()
    End Sub
    Partial Private Sub OnReceivedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReceivedDateChanged()
    End Sub
    Partial Private Sub OnReceivedDepartIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReceivedDepartIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ReceivedID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ReceivedID() As Decimal
		Get
			Return Me._ReceivedID
		End Get
		Set
			If ((Me._ReceivedID = value)  _
						= false) Then
				Me.OnReceivedIDChanging(value)
				Me.SendPropertyChanging
				Me._ReceivedID = value
				Me.SendPropertyChanged("ReceivedID")
				Me.OnReceivedIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestID", DbType:="Decimal(18,0)")>  _
	Public Property RequestID() As System.Nullable(Of Decimal)
		Get
			Return Me._RequestID
		End Get
		Set
			If (Me._RequestID.Equals(value) = false) Then
				Me.OnRequestIDChanging(value)
				Me.SendPropertyChanging
				Me._RequestID = value
				Me.SendPropertyChanged("RequestID")
				Me.OnRequestIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceivedDate", DbType:="DateTime")>  _
	Public Property ReceivedDate() As System.Nullable(Of Date)
		Get
			Return Me._ReceivedDate
		End Get
		Set
			If (Me._ReceivedDate.Equals(value) = false) Then
				Me.OnReceivedDateChanging(value)
				Me.SendPropertyChanging
				Me._ReceivedDate = value
				Me.SendPropertyChanged("ReceivedDate")
				Me.OnReceivedDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceivedDepartID", DbType:="Int")>  _
	Public Property ReceivedDepartID() As System.Nullable(Of Integer)
		Get
			Return Me._ReceivedDepartID
		End Get
		Set
			If (Me._ReceivedDepartID.Equals(value) = false) Then
				Me.OnReceivedDepartIDChanging(value)
				Me.SendPropertyChanging
				Me._ReceivedDepartID = value
				Me.SendPropertyChanged("ReceivedDepartID")
				Me.OnReceivedDepartIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblUsed")>  _
Partial Public Class tblUsed
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UsedID As Decimal
	
	Private _UsedDepartID As System.Nullable(Of Integer)
	
	Private _UsedDate As System.Nullable(Of Date)
	
	Private _UsedDescription As String
	
	Private _UsedUserID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUsedIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnUsedIDChanged()
    End Sub
    Partial Private Sub OnUsedDepartIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUsedDepartIDChanged()
    End Sub
    Partial Private Sub OnUsedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUsedDateChanged()
    End Sub
    Partial Private Sub OnUsedDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnUsedDescriptionChanged()
    End Sub
    Partial Private Sub OnUsedUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUsedUserIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_UsedID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UsedID() As Decimal
		Get
			Return Me._UsedID
		End Get
		Set
			If ((Me._UsedID = value)  _
						= false) Then
				Me.OnUsedIDChanging(value)
				Me.SendPropertyChanging
				Me._UsedID = value
				Me.SendPropertyChanged("UsedID")
				Me.OnUsedIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UsedDepartID", DbType:="Int")>  _
	Public Property UsedDepartID() As System.Nullable(Of Integer)
		Get
			Return Me._UsedDepartID
		End Get
		Set
			If (Me._UsedDepartID.Equals(value) = false) Then
				Me.OnUsedDepartIDChanging(value)
				Me.SendPropertyChanging
				Me._UsedDepartID = value
				Me.SendPropertyChanged("UsedDepartID")
				Me.OnUsedDepartIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UsedDate", DbType:="DateTime")>  _
	Public Property UsedDate() As System.Nullable(Of Date)
		Get
			Return Me._UsedDate
		End Get
		Set
			If (Me._UsedDate.Equals(value) = false) Then
				Me.OnUsedDateChanging(value)
				Me.SendPropertyChanging
				Me._UsedDate = value
				Me.SendPropertyChanged("UsedDate")
				Me.OnUsedDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UsedDescription", DbType:="NVarChar(250)")>  _
	Public Property UsedDescription() As String
		Get
			Return Me._UsedDescription
		End Get
		Set
			If (String.Equals(Me._UsedDescription, value) = false) Then
				Me.OnUsedDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._UsedDescription = value
				Me.SendPropertyChanged("UsedDescription")
				Me.OnUsedDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UsedUserID", DbType:="Int")>  _
	Public Property UsedUserID() As System.Nullable(Of Integer)
		Get
			Return Me._UsedUserID
		End Get
		Set
			If (Me._UsedUserID.Equals(value) = false) Then
				Me.OnUsedUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UsedUserID = value
				Me.SendPropertyChanged("UsedUserID")
				Me.OnUsedUserIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblUsedDetail")>  _
Partial Public Class tblUsedDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UsedDetailID As Decimal
	
	Private _UsedID As System.Nullable(Of Decimal)
	
	Private _ItemID As System.Nullable(Of Decimal)
	
	Private _UsedQuantity As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUsedDetailIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnUsedDetailIDChanged()
    End Sub
    Partial Private Sub OnUsedIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUsedIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnUsedQuantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUsedQuantityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_UsedDetailID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UsedDetailID() As Decimal
		Get
			Return Me._UsedDetailID
		End Get
		Set
			If ((Me._UsedDetailID = value)  _
						= false) Then
				Me.OnUsedDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._UsedDetailID = value
				Me.SendPropertyChanged("UsedDetailID")
				Me.OnUsedDetailIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UsedID", DbType:="Decimal(18,0)")>  _
	Public Property UsedID() As System.Nullable(Of Decimal)
		Get
			Return Me._UsedID
		End Get
		Set
			If (Me._UsedID.Equals(value) = false) Then
				Me.OnUsedIDChanging(value)
				Me.SendPropertyChanging
				Me._UsedID = value
				Me.SendPropertyChanged("UsedID")
				Me.OnUsedIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Decimal(18,0)")>  _
	Public Property ItemID() As System.Nullable(Of Decimal)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UsedQuantity", DbType:="Int")>  _
	Public Property UsedQuantity() As System.Nullable(Of Integer)
		Get
			Return Me._UsedQuantity
		End Get
		Set
			If (Me._UsedQuantity.Equals(value) = false) Then
				Me.OnUsedQuantityChanging(value)
				Me.SendPropertyChanging
				Me._UsedQuantity = value
				Me.SendPropertyChanged("UsedQuantity")
				Me.OnUsedQuantityChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblBeginBalanceTrace")>  _
Partial Public Class tblBeginBalanceTrace
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BeginBalanceTraceID As Decimal
	
	Private _DepartID As System.Nullable(Of Integer)
	
	Private _Date As System.Nullable(Of Date)
	
	Private _BeginBalanceOfDay As System.Nullable(Of Decimal)
	
	Private _ItemID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBeginBalanceTraceIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnBeginBalanceTraceIDChanged()
    End Sub
    Partial Private Sub OnDepartIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDepartIDChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnBeginBalanceOfDayChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBeginBalanceOfDayChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_BeginBalanceTraceID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BeginBalanceTraceID() As Decimal
		Get
			Return Me._BeginBalanceTraceID
		End Get
		Set
			If ((Me._BeginBalanceTraceID = value)  _
						= false) Then
				Me.OnBeginBalanceTraceIDChanging(value)
				Me.SendPropertyChanging
				Me._BeginBalanceTraceID = value
				Me.SendPropertyChanged("BeginBalanceTraceID")
				Me.OnBeginBalanceTraceIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DepartID", DbType:="Int")>  _
	Public Property DepartID() As System.Nullable(Of Integer)
		Get
			Return Me._DepartID
		End Get
		Set
			If (Me._DepartID.Equals(value) = false) Then
				Me.OnDepartIDChanging(value)
				Me.SendPropertyChanging
				Me._DepartID = value
				Me.SendPropertyChanged("DepartID")
				Me.OnDepartIDChanged
			End If
		End Set
	End Property
	
	<Column(Name:="Date", Storage:="_Date", DbType:="DateTime")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BeginBalanceOfDay", DbType:="Decimal(18,0)")>  _
	Public Property BeginBalanceOfDay() As System.Nullable(Of Decimal)
		Get
			Return Me._BeginBalanceOfDay
		End Get
		Set
			If (Me._BeginBalanceOfDay.Equals(value) = false) Then
				Me.OnBeginBalanceOfDayChanging(value)
				Me.SendPropertyChanging
				Me._BeginBalanceOfDay = value
				Me.SendPropertyChanged("BeginBalanceOfDay")
				Me.OnBeginBalanceOfDayChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblEndofMonthRun")>  _
Partial Public Class tblEndofMonthRun
	
	Private _Date As String
	
	Private _RequestQty As System.Nullable(Of Integer)
	
	Private _ReceivedQty As System.Nullable(Of Integer)
	
	Private _UsedQty As System.Nullable(Of Integer)
	
	Private _BeginBalance As System.Nullable(Of Integer)
	
	Private _EndBalance As System.Nullable(Of Integer)
	
	Private _DepartID As System.Nullable(Of Integer)
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _ItemName As String
	
	Private _Barcode As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Name:="Date", Storage:="_Date", DbType:="VarChar(50)")>  _
	Public Property [Date]() As String
		Get
			Return Me._Date
		End Get
		Set
			If (String.Equals(Me._Date, value) = false) Then
				Me._Date = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestQty", DbType:="Int")>  _
	Public Property RequestQty() As System.Nullable(Of Integer)
		Get
			Return Me._RequestQty
		End Get
		Set
			If (Me._RequestQty.Equals(value) = false) Then
				Me._RequestQty = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceivedQty", DbType:="Int")>  _
	Public Property ReceivedQty() As System.Nullable(Of Integer)
		Get
			Return Me._ReceivedQty
		End Get
		Set
			If (Me._ReceivedQty.Equals(value) = false) Then
				Me._ReceivedQty = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_UsedQty", DbType:="Int")>  _
	Public Property UsedQty() As System.Nullable(Of Integer)
		Get
			Return Me._UsedQty
		End Get
		Set
			If (Me._UsedQty.Equals(value) = false) Then
				Me._UsedQty = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_BeginBalance", DbType:="Int")>  _
	Public Property BeginBalance() As System.Nullable(Of Integer)
		Get
			Return Me._BeginBalance
		End Get
		Set
			If (Me._BeginBalance.Equals(value) = false) Then
				Me._BeginBalance = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_EndBalance", DbType:="Int")>  _
	Public Property EndBalance() As System.Nullable(Of Integer)
		Get
			Return Me._EndBalance
		End Get
		Set
			If (Me._EndBalance.Equals(value) = false) Then
				Me._EndBalance = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_DepartID", DbType:="Int")>  _
	Public Property DepartID() As System.Nullable(Of Integer)
		Get
			Return Me._DepartID
		End Get
		Set
			If (Me._DepartID.Equals(value) = false) Then
				Me._DepartID = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me._ItemID = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemName", DbType:="NVarChar(150)")>  _
	Public Property ItemName() As String
		Get
			Return Me._ItemName
		End Get
		Set
			If (String.Equals(Me._ItemName, value) = false) Then
				Me._ItemName = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Barcode", DbType:="NVarChar(50)")>  _
	Public Property Barcode() As String
		Get
			Return Me._Barcode
		End Get
		Set
			If (String.Equals(Me._Barcode, value) = false) Then
				Me._Barcode = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.tblDeptStock")>  _
Partial Public Class tblDeptStock
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DeptStockID As Decimal
	
	Private _DepartID As System.Nullable(Of Decimal)
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _UnitsInStock As System.Nullable(Of Integer)
	
	Private _StockAlertQty As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDeptStockIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnDeptStockIDChanged()
    End Sub
    Partial Private Sub OnDepartIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDepartIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnUnitsInStockChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUnitsInStockChanged()
    End Sub
    Partial Private Sub OnStockAlertQtyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnStockAlertQtyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_DeptStockID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DeptStockID() As Decimal
		Get
			Return Me._DeptStockID
		End Get
		Set
			If ((Me._DeptStockID = value)  _
						= false) Then
				Me.OnDeptStockIDChanging(value)
				Me.SendPropertyChanging
				Me._DeptStockID = value
				Me.SendPropertyChanged("DeptStockID")
				Me.OnDeptStockIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DepartID", DbType:="Decimal(18,0)")>  _
	Public Property DepartID() As System.Nullable(Of Decimal)
		Get
			Return Me._DepartID
		End Get
		Set
			If (Me._DepartID.Equals(value) = false) Then
				Me.OnDepartIDChanging(value)
				Me.SendPropertyChanging
				Me._DepartID = value
				Me.SendPropertyChanged("DepartID")
				Me.OnDepartIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UnitsInStock", DbType:="Int")>  _
	Public Property UnitsInStock() As System.Nullable(Of Integer)
		Get
			Return Me._UnitsInStock
		End Get
		Set
			If (Me._UnitsInStock.Equals(value) = false) Then
				Me.OnUnitsInStockChanging(value)
				Me.SendPropertyChanging
				Me._UnitsInStock = value
				Me.SendPropertyChanged("UnitsInStock")
				Me.OnUnitsInStockChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StockAlertQty", DbType:="Decimal(18,0)")>  _
	Public Property StockAlertQty() As System.Nullable(Of Decimal)
		Get
			Return Me._StockAlertQty
		End Get
		Set
			If (Me._StockAlertQty.Equals(value) = false) Then
				Me.OnStockAlertQtyChanging(value)
				Me.SendPropertyChanging
				Me._StockAlertQty = value
				Me.SendPropertyChanged("StockAlertQty")
				Me.OnStockAlertQtyChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblAdjustStockHistory")>  _
Partial Public Class tblAdjustStockHistory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AdjustStockID As Decimal
	
	Private _ItemID As System.Nullable(Of Decimal)
	
	Private _DepartID As System.Nullable(Of Integer)
	
	Private _UserID As System.Nullable(Of Integer)
	
	Private _CurrentQty As System.Nullable(Of Decimal)
	
	Private _NewQty As System.Nullable(Of Decimal)
	
	Private _Difference As System.Nullable(Of Decimal)
	
	Private _AdjustDate As System.Nullable(Of Date)
	
	Private _Comment As String
	
	Private _IsApproval As System.Nullable(Of Boolean)
	
	Private _ApprovalUserID As System.Nullable(Of Integer)
	
	Private _ExpireID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAdjustStockIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAdjustStockIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnDepartIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDepartIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnCurrentQtyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCurrentQtyChanged()
    End Sub
    Partial Private Sub OnNewQtyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnNewQtyChanged()
    End Sub
    Partial Private Sub OnDifferenceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDifferenceChanged()
    End Sub
    Partial Private Sub OnAdjustDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnAdjustDateChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnIsApprovalChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsApprovalChanged()
    End Sub
    Partial Private Sub OnApprovalUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApprovalUserIDChanged()
    End Sub
    Partial Private Sub OnExpireIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnExpireIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_AdjustStockID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AdjustStockID() As Decimal
		Get
			Return Me._AdjustStockID
		End Get
		Set
			If ((Me._AdjustStockID = value)  _
						= false) Then
				Me.OnAdjustStockIDChanging(value)
				Me.SendPropertyChanging
				Me._AdjustStockID = value
				Me.SendPropertyChanged("AdjustStockID")
				Me.OnAdjustStockIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Decimal(18,0)")>  _
	Public Property ItemID() As System.Nullable(Of Decimal)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DepartID", DbType:="Int")>  _
	Public Property DepartID() As System.Nullable(Of Integer)
		Get
			Return Me._DepartID
		End Get
		Set
			If (Me._DepartID.Equals(value) = false) Then
				Me.OnDepartIDChanging(value)
				Me.SendPropertyChanging
				Me._DepartID = value
				Me.SendPropertyChanged("DepartID")
				Me.OnDepartIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserID", DbType:="Int")>  _
	Public Property UserID() As System.Nullable(Of Integer)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CurrentQty", DbType:="Decimal(18,0)")>  _
	Public Property CurrentQty() As System.Nullable(Of Decimal)
		Get
			Return Me._CurrentQty
		End Get
		Set
			If (Me._CurrentQty.Equals(value) = false) Then
				Me.OnCurrentQtyChanging(value)
				Me.SendPropertyChanging
				Me._CurrentQty = value
				Me.SendPropertyChanged("CurrentQty")
				Me.OnCurrentQtyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_NewQty", DbType:="Decimal(18,0)")>  _
	Public Property NewQty() As System.Nullable(Of Decimal)
		Get
			Return Me._NewQty
		End Get
		Set
			If (Me._NewQty.Equals(value) = false) Then
				Me.OnNewQtyChanging(value)
				Me.SendPropertyChanging
				Me._NewQty = value
				Me.SendPropertyChanged("NewQty")
				Me.OnNewQtyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Difference", DbType:="Decimal(18,0)")>  _
	Public Property Difference() As System.Nullable(Of Decimal)
		Get
			Return Me._Difference
		End Get
		Set
			If (Me._Difference.Equals(value) = false) Then
				Me.OnDifferenceChanging(value)
				Me.SendPropertyChanging
				Me._Difference = value
				Me.SendPropertyChanged("Difference")
				Me.OnDifferenceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AdjustDate", DbType:="DateTime")>  _
	Public Property AdjustDate() As System.Nullable(Of Date)
		Get
			Return Me._AdjustDate
		End Get
		Set
			If (Me._AdjustDate.Equals(value) = false) Then
				Me.OnAdjustDateChanging(value)
				Me.SendPropertyChanging
				Me._AdjustDate = value
				Me.SendPropertyChanged("AdjustDate")
				Me.OnAdjustDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Comment", DbType:="NVarChar(250)")>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsApproval", DbType:="Bit")>  _
	Public Property IsApproval() As System.Nullable(Of Boolean)
		Get
			Return Me._IsApproval
		End Get
		Set
			If (Me._IsApproval.Equals(value) = false) Then
				Me.OnIsApprovalChanging(value)
				Me.SendPropertyChanging
				Me._IsApproval = value
				Me.SendPropertyChanged("IsApproval")
				Me.OnIsApprovalChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ApprovalUserID", DbType:="Int")>  _
	Public Property ApprovalUserID() As System.Nullable(Of Integer)
		Get
			Return Me._ApprovalUserID
		End Get
		Set
			If (Me._ApprovalUserID.Equals(value) = false) Then
				Me.OnApprovalUserIDChanging(value)
				Me.SendPropertyChanging
				Me._ApprovalUserID = value
				Me.SendPropertyChanged("ApprovalUserID")
				Me.OnApprovalUserIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ExpireID", DbType:="int")>  _
	Public Property ExpireID() As System.Nullable(Of Integer)
		Get
			Return Me._ExpireID
		End Get
		Set
			If (Me._ExpireID.Equals(value) = false) Then
				Me.OnExpireIDChanging(value)
				Me.SendPropertyChanging
				Me._ExpireID = value
				Me.SendPropertyChanged("ExpireID")
				Me.OnExpireIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.TblPatients")>  _
Partial Public Class TblPatient
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _No As Decimal
	
	Private _PatientNo As Decimal
	
	Private _OlePatientNo As System.Nullable(Of Decimal)
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _Province As String
	
	Private _District As String
	
	Private _Commune As String
	
	Private _NameEng As String
	
	Private _NameKhmer As String
	
	Private _Age As System.Nullable(Of Decimal)
	
	Private _Male As System.Nullable(Of Char)
	
	Private _Female As System.Nullable(Of Char)
	
	Private _Sex As System.Nullable(Of Char)
	
	Private _Address As String
	
	Private _Occupation As String
	
	Private _Telephone As String
	
	Private _Neighborly As String
	
	Private _Years As System.Nullable(Of Integer)
	
	Private _Achieve As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnNoChanged()
    End Sub
    Partial Private Sub OnPatientNoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPatientNoChanged()
    End Sub
    Partial Private Sub OnOlePatientNoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOlePatientNoChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnProvinceChanging(value As String)
    End Sub
    Partial Private Sub OnProvinceChanged()
    End Sub
    Partial Private Sub OnDistrictChanging(value As String)
    End Sub
    Partial Private Sub OnDistrictChanged()
    End Sub
    Partial Private Sub OnCommuneChanging(value As String)
    End Sub
    Partial Private Sub OnCommuneChanged()
    End Sub
    Partial Private Sub OnNameEngChanging(value As String)
    End Sub
    Partial Private Sub OnNameEngChanged()
    End Sub
    Partial Private Sub OnNameKhmerChanging(value As String)
    End Sub
    Partial Private Sub OnNameKhmerChanged()
    End Sub
    Partial Private Sub OnAgeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAgeChanged()
    End Sub
    Partial Private Sub OnMaleChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnMaleChanged()
    End Sub
    Partial Private Sub OnFemaleChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnFemaleChanged()
    End Sub
    Partial Private Sub OnSexChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnSexChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnOccupationChanging(value As String)
    End Sub
    Partial Private Sub OnOccupationChanged()
    End Sub
    Partial Private Sub OnTelephoneChanging(value As String)
    End Sub
    Partial Private Sub OnTelephoneChanged()
    End Sub
    Partial Private Sub OnNeighborlyChanging(value As String)
    End Sub
    Partial Private Sub OnNeighborlyChanged()
    End Sub
    Partial Private Sub OnYearsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYearsChanged()
    End Sub
    Partial Private Sub OnAchieveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnAchieveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_No", AutoSync:=AutoSync.Always, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property No() As Decimal
		Get
			Return Me._No
		End Get
		Set
			If ((Me._No = value)  _
						= false) Then
				Me.OnNoChanging(value)
				Me.SendPropertyChanging
				Me._No = value
				Me.SendPropertyChanged("No")
				Me.OnNoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PatientNo", DbType:="Decimal(18,0) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PatientNo() As Decimal
		Get
			Return Me._PatientNo
		End Get
		Set
			If ((Me._PatientNo = value)  _
						= false) Then
				Me.OnPatientNoChanging(value)
				Me.SendPropertyChanging
				Me._PatientNo = value
				Me.SendPropertyChanged("PatientNo")
				Me.OnPatientNoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OlePatientNo", DbType:="Decimal(18,0)")>  _
	Public Property OlePatientNo() As System.Nullable(Of Decimal)
		Get
			Return Me._OlePatientNo
		End Get
		Set
			If (Me._OlePatientNo.Equals(value) = false) Then
				Me.OnOlePatientNoChanging(value)
				Me.SendPropertyChanging
				Me._OlePatientNo = value
				Me.SendPropertyChanged("OlePatientNo")
				Me.OnOlePatientNoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Province", DbType:="NVarChar(50)")>  _
	Public Property Province() As String
		Get
			Return Me._Province
		End Get
		Set
			If (String.Equals(Me._Province, value) = false) Then
				Me.OnProvinceChanging(value)
				Me.SendPropertyChanging
				Me._Province = value
				Me.SendPropertyChanged("Province")
				Me.OnProvinceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_District", DbType:="NVarChar(50)")>  _
	Public Property District() As String
		Get
			Return Me._District
		End Get
		Set
			If (String.Equals(Me._District, value) = false) Then
				Me.OnDistrictChanging(value)
				Me.SendPropertyChanging
				Me._District = value
				Me.SendPropertyChanged("District")
				Me.OnDistrictChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Commune", DbType:="NVarChar(50)")>  _
	Public Property Commune() As String
		Get
			Return Me._Commune
		End Get
		Set
			If (String.Equals(Me._Commune, value) = false) Then
				Me.OnCommuneChanging(value)
				Me.SendPropertyChanging
				Me._Commune = value
				Me.SendPropertyChanged("Commune")
				Me.OnCommuneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_NameEng", DbType:="NVarChar(50)")>  _
	Public Property NameEng() As String
		Get
			Return Me._NameEng
		End Get
		Set
			If (String.Equals(Me._NameEng, value) = false) Then
				Me.OnNameEngChanging(value)
				Me.SendPropertyChanging
				Me._NameEng = value
				Me.SendPropertyChanged("NameEng")
				Me.OnNameEngChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_NameKhmer", DbType:="NVarChar(50)")>  _
	Public Property NameKhmer() As String
		Get
			Return Me._NameKhmer
		End Get
		Set
			If (String.Equals(Me._NameKhmer, value) = false) Then
				Me.OnNameKhmerChanging(value)
				Me.SendPropertyChanging
				Me._NameKhmer = value
				Me.SendPropertyChanged("NameKhmer")
				Me.OnNameKhmerChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Age", DbType:="Decimal(18,0)")>  _
	Public Property Age() As System.Nullable(Of Decimal)
		Get
			Return Me._Age
		End Get
		Set
			If (Me._Age.Equals(value) = false) Then
				Me.OnAgeChanging(value)
				Me.SendPropertyChanging
				Me._Age = value
				Me.SendPropertyChanged("Age")
				Me.OnAgeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Male", DbType:="Char(1)")>  _
	Public Property Male() As System.Nullable(Of Char)
		Get
			Return Me._Male
		End Get
		Set
			If (Me._Male.Equals(value) = false) Then
				Me.OnMaleChanging(value)
				Me.SendPropertyChanging
				Me._Male = value
				Me.SendPropertyChanged("Male")
				Me.OnMaleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Female", DbType:="Char(1)")>  _
	Public Property Female() As System.Nullable(Of Char)
		Get
			Return Me._Female
		End Get
		Set
			If (Me._Female.Equals(value) = false) Then
				Me.OnFemaleChanging(value)
				Me.SendPropertyChanging
				Me._Female = value
				Me.SendPropertyChanged("Female")
				Me.OnFemaleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Sex", DbType:="Char(1)")>  _
	Public Property Sex() As System.Nullable(Of Char)
		Get
			Return Me._Sex
		End Get
		Set
			If (Me._Sex.Equals(value) = false) Then
				Me.OnSexChanging(value)
				Me.SendPropertyChanging
				Me._Sex = value
				Me.SendPropertyChanged("Sex")
				Me.OnSexChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Address", DbType:="NVarChar(1000)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Occupation", DbType:="NVarChar(50)")>  _
	Public Property Occupation() As String
		Get
			Return Me._Occupation
		End Get
		Set
			If (String.Equals(Me._Occupation, value) = false) Then
				Me.OnOccupationChanging(value)
				Me.SendPropertyChanging
				Me._Occupation = value
				Me.SendPropertyChanged("Occupation")
				Me.OnOccupationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Telephone", DbType:="VarChar(50)")>  _
	Public Property Telephone() As String
		Get
			Return Me._Telephone
		End Get
		Set
			If (String.Equals(Me._Telephone, value) = false) Then
				Me.OnTelephoneChanging(value)
				Me.SendPropertyChanging
				Me._Telephone = value
				Me.SendPropertyChanged("Telephone")
				Me.OnTelephoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Neighborly", DbType:="NVarChar(50)")>  _
	Public Property Neighborly() As String
		Get
			Return Me._Neighborly
		End Get
		Set
			If (String.Equals(Me._Neighborly, value) = false) Then
				Me.OnNeighborlyChanging(value)
				Me.SendPropertyChanging
				Me._Neighborly = value
				Me.SendPropertyChanged("Neighborly")
				Me.OnNeighborlyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Years", DbType:="Int")>  _
	Public Property Years() As System.Nullable(Of Integer)
		Get
			Return Me._Years
		End Get
		Set
			If (Me._Years.Equals(value) = false) Then
				Me.OnYearsChanging(value)
				Me.SendPropertyChanging
				Me._Years = value
				Me.SendPropertyChanged("Years")
				Me.OnYearsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Achieve", DbType:="Bit")>  _
	Public Property Achieve() As System.Nullable(Of Boolean)
		Get
			Return Me._Achieve
		End Get
		Set
			If (Me._Achieve.Equals(value) = false) Then
				Me.OnAchieveChanging(value)
				Me.SendPropertyChanging
				Me._Achieve = value
				Me.SendPropertyChanged("Achieve")
				Me.OnAchieveChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.TblDoctor")>  _
Partial Public Class TblDoctor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DoctorNo As Decimal
	
	Private _DoctorName As String
	
	Private _Sex As System.Nullable(Of Char)
	
	Private _Age As System.Nullable(Of Decimal)
	
	Private _Tel As String
	
	Private _Job As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDoctorNoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnDoctorNoChanged()
    End Sub
    Partial Private Sub OnDoctorNameChanging(value As String)
    End Sub
    Partial Private Sub OnDoctorNameChanged()
    End Sub
    Partial Private Sub OnSexChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnSexChanged()
    End Sub
    Partial Private Sub OnAgeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAgeChanged()
    End Sub
    Partial Private Sub OnTelChanging(value As String)
    End Sub
    Partial Private Sub OnTelChanged()
    End Sub
    Partial Private Sub OnJobChanging(value As String)
    End Sub
    Partial Private Sub OnJobChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_DoctorNo", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DoctorNo() As Decimal
		Get
			Return Me._DoctorNo
		End Get
		Set
			If ((Me._DoctorNo = value)  _
						= false) Then
				Me.OnDoctorNoChanging(value)
				Me.SendPropertyChanging
				Me._DoctorNo = value
				Me.SendPropertyChanged("DoctorNo")
				Me.OnDoctorNoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DoctorName", DbType:="NVarChar(50)")>  _
	Public Property DoctorName() As String
		Get
			Return Me._DoctorName
		End Get
		Set
			If (String.Equals(Me._DoctorName, value) = false) Then
				Me.OnDoctorNameChanging(value)
				Me.SendPropertyChanging
				Me._DoctorName = value
				Me.SendPropertyChanged("DoctorName")
				Me.OnDoctorNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Sex", DbType:="Char(1)")>  _
	Public Property Sex() As System.Nullable(Of Char)
		Get
			Return Me._Sex
		End Get
		Set
			If (Me._Sex.Equals(value) = false) Then
				Me.OnSexChanging(value)
				Me.SendPropertyChanging
				Me._Sex = value
				Me.SendPropertyChanged("Sex")
				Me.OnSexChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Age", DbType:="Decimal(18,0)")>  _
	Public Property Age() As System.Nullable(Of Decimal)
		Get
			Return Me._Age
		End Get
		Set
			If (Me._Age.Equals(value) = false) Then
				Me.OnAgeChanging(value)
				Me.SendPropertyChanging
				Me._Age = value
				Me.SendPropertyChanged("Age")
				Me.OnAgeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Tel", DbType:="VarChar(50)")>  _
	Public Property Tel() As String
		Get
			Return Me._Tel
		End Get
		Set
			If (String.Equals(Me._Tel, value) = false) Then
				Me.OnTelChanging(value)
				Me.SendPropertyChanging
				Me._Tel = value
				Me.SendPropertyChanged("Tel")
				Me.OnTelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Job", DbType:="NVarChar(100)")>  _
	Public Property Job() As String
		Get
			Return Me._Job
		End Get
		Set
			If (String.Equals(Me._Job, value) = false) Then
				Me.OnJobChanging(value)
				Me.SendPropertyChanging
				Me._Job = value
				Me.SendPropertyChanged("Job")
				Me.OnJobChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblEndofDayRunStatus")>  _
Partial Public Class tblEndofDayRunStatus
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RunEndOfDayStatusID As Decimal
	
	Private _RunEndOfDayDate As System.Nullable(Of Date)
	
	Private _Status As System.Nullable(Of Integer)
	
	Private _DepartID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRunEndOfDayStatusIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnRunEndOfDayStatusIDChanged()
    End Sub
    Partial Private Sub OnRunEndOfDayDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRunEndOfDayDateChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnDepartIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDepartIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_RunEndOfDayStatusID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RunEndOfDayStatusID() As Decimal
		Get
			Return Me._RunEndOfDayStatusID
		End Get
		Set
			If ((Me._RunEndOfDayStatusID = value)  _
						= false) Then
				Me.OnRunEndOfDayStatusIDChanging(value)
				Me.SendPropertyChanging
				Me._RunEndOfDayStatusID = value
				Me.SendPropertyChanged("RunEndOfDayStatusID")
				Me.OnRunEndOfDayStatusIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RunEndOfDayDate", DbType:="DateTime")>  _
	Public Property RunEndOfDayDate() As System.Nullable(Of Date)
		Get
			Return Me._RunEndOfDayDate
		End Get
		Set
			If (Me._RunEndOfDayDate.Equals(value) = false) Then
				Me.OnRunEndOfDayDateChanging(value)
				Me.SendPropertyChanging
				Me._RunEndOfDayDate = value
				Me.SendPropertyChanged("RunEndOfDayDate")
				Me.OnRunEndOfDayDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DepartID", DbType:="Int")>  _
	Public Property DepartID() As System.Nullable(Of Integer)
		Get
			Return Me._DepartID
		End Get
		Set
			If (Me._DepartID.Equals(value) = false) Then
				Me.OnDepartIDChanging(value)
				Me.SendPropertyChanging
				Me._DepartID = value
				Me.SendPropertyChanged("DepartID")
				Me.OnDepartIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblItemPrice")>  _
Partial Public Class tblItemPrice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ItemPriceID As Decimal
	
	Private _ItemID As System.Nullable(Of Decimal)
	
	Private _Price As System.Nullable(Of Decimal)
	
	Private _IsUSD As System.Nullable(Of Boolean)
	
	Private _IsKHR As System.Nullable(Of Boolean)
	
	Private _IsCurPrice As System.Nullable(Of Boolean)
	
	Private _UserID As System.Nullable(Of Integer)
	
	Private _PriceDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnItemPriceIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnItemPriceIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnIsUSDChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsUSDChanged()
    End Sub
    Partial Private Sub OnIsKHRChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsKHRChanged()
    End Sub
    Partial Private Sub OnIsCurPriceChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsCurPriceChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnPriceDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPriceDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ItemPriceID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ItemPriceID() As Decimal
		Get
			Return Me._ItemPriceID
		End Get
		Set
			If ((Me._ItemPriceID = value)  _
						= false) Then
				Me.OnItemPriceIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemPriceID = value
				Me.SendPropertyChanged("ItemPriceID")
				Me.OnItemPriceIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Decimal(18,0)")>  _
	Public Property ItemID() As System.Nullable(Of Decimal)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Price", DbType:="Decimal(18,3)")>  _
	Public Property Price() As System.Nullable(Of Decimal)
		Get
			Return Me._Price
		End Get
		Set
			If (Me._Price.Equals(value) = false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsUSD", DbType:="Bit")>  _
	Public Property IsUSD() As System.Nullable(Of Boolean)
		Get
			Return Me._IsUSD
		End Get
		Set
			If (Me._IsUSD.Equals(value) = false) Then
				Me.OnIsUSDChanging(value)
				Me.SendPropertyChanging
				Me._IsUSD = value
				Me.SendPropertyChanged("IsUSD")
				Me.OnIsUSDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsKHR", DbType:="Bit")>  _
	Public Property IsKHR() As System.Nullable(Of Boolean)
		Get
			Return Me._IsKHR
		End Get
		Set
			If (Me._IsKHR.Equals(value) = false) Then
				Me.OnIsKHRChanging(value)
				Me.SendPropertyChanging
				Me._IsKHR = value
				Me.SendPropertyChanged("IsKHR")
				Me.OnIsKHRChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsCurPrice", DbType:="Bit")>  _
	Public Property IsCurPrice() As System.Nullable(Of Boolean)
		Get
			Return Me._IsCurPrice
		End Get
		Set
			If (Me._IsCurPrice.Equals(value) = false) Then
				Me.OnIsCurPriceChanging(value)
				Me.SendPropertyChanging
				Me._IsCurPrice = value
				Me.SendPropertyChanged("IsCurPrice")
				Me.OnIsCurPriceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserID", DbType:="Int")>  _
	Public Property UserID() As System.Nullable(Of Integer)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PriceDate", DbType:="DateTime")>  _
	Public Property PriceDate() As System.Nullable(Of Date)
		Get
			Return Me._PriceDate
		End Get
		Set
			If (Me._PriceDate.Equals(value) = false) Then
				Me.OnPriceDateChanging(value)
				Me.SendPropertyChanging
				Me._PriceDate = value
				Me.SendPropertyChanged("PriceDate")
				Me.OnPriceDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.CURRENCY")>  _
Partial Public Class CURRENCY
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CurrencyID As Decimal
	
	Private _Currency As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCurrencyIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCurrencyIDChanged()
    End Sub
    Partial Private Sub OnCurrencyChanging(value As String)
    End Sub
    Partial Private Sub OnCurrencyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_CurrencyID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CurrencyID() As Decimal
		Get
			Return Me._CurrencyID
		End Get
		Set
			If ((Me._CurrencyID = value)  _
						= false) Then
				Me.OnCurrencyIDChanging(value)
				Me.SendPropertyChanging
				Me._CurrencyID = value
				Me.SendPropertyChanged("CurrencyID")
				Me.OnCurrencyIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Currency", DbType:="VarChar(50)")>  _
	Public Property Currency() As String
		Get
			Return Me._Currency
		End Get
		Set
			If (String.Equals(Me._Currency, value) = false) Then
				Me.OnCurrencyChanging(value)
				Me.SendPropertyChanging
				Me._Currency = value
				Me.SendPropertyChanged("Currency")
				Me.OnCurrencyChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.COUNTRY")>  _
Partial Public Class COUNTRY
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CountryID As Decimal
	
	Private _Country As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCountryIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCountryIDChanged()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_CountryID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CountryID() As Decimal
		Get
			Return Me._CountryID
		End Get
		Set
			If ((Me._CountryID = value)  _
						= false) Then
				Me.OnCountryIDChanging(value)
				Me.SendPropertyChanging
				Me._CountryID = value
				Me.SendPropertyChanged("CountryID")
				Me.OnCountryIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Country", DbType:="NVarChar(250)")>  _
	Public Property Country() As String
		Get
			Return Me._Country
		End Get
		Set
			If (String.Equals(Me._Country, value) = false) Then
				Me.OnCountryChanging(value)
				Me.SendPropertyChanging
				Me._Country = value
				Me.SendPropertyChanged("Country")
				Me.OnCountryChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblItem")>  _
Partial Public Class tblItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ItemID As Integer
	
	Private _ItemCode As String
	
	Private _CateID As System.Nullable(Of Integer)
	
	Private _ItemUnitID As System.Nullable(Of Integer)
	
	Private _LabourFacID As System.Nullable(Of Integer)
	
	Private _ItemName As String
	
	Private _ItemDescription As String
	
	Private _ItemRegisterDate As System.Nullable(Of Date)
	
	Private _Barcode As String
	
	Private _VendorID As System.Nullable(Of Integer)
	
	Private _ContainerID As System.Nullable(Of Integer)
	
	Private _UnitPrice As System.Nullable(Of Decimal)
	
	Private _Picture As System.Data.Linq.Binary
	
	Private _DonatorID As System.Nullable(Of Integer)
	
	Private _IsMedicine As System.Nullable(Of Boolean)
	
	Private _CurrencyID As System.Nullable(Of Decimal)
	
	Private _DateExpired As System.Nullable(Of Date)
	
	Private _CountryID As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnItemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnItemCodeChanging(value As String)
    End Sub
    Partial Private Sub OnItemCodeChanged()
    End Sub
    Partial Private Sub OnCateIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCateIDChanged()
    End Sub
    Partial Private Sub OnItemUnitIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemUnitIDChanged()
    End Sub
    Partial Private Sub OnLabourFacIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLabourFacIDChanged()
    End Sub
    Partial Private Sub OnItemNameChanging(value As String)
    End Sub
    Partial Private Sub OnItemNameChanged()
    End Sub
    Partial Private Sub OnItemDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnItemDescriptionChanged()
    End Sub
    Partial Private Sub OnItemRegisterDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnItemRegisterDateChanged()
    End Sub
    Partial Private Sub OnBarcodeChanging(value As String)
    End Sub
    Partial Private Sub OnBarcodeChanged()
    End Sub
    Partial Private Sub OnVendorIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVendorIDChanged()
    End Sub
    Partial Private Sub OnContainerIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnContainerIDChanged()
    End Sub
    Partial Private Sub OnUnitPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUnitPriceChanged()
    End Sub
    Partial Private Sub OnPictureChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPictureChanged()
    End Sub
    Partial Private Sub OnDonatorIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDonatorIDChanged()
    End Sub
    Partial Private Sub OnIsMedicineChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsMedicineChanged()
    End Sub
    Partial Private Sub OnCurrencyIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCurrencyIDChanged()
    End Sub
    Partial Private Sub OnDateExpiredChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateExpiredChanged()
    End Sub
    Partial Private Sub OnCountryIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCountryIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ItemID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ItemID() As Integer
		Get
			Return Me._ItemID
		End Get
		Set
			If ((Me._ItemID = value)  _
						= false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemCode", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ItemCode() As String
		Get
			Return Me._ItemCode
		End Get
		Set
			If (String.Equals(Me._ItemCode, value) = false) Then
				Me.OnItemCodeChanging(value)
				Me.SendPropertyChanging
				Me._ItemCode = value
				Me.SendPropertyChanged("ItemCode")
				Me.OnItemCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CateID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CateID() As System.Nullable(Of Integer)
		Get
			Return Me._CateID
		End Get
		Set
			If (Me._CateID.Equals(value) = false) Then
				Me.OnCateIDChanging(value)
				Me.SendPropertyChanging
				Me._CateID = value
				Me.SendPropertyChanged("CateID")
				Me.OnCateIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemUnitID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ItemUnitID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemUnitID
		End Get
		Set
			If (Me._ItemUnitID.Equals(value) = false) Then
				Me.OnItemUnitIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemUnitID = value
				Me.SendPropertyChanged("ItemUnitID")
				Me.OnItemUnitIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LabourFacID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LabourFacID() As System.Nullable(Of Integer)
		Get
			Return Me._LabourFacID
		End Get
		Set
			If (Me._LabourFacID.Equals(value) = false) Then
				Me.OnLabourFacIDChanging(value)
				Me.SendPropertyChanging
				Me._LabourFacID = value
				Me.SendPropertyChanged("LabourFacID")
				Me.OnLabourFacIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemName", DbType:="NVarChar(150)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ItemName() As String
		Get
			Return Me._ItemName
		End Get
		Set
			If (String.Equals(Me._ItemName, value) = false) Then
				Me.OnItemNameChanging(value)
				Me.SendPropertyChanging
				Me._ItemName = value
				Me.SendPropertyChanged("ItemName")
				Me.OnItemNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemDescription", DbType:="NVarChar(250)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ItemDescription() As String
		Get
			Return Me._ItemDescription
		End Get
		Set
			If (String.Equals(Me._ItemDescription, value) = false) Then
				Me.OnItemDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ItemDescription = value
				Me.SendPropertyChanged("ItemDescription")
				Me.OnItemDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemRegisterDate", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ItemRegisterDate() As System.Nullable(Of Date)
		Get
			Return Me._ItemRegisterDate
		End Get
		Set
			If (Me._ItemRegisterDate.Equals(value) = false) Then
				Me.OnItemRegisterDateChanging(value)
				Me.SendPropertyChanging
				Me._ItemRegisterDate = value
				Me.SendPropertyChanged("ItemRegisterDate")
				Me.OnItemRegisterDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Barcode", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Barcode() As String
		Get
			Return Me._Barcode
		End Get
		Set
			If (String.Equals(Me._Barcode, value) = false) Then
				Me.OnBarcodeChanging(value)
				Me.SendPropertyChanging
				Me._Barcode = value
				Me.SendPropertyChanged("Barcode")
				Me.OnBarcodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_VendorID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property VendorID() As System.Nullable(Of Integer)
		Get
			Return Me._VendorID
		End Get
		Set
			If (Me._VendorID.Equals(value) = false) Then
				Me.OnVendorIDChanging(value)
				Me.SendPropertyChanging
				Me._VendorID = value
				Me.SendPropertyChanged("VendorID")
				Me.OnVendorIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContainerID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ContainerID() As System.Nullable(Of Integer)
		Get
			Return Me._ContainerID
		End Get
		Set
			If (Me._ContainerID.Equals(value) = false) Then
				Me.OnContainerIDChanging(value)
				Me.SendPropertyChanging
				Me._ContainerID = value
				Me.SendPropertyChanged("ContainerID")
				Me.OnContainerIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UnitPrice", DbType:="Decimal(18,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UnitPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._UnitPrice
		End Get
		Set
			If (Me._UnitPrice.Equals(value) = false) Then
				Me.OnUnitPriceChanging(value)
				Me.SendPropertyChanging
				Me._UnitPrice = value
				Me.SendPropertyChanged("UnitPrice")
				Me.OnUnitPriceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Picture", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Picture() As System.Data.Linq.Binary
		Get
			Return Me._Picture
		End Get
		Set
			If (Object.Equals(Me._Picture, value) = false) Then
				Me.OnPictureChanging(value)
				Me.SendPropertyChanging
				Me._Picture = value
				Me.SendPropertyChanged("Picture")
				Me.OnPictureChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DonatorID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DonatorID() As System.Nullable(Of Integer)
		Get
			Return Me._DonatorID
		End Get
		Set
			If (Me._DonatorID.Equals(value) = false) Then
				Me.OnDonatorIDChanging(value)
				Me.SendPropertyChanging
				Me._DonatorID = value
				Me.SendPropertyChanged("DonatorID")
				Me.OnDonatorIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsMedicine", DbType:="Bit", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IsMedicine() As System.Nullable(Of Boolean)
		Get
			Return Me._IsMedicine
		End Get
		Set
			If (Me._IsMedicine.Equals(value) = false) Then
				Me.OnIsMedicineChanging(value)
				Me.SendPropertyChanging
				Me._IsMedicine = value
				Me.SendPropertyChanged("IsMedicine")
				Me.OnIsMedicineChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CurrencyID", DbType:="Decimal(18,0)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CurrencyID() As System.Nullable(Of Decimal)
		Get
			Return Me._CurrencyID
		End Get
		Set
			If (Me._CurrencyID.Equals(value) = false) Then
				Me.OnCurrencyIDChanging(value)
				Me.SendPropertyChanging
				Me._CurrencyID = value
				Me.SendPropertyChanged("CurrencyID")
				Me.OnCurrencyIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DateExpired", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DateExpired() As System.Nullable(Of Date)
		Get
			Return Me._DateExpired
		End Get
		Set
			If (Me._DateExpired.Equals(value) = false) Then
				Me.OnDateExpiredChanging(value)
				Me.SendPropertyChanging
				Me._DateExpired = value
				Me.SendPropertyChanged("DateExpired")
				Me.OnDateExpiredChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CountryID", DbType:="Decimal(18,0)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CountryID() As System.Nullable(Of Decimal)
		Get
			Return Me._CountryID
		End Get
		Set
			If (Me._CountryID.Equals(value) = false) Then
				Me.OnCountryIDChanging(value)
				Me.SendPropertyChanging
				Me._CountryID = value
				Me.SendPropertyChanged("CountryID")
				Me.OnCountryIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ITEM_OUTSIDE_INVENTORY")>  _
Partial Public Class ITEM_OUTSIDE_INVENTORY
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ItemID As Decimal
	
	Private _ItemName As String
	
	Private _Quantity As System.Nullable(Of Decimal)
	
	Private _PrescripID As System.Nullable(Of Decimal)
	
	Private _DepartID As System.Nullable(Of Integer)
	
	Private _IsRegistered As System.Nullable(Of Boolean)
	
	Private _ContainerID As System.Nullable(Of Integer)
	
	Private _LabourFacID As System.Nullable(Of Integer)
	
	Private _RegisterDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnItemIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnItemNameChanging(value As String)
    End Sub
    Partial Private Sub OnItemNameChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnPrescripIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPrescripIDChanged()
    End Sub
    Partial Private Sub OnDepartIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDepartIDChanged()
    End Sub
    Partial Private Sub OnIsRegisteredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsRegisteredChanged()
    End Sub
    Partial Private Sub OnContainerIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnContainerIDChanged()
    End Sub
    Partial Private Sub OnLabourFacIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLabourFacIDChanged()
    End Sub
    Partial Private Sub OnRegisterDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRegisterDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ItemID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ItemID() As Decimal
		Get
			Return Me._ItemID
		End Get
		Set
			If ((Me._ItemID = value)  _
						= false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemName", DbType:="NVarChar(150)")>  _
	Public Property ItemName() As String
		Get
			Return Me._ItemName
		End Get
		Set
			If (String.Equals(Me._ItemName, value) = false) Then
				Me.OnItemNameChanging(value)
				Me.SendPropertyChanging
				Me._ItemName = value
				Me.SendPropertyChanged("ItemName")
				Me.OnItemNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Quantity", DbType:="Decimal(18,0)")>  _
	Public Property Quantity() As System.Nullable(Of Decimal)
		Get
			Return Me._Quantity
		End Get
		Set
			If (Me._Quantity.Equals(value) = false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PrescripID", DbType:="Decimal(18,0)")>  _
	Public Property PrescripID() As System.Nullable(Of Decimal)
		Get
			Return Me._PrescripID
		End Get
		Set
			If (Me._PrescripID.Equals(value) = false) Then
				Me.OnPrescripIDChanging(value)
				Me.SendPropertyChanging
				Me._PrescripID = value
				Me.SendPropertyChanged("PrescripID")
				Me.OnPrescripIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DepartID", DbType:="Int")>  _
	Public Property DepartID() As System.Nullable(Of Integer)
		Get
			Return Me._DepartID
		End Get
		Set
			If (Me._DepartID.Equals(value) = false) Then
				Me.OnDepartIDChanging(value)
				Me.SendPropertyChanging
				Me._DepartID = value
				Me.SendPropertyChanged("DepartID")
				Me.OnDepartIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsRegistered", DbType:="Bit")>  _
	Public Property IsRegistered() As System.Nullable(Of Boolean)
		Get
			Return Me._IsRegistered
		End Get
		Set
			If (Me._IsRegistered.Equals(value) = false) Then
				Me.OnIsRegisteredChanging(value)
				Me.SendPropertyChanging
				Me._IsRegistered = value
				Me.SendPropertyChanged("IsRegistered")
				Me.OnIsRegisteredChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContainerID", DbType:="Int")>  _
	Public Property ContainerID() As System.Nullable(Of Integer)
		Get
			Return Me._ContainerID
		End Get
		Set
			If (Me._ContainerID.Equals(value) = false) Then
				Me.OnContainerIDChanging(value)
				Me.SendPropertyChanging
				Me._ContainerID = value
				Me.SendPropertyChanged("ContainerID")
				Me.OnContainerIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LabourFacID", DbType:="Int")>  _
	Public Property LabourFacID() As System.Nullable(Of Integer)
		Get
			Return Me._LabourFacID
		End Get
		Set
			If (Me._LabourFacID.Equals(value) = false) Then
				Me.OnLabourFacIDChanging(value)
				Me.SendPropertyChanging
				Me._LabourFacID = value
				Me.SendPropertyChanged("LabourFacID")
				Me.OnLabourFacIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RegisterDate", DbType:="DateTime")>  _
	Public Property RegisterDate() As System.Nullable(Of Date)
		Get
			Return Me._RegisterDate
		End Get
		Set
			If (Me._RegisterDate.Equals(value) = false) Then
				Me.OnRegisterDateChanging(value)
				Me.SendPropertyChanging
				Me._RegisterDate = value
				Me.SendPropertyChanged("RegisterDate")
				Me.OnRegisterDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ITEM_PROVIDER_TRANS")>  _
Partial Public Class ITEM_PROVIDER_TRAN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ItemDepartTransID As Decimal
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _RequestID As System.Nullable(Of Decimal)
	
	Private _ProviderID As System.Nullable(Of Decimal)
	
	Private _TransDate As System.Nullable(Of Date)
	
	Private _DepartUseID As System.Nullable(Of Integer)
	
	Private _Quantity As System.Nullable(Of Decimal)
	
	Private _Status As System.Nullable(Of Boolean)
	
	Private _EXPIRE_DATE As Date
	
	Private _EXPIRE_ID As Decimal
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnItemDepartTransIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnItemDepartTransIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnRequestIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRequestIDChanged()
    End Sub
    Partial Private Sub OnProviderIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnProviderIDChanged()
    End Sub
    Partial Private Sub OnTransDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTransDateChanged()
    End Sub
    Partial Private Sub OnDepartUseIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDepartUseIDChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnEXPIRE_DATEChanging(value As Date)
    End Sub
    Partial Private Sub OnEXPIRE_DATEChanged()
    End Sub
    Partial Private Sub OnEXPIRE_IDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnEXPIRE_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ItemDepartTransID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ItemDepartTransID() As Decimal
		Get
			Return Me._ItemDepartTransID
		End Get
		Set
			If ((Me._ItemDepartTransID = value)  _
						= false) Then
				Me.OnItemDepartTransIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemDepartTransID = value
				Me.SendPropertyChanged("ItemDepartTransID")
				Me.OnItemDepartTransIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestID", DbType:="Decimal(18,0)")>  _
	Public Property RequestID() As System.Nullable(Of Decimal)
		Get
			Return Me._RequestID
		End Get
		Set
			If (Me._RequestID.Equals(value) = false) Then
				Me.OnRequestIDChanging(value)
				Me.SendPropertyChanging
				Me._RequestID = value
				Me.SendPropertyChanged("RequestID")
				Me.OnRequestIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProviderID", DbType:="Decimal(18,0)")>  _
	Public Property ProviderID() As System.Nullable(Of Decimal)
		Get
			Return Me._ProviderID
		End Get
		Set
			If (Me._ProviderID.Equals(value) = false) Then
				Me.OnProviderIDChanging(value)
				Me.SendPropertyChanging
				Me._ProviderID = value
				Me.SendPropertyChanged("ProviderID")
				Me.OnProviderIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TransDate", DbType:="DateTime")>  _
	Public Property TransDate() As System.Nullable(Of Date)
		Get
			Return Me._TransDate
		End Get
		Set
			If (Me._TransDate.Equals(value) = false) Then
				Me.OnTransDateChanging(value)
				Me.SendPropertyChanging
				Me._TransDate = value
				Me.SendPropertyChanged("TransDate")
				Me.OnTransDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DepartUseID", DbType:="Int")>  _
	Public Property DepartUseID() As System.Nullable(Of Integer)
		Get
			Return Me._DepartUseID
		End Get
		Set
			If (Me._DepartUseID.Equals(value) = false) Then
				Me.OnDepartUseIDChanging(value)
				Me.SendPropertyChanging
				Me._DepartUseID = value
				Me.SendPropertyChanged("DepartUseID")
				Me.OnDepartUseIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Quantity", DbType:="Decimal(18,0)")>  _
	Public Property Quantity() As System.Nullable(Of Decimal)
		Get
			Return Me._Quantity
		End Get
		Set
			If (Me._Quantity.Equals(value) = false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Status", DbType:="Bit")>  _
	Public Property Status() As System.Nullable(Of Boolean)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EXPIRE_DATE", DbType:="datetime")>  _
	Public Property EXPIRE_DATE() As Date
		Get
			Return Me._EXPIRE_DATE
		End Get
		Set
			If ((Me._EXPIRE_DATE = value)  _
						= false) Then
				Me.OnEXPIRE_DATEChanging(value)
				Me.SendPropertyChanging
				Me._EXPIRE_DATE = value
				Me.SendPropertyChanged("EXPIRE_DATE")
				Me.OnEXPIRE_DATEChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EXPIRE_ID", DbType:="Decimal(18,0)")>  _
	Public Property EXPIRE_ID() As Decimal
		Get
			Return Me._EXPIRE_ID
		End Get
		Set
			If ((Me._EXPIRE_ID = value)  _
						= false) Then
				Me.OnEXPIRE_IDChanging(value)
				Me.SendPropertyChanging
				Me._EXPIRE_ID = value
				Me.SendPropertyChanged("EXPIRE_ID")
				Me.OnEXPIRE_IDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblContainer")>  _
Partial Public Class tblContainer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ContainerID As Integer
	
	Private _ContainerName As String
	
	Private _Description As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnContainerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnContainerIDChanged()
    End Sub
    Partial Private Sub OnContainerNameChanging(value As String)
    End Sub
    Partial Private Sub OnContainerNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ContainerID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ContainerID() As Integer
		Get
			Return Me._ContainerID
		End Get
		Set
			If ((Me._ContainerID = value)  _
						= false) Then
				Me.OnContainerIDChanging(value)
				Me.SendPropertyChanging
				Me._ContainerID = value
				Me.SendPropertyChanged("ContainerID")
				Me.OnContainerIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContainerName", DbType:="NVarChar(150)")>  _
	Public Property ContainerName() As String
		Get
			Return Me._ContainerName
		End Get
		Set
			If (String.Equals(Me._ContainerName, value) = false) Then
				Me.OnContainerNameChanging(value)
				Me.SendPropertyChanging
				Me._ContainerName = value
				Me.SendPropertyChanged("ContainerName")
				Me.OnContainerNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(250)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblCentralInventory")>  _
Partial Public Class tblCentralInventory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _InventoryID As Integer
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _UnitsInStock As System.Nullable(Of Integer)
	
	Private _UnitsOnOrder As System.Nullable(Of Integer)
	
	Private _StockAlertQty As System.Nullable(Of Decimal)
	
	Private _ExpiredAlert As System.Nullable(Of Decimal)
	
	Private _DepartID As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnInventoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnInventoryIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnUnitsInStockChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUnitsInStockChanged()
    End Sub
    Partial Private Sub OnUnitsOnOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUnitsOnOrderChanged()
    End Sub
    Partial Private Sub OnStockAlertQtyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnStockAlertQtyChanged()
    End Sub
    Partial Private Sub OnExpiredAlertChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnExpiredAlertChanged()
    End Sub
    Partial Private Sub OnDepartIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDepartIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_InventoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property InventoryID() As Integer
		Get
			Return Me._InventoryID
		End Get
		Set
			If ((Me._InventoryID = value)  _
						= false) Then
				Me.OnInventoryIDChanging(value)
				Me.SendPropertyChanging
				Me._InventoryID = value
				Me.SendPropertyChanged("InventoryID")
				Me.OnInventoryIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UnitsInStock", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UnitsInStock() As System.Nullable(Of Integer)
		Get
			Return Me._UnitsInStock
		End Get
		Set
			If (Me._UnitsInStock.Equals(value) = false) Then
				Me.OnUnitsInStockChanging(value)
				Me.SendPropertyChanging
				Me._UnitsInStock = value
				Me.SendPropertyChanged("UnitsInStock")
				Me.OnUnitsInStockChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UnitsOnOrder", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UnitsOnOrder() As System.Nullable(Of Integer)
		Get
			Return Me._UnitsOnOrder
		End Get
		Set
			If (Me._UnitsOnOrder.Equals(value) = false) Then
				Me.OnUnitsOnOrderChanging(value)
				Me.SendPropertyChanging
				Me._UnitsOnOrder = value
				Me.SendPropertyChanged("UnitsOnOrder")
				Me.OnUnitsOnOrderChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StockAlertQty", DbType:="Decimal(18,0)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property StockAlertQty() As System.Nullable(Of Decimal)
		Get
			Return Me._StockAlertQty
		End Get
		Set
			If (Me._StockAlertQty.Equals(value) = false) Then
				Me.OnStockAlertQtyChanging(value)
				Me.SendPropertyChanging
				Me._StockAlertQty = value
				Me.SendPropertyChanged("StockAlertQty")
				Me.OnStockAlertQtyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ExpiredAlert", DbType:="Decimal(18,0)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ExpiredAlert() As System.Nullable(Of Decimal)
		Get
			Return Me._ExpiredAlert
		End Get
		Set
			If (Me._ExpiredAlert.Equals(value) = false) Then
				Me.OnExpiredAlertChanging(value)
				Me.SendPropertyChanging
				Me._ExpiredAlert = value
				Me.SendPropertyChanged("ExpiredAlert")
				Me.OnExpiredAlertChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DepartID", DbType:="Decimal(18,0)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DepartID() As System.Nullable(Of Decimal)
		Get
			Return Me._DepartID
		End Get
		Set
			If (Me._DepartID.Equals(value) = false) Then
				Me.OnDepartIDChanging(value)
				Me.SendPropertyChanging
				Me._DepartID = value
				Me.SendPropertyChanged("DepartID")
				Me.OnDepartIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.PRESCIP_INVENTORY")>  _
Partial Public Class PRESCIP_INVENTORY
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PrescripID As Decimal
	
	Private _PatientNo As System.Nullable(Of Decimal)
	
	Private _DoctorNo As System.Nullable(Of Decimal)
	
	Private _IssueDate As System.Nullable(Of Date)
	
	Private _DiagnosisID As System.Nullable(Of Decimal)
	
	Private _Status As System.Nullable(Of Integer)
	
	Private _Female As System.Nullable(Of Char)
	
	Private _Male As System.Nullable(Of Char)
	
	Private _PrescriptionNote As String
	
	Private _TIME_CREATE As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPrescripIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPrescripIDChanged()
    End Sub
    Partial Private Sub OnPatientNoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPatientNoChanged()
    End Sub
    Partial Private Sub OnDoctorNoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDoctorNoChanged()
    End Sub
    Partial Private Sub OnIssueDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnIssueDateChanged()
    End Sub
    Partial Private Sub OnDiagnosisIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDiagnosisIDChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnFemaleChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnFemaleChanged()
    End Sub
    Partial Private Sub OnMaleChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnMaleChanged()
    End Sub
    Partial Private Sub OnPrescriptionNoteChanging(value As String)
    End Sub
    Partial Private Sub OnPrescriptionNoteChanged()
    End Sub
    Partial Private Sub OnTIME_CREATEChanging(value As String)
    End Sub
    Partial Private Sub OnTIME_CREATEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_PrescripID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PrescripID() As Decimal
		Get
			Return Me._PrescripID
		End Get
		Set
			If ((Me._PrescripID = value)  _
						= false) Then
				Me.OnPrescripIDChanging(value)
				Me.SendPropertyChanging
				Me._PrescripID = value
				Me.SendPropertyChanged("PrescripID")
				Me.OnPrescripIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PatientNo", DbType:="Decimal(18,0)")>  _
	Public Property PatientNo() As System.Nullable(Of Decimal)
		Get
			Return Me._PatientNo
		End Get
		Set
			If (Me._PatientNo.Equals(value) = false) Then
				Me.OnPatientNoChanging(value)
				Me.SendPropertyChanging
				Me._PatientNo = value
				Me.SendPropertyChanged("PatientNo")
				Me.OnPatientNoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DoctorNo", DbType:="Decimal(18,0)")>  _
	Public Property DoctorNo() As System.Nullable(Of Decimal)
		Get
			Return Me._DoctorNo
		End Get
		Set
			If (Me._DoctorNo.Equals(value) = false) Then
				Me.OnDoctorNoChanging(value)
				Me.SendPropertyChanging
				Me._DoctorNo = value
				Me.SendPropertyChanged("DoctorNo")
				Me.OnDoctorNoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IssueDate", DbType:="DateTime")>  _
	Public Property IssueDate() As System.Nullable(Of Date)
		Get
			Return Me._IssueDate
		End Get
		Set
			If (Me._IssueDate.Equals(value) = false) Then
				Me.OnIssueDateChanging(value)
				Me.SendPropertyChanging
				Me._IssueDate = value
				Me.SendPropertyChanged("IssueDate")
				Me.OnIssueDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DiagnosisID", DbType:="Decimal(18,0)")>  _
	Public Property DiagnosisID() As System.Nullable(Of Decimal)
		Get
			Return Me._DiagnosisID
		End Get
		Set
			If (Me._DiagnosisID.Equals(value) = false) Then
				Me.OnDiagnosisIDChanging(value)
				Me.SendPropertyChanging
				Me._DiagnosisID = value
				Me.SendPropertyChanged("DiagnosisID")
				Me.OnDiagnosisIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Female", DbType:="Char(1)")>  _
	Public Property Female() As System.Nullable(Of Char)
		Get
			Return Me._Female
		End Get
		Set
			If (Me._Female.Equals(value) = false) Then
				Me.OnFemaleChanging(value)
				Me.SendPropertyChanging
				Me._Female = value
				Me.SendPropertyChanged("Female")
				Me.OnFemaleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Male", DbType:="Char(1)")>  _
	Public Property Male() As System.Nullable(Of Char)
		Get
			Return Me._Male
		End Get
		Set
			If (Me._Male.Equals(value) = false) Then
				Me.OnMaleChanging(value)
				Me.SendPropertyChanging
				Me._Male = value
				Me.SendPropertyChanged("Male")
				Me.OnMaleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PrescriptionNote", DbType:="NVarChar(150)")>  _
	Public Property PrescriptionNote() As String
		Get
			Return Me._PrescriptionNote
		End Get
		Set
			If (String.Equals(Me._PrescriptionNote, value) = false) Then
				Me.OnPrescriptionNoteChanging(value)
				Me.SendPropertyChanging
				Me._PrescriptionNote = value
				Me.SendPropertyChanged("PrescriptionNote")
				Me.OnPrescriptionNoteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TIME_CREATE", DbType:="NVarChar(50)")>  _
	Public Property TIME_CREATE() As String
		Get
			Return Me._TIME_CREATE
		End Get
		Set
			If (String.Equals(Me._TIME_CREATE, value) = false) Then
				Me.OnTIME_CREATEChanging(value)
				Me.SendPropertyChanging
				Me._TIME_CREATE = value
				Me.SendPropertyChanged("TIME_CREATE")
				Me.OnTIME_CREATEChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblVendorItemSupplyStatus")>  _
Partial Public Class tblVendorItemSupplyStatus
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _VendorItemSupplyStatusID As Decimal
	
	Private _VendorID As System.Nullable(Of Integer)
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _Cost As System.Nullable(Of Decimal)
	
	Private _CurrencyID As System.Nullable(Of Integer)
	
	Private _Quantity As System.Nullable(Of Decimal)
	
	Private _Sell As System.Nullable(Of Decimal)
	
	Private _Free As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnVendorItemSupplyStatusIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnVendorItemSupplyStatusIDChanged()
    End Sub
    Partial Private Sub OnVendorIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVendorIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCostChanged()
    End Sub
    Partial Private Sub OnCurrencyIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCurrencyIDChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnSellChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSellChanged()
    End Sub
    Partial Private Sub OnFreeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFreeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_VendorItemSupplyStatusID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property VendorItemSupplyStatusID() As Decimal
		Get
			Return Me._VendorItemSupplyStatusID
		End Get
		Set
			If ((Me._VendorItemSupplyStatusID = value)  _
						= false) Then
				Me.OnVendorItemSupplyStatusIDChanging(value)
				Me.SendPropertyChanging
				Me._VendorItemSupplyStatusID = value
				Me.SendPropertyChanged("VendorItemSupplyStatusID")
				Me.OnVendorItemSupplyStatusIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_VendorID", DbType:="Int")>  _
	Public Property VendorID() As System.Nullable(Of Integer)
		Get
			Return Me._VendorID
		End Get
		Set
			If (Me._VendorID.Equals(value) = false) Then
				Me.OnVendorIDChanging(value)
				Me.SendPropertyChanging
				Me._VendorID = value
				Me.SendPropertyChanged("VendorID")
				Me.OnVendorIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Cost", DbType:="Decimal(18,3)")>  _
	Public Property Cost() As System.Nullable(Of Decimal)
		Get
			Return Me._Cost
		End Get
		Set
			If (Me._Cost.Equals(value) = false) Then
				Me.OnCostChanging(value)
				Me.SendPropertyChanging
				Me._Cost = value
				Me.SendPropertyChanged("Cost")
				Me.OnCostChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CurrencyID", DbType:="Int")>  _
	Public Property CurrencyID() As System.Nullable(Of Integer)
		Get
			Return Me._CurrencyID
		End Get
		Set
			If (Me._CurrencyID.Equals(value) = false) Then
				Me.OnCurrencyIDChanging(value)
				Me.SendPropertyChanging
				Me._CurrencyID = value
				Me.SendPropertyChanged("CurrencyID")
				Me.OnCurrencyIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Quantity", DbType:="Decimal(18,0)")>  _
	Public Property Quantity() As System.Nullable(Of Decimal)
		Get
			Return Me._Quantity
		End Get
		Set
			If (Me._Quantity.Equals(value) = false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Sell", DbType:="Decimal(18,0)")>  _
	Public Property Sell() As System.Nullable(Of Decimal)
		Get
			Return Me._Sell
		End Get
		Set
			If (Me._Sell.Equals(value) = false) Then
				Me.OnSellChanging(value)
				Me.SendPropertyChanging
				Me._Sell = value
				Me.SendPropertyChanged("Sell")
				Me.OnSellChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Free", DbType:="Decimal(18,0)")>  _
	Public Property Free() As System.Nullable(Of Decimal)
		Get
			Return Me._Free
		End Get
		Set
			If (Me._Free.Equals(value) = false) Then
				Me.OnFreeChanging(value)
				Me.SendPropertyChanging
				Me._Free = value
				Me.SendPropertyChanged("Free")
				Me.OnFreeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblDepartment")>  _
Partial Public Class tblDepartment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DepartID As Integer
	
	Private _DepartName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDepartIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDepartIDChanged()
    End Sub
    Partial Private Sub OnDepartNameChanging(value As String)
    End Sub
    Partial Private Sub OnDepartNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_DepartID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DepartID() As Integer
		Get
			Return Me._DepartID
		End Get
		Set
			If ((Me._DepartID = value)  _
						= false) Then
				Me.OnDepartIDChanging(value)
				Me.SendPropertyChanging
				Me._DepartID = value
				Me.SendPropertyChanged("DepartID")
				Me.OnDepartIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DepartName", DbType:="VarChar(100)")>  _
	Public Property DepartName() As String
		Get
			Return Me._DepartName
		End Get
		Set
			If (String.Equals(Me._DepartName, value) = false) Then
				Me.OnDepartNameChanging(value)
				Me.SendPropertyChanging
				Me._DepartName = value
				Me.SendPropertyChanged("DepartName")
				Me.OnDepartNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.PARAMS_INVEN")>  _
Partial Public Class PARAMS_INVEN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Decimal
	
	Private _ParamName As String
	
	Private _Value As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Decimal)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnParamNameChanging(value As String)
    End Sub
    Partial Private Sub OnParamNameChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Decimal
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ParamName", DbType:="NVarChar(100)")>  _
	Public Property ParamName() As String
		Get
			Return Me._ParamName
		End Get
		Set
			If (String.Equals(Me._ParamName, value) = false) Then
				Me.OnParamNameChanging(value)
				Me.SendPropertyChanging
				Me._ParamName = value
				Me.SendPropertyChanged("ParamName")
				Me.OnParamNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Value", DbType:="Decimal(18,0)")>  _
	Public Property Value() As System.Nullable(Of Decimal)
		Get
			Return Me._Value
		End Get
		Set
			If (Me._Value.Equals(value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.TblReceiptNIL")>  _
Partial Public Class TblReceiptNIL
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ReceiptNILId As Decimal
	
	Private _ReceiptNILDate As System.Nullable(Of Date)
	
	Private _PatientNo As System.Nullable(Of Decimal)
	
	Private _UserID As System.Nullable(Of Decimal)
	
	Private _UserName As String
	
	Private _Glasses As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnReceiptNILIdChanging(value As Decimal)
    End Sub
    Partial Private Sub OnReceiptNILIdChanged()
    End Sub
    Partial Private Sub OnReceiptNILDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReceiptNILDateChanged()
    End Sub
    Partial Private Sub OnPatientNoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPatientNoChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnGlassesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGlassesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ReceiptNILId", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ReceiptNILId() As Decimal
		Get
			Return Me._ReceiptNILId
		End Get
		Set
			If ((Me._ReceiptNILId = value)  _
						= false) Then
				Me.OnReceiptNILIdChanging(value)
				Me.SendPropertyChanging
				Me._ReceiptNILId = value
				Me.SendPropertyChanged("ReceiptNILId")
				Me.OnReceiptNILIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceiptNILDate", DbType:="DateTime")>  _
	Public Property ReceiptNILDate() As System.Nullable(Of Date)
		Get
			Return Me._ReceiptNILDate
		End Get
		Set
			If (Me._ReceiptNILDate.Equals(value) = false) Then
				Me.OnReceiptNILDateChanging(value)
				Me.SendPropertyChanging
				Me._ReceiptNILDate = value
				Me.SendPropertyChanged("ReceiptNILDate")
				Me.OnReceiptNILDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PatientNo", DbType:="Decimal(18,0)")>  _
	Public Property PatientNo() As System.Nullable(Of Decimal)
		Get
			Return Me._PatientNo
		End Get
		Set
			If (Me._PatientNo.Equals(value) = false) Then
				Me.OnPatientNoChanging(value)
				Me.SendPropertyChanging
				Me._PatientNo = value
				Me.SendPropertyChanged("PatientNo")
				Me.OnPatientNoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserID", DbType:="Decimal(18,0)")>  _
	Public Property UserID() As System.Nullable(Of Decimal)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserName", DbType:="NVarChar(50)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Glasses", DbType:="Int")>  _
	Public Property Glasses() As System.Nullable(Of Integer)
		Get
			Return Me._Glasses
		End Get
		Set
			If (Me._Glasses.Equals(value) = false) Then
				Me.OnGlassesChanging(value)
				Me.SendPropertyChanging
				Me._Glasses = value
				Me.SendPropertyChanged("Glasses")
				Me.OnGlassesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.TblReceiptNILDetail")>  _
Partial Public Class TblReceiptNILDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ReceiptNILDId As Decimal
	
	Private _ReceiptNILId As System.Nullable(Of Decimal)
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _ItemPrice As System.Nullable(Of Double)
	
	Private _ItemQTY As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnReceiptNILDIdChanging(value As Decimal)
    End Sub
    Partial Private Sub OnReceiptNILDIdChanged()
    End Sub
    Partial Private Sub OnReceiptNILIdChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnReceiptNILIdChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnItemPriceChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnItemPriceChanged()
    End Sub
    Partial Private Sub OnItemQTYChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnItemQTYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ReceiptNILDId", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ReceiptNILDId() As Decimal
		Get
			Return Me._ReceiptNILDId
		End Get
		Set
			If ((Me._ReceiptNILDId = value)  _
						= false) Then
				Me.OnReceiptNILDIdChanging(value)
				Me.SendPropertyChanging
				Me._ReceiptNILDId = value
				Me.SendPropertyChanged("ReceiptNILDId")
				Me.OnReceiptNILDIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceiptNILId", DbType:="Decimal(18,0)")>  _
	Public Property ReceiptNILId() As System.Nullable(Of Decimal)
		Get
			Return Me._ReceiptNILId
		End Get
		Set
			If (Me._ReceiptNILId.Equals(value) = false) Then
				Me.OnReceiptNILIdChanging(value)
				Me.SendPropertyChanging
				Me._ReceiptNILId = value
				Me.SendPropertyChanged("ReceiptNILId")
				Me.OnReceiptNILIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemPrice", DbType:="Float")>  _
	Public Property ItemPrice() As System.Nullable(Of Double)
		Get
			Return Me._ItemPrice
		End Get
		Set
			If (Me._ItemPrice.Equals(value) = false) Then
				Me.OnItemPriceChanging(value)
				Me.SendPropertyChanging
				Me._ItemPrice = value
				Me.SendPropertyChanged("ItemPrice")
				Me.OnItemPriceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemQTY", DbType:="Decimal(18,0)")>  _
	Public Property ItemQTY() As System.Nullable(Of Decimal)
		Get
			Return Me._ItemQTY
		End Get
		Set
			If (Me._ItemQTY.Equals(value) = false) Then
				Me.OnItemQTYChanging(value)
				Me.SendPropertyChanging
				Me._ItemQTY = value
				Me.SendPropertyChanged("ItemQTY")
				Me.OnItemQTYChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblRequestHistoryStatusTracking")>  _
Partial Public Class tblRequestHistoryStatusTracking
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RequestHistoryID As Decimal
	
	Private _RequestID As System.Nullable(Of Decimal)
	
	Private _POStatusID As System.Nullable(Of Integer)
	
	Private _UserIDRequestUpdateStatus As System.Nullable(Of Integer)
	
	Private _UpdateRequestStatusDate As System.Nullable(Of Date)
	
	Private _Comment As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRequestHistoryIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnRequestHistoryIDChanged()
    End Sub
    Partial Private Sub OnRequestIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRequestIDChanged()
    End Sub
    Partial Private Sub OnPOStatusIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPOStatusIDChanged()
    End Sub
    Partial Private Sub OnUserIDRequestUpdateStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIDRequestUpdateStatusChanged()
    End Sub
    Partial Private Sub OnUpdateRequestStatusDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUpdateRequestStatusDateChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_RequestHistoryID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RequestHistoryID() As Decimal
		Get
			Return Me._RequestHistoryID
		End Get
		Set
			If ((Me._RequestHistoryID = value)  _
						= false) Then
				Me.OnRequestHistoryIDChanging(value)
				Me.SendPropertyChanging
				Me._RequestHistoryID = value
				Me.SendPropertyChanged("RequestHistoryID")
				Me.OnRequestHistoryIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestID", DbType:="Decimal(18,0)")>  _
	Public Property RequestID() As System.Nullable(Of Decimal)
		Get
			Return Me._RequestID
		End Get
		Set
			If (Me._RequestID.Equals(value) = false) Then
				Me.OnRequestIDChanging(value)
				Me.SendPropertyChanging
				Me._RequestID = value
				Me.SendPropertyChanged("RequestID")
				Me.OnRequestIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_POStatusID", DbType:="Int")>  _
	Public Property POStatusID() As System.Nullable(Of Integer)
		Get
			Return Me._POStatusID
		End Get
		Set
			If (Me._POStatusID.Equals(value) = false) Then
				Me.OnPOStatusIDChanging(value)
				Me.SendPropertyChanging
				Me._POStatusID = value
				Me.SendPropertyChanged("POStatusID")
				Me.OnPOStatusIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserIDRequestUpdateStatus", DbType:="Int")>  _
	Public Property UserIDRequestUpdateStatus() As System.Nullable(Of Integer)
		Get
			Return Me._UserIDRequestUpdateStatus
		End Get
		Set
			If (Me._UserIDRequestUpdateStatus.Equals(value) = false) Then
				Me.OnUserIDRequestUpdateStatusChanging(value)
				Me.SendPropertyChanging
				Me._UserIDRequestUpdateStatus = value
				Me.SendPropertyChanged("UserIDRequestUpdateStatus")
				Me.OnUserIDRequestUpdateStatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UpdateRequestStatusDate", DbType:="DateTime")>  _
	Public Property UpdateRequestStatusDate() As System.Nullable(Of Date)
		Get
			Return Me._UpdateRequestStatusDate
		End Get
		Set
			If (Me._UpdateRequestStatusDate.Equals(value) = false) Then
				Me.OnUpdateRequestStatusDateChanging(value)
				Me.SendPropertyChanging
				Me._UpdateRequestStatusDate = value
				Me.SendPropertyChanged("UpdateRequestStatusDate")
				Me.OnUpdateRequestStatusDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Comment", DbType:="NVarChar(500)")>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblRequestDetail")>  _
Partial Public Class tblRequestDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RequestDetailID As Decimal
	
	Private _RequestID As System.Nullable(Of Decimal)
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _Quantity As Integer
	
	Private _ResponseQuantity As System.Nullable(Of Long)
	
	Private _Status As System.Nullable(Of Integer)
	
	Private _IsOrginalItemReq As System.Nullable(Of Integer)
	
	Private _CurrentBalance As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRequestDetailIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnRequestDetailIDChanged()
    End Sub
    Partial Private Sub OnRequestIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRequestIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnResponseQuantityChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnResponseQuantityChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnIsOrginalItemReqChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIsOrginalItemReqChanged()
    End Sub
    Partial Private Sub OnCurrentBalanceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCurrentBalanceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_RequestDetailID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RequestDetailID() As Decimal
		Get
			Return Me._RequestDetailID
		End Get
		Set
			If ((Me._RequestDetailID = value)  _
						= false) Then
				Me.OnRequestDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._RequestDetailID = value
				Me.SendPropertyChanged("RequestDetailID")
				Me.OnRequestDetailIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestID", DbType:="Decimal(18,0)")>  _
	Public Property RequestID() As System.Nullable(Of Decimal)
		Get
			Return Me._RequestID
		End Get
		Set
			If (Me._RequestID.Equals(value) = false) Then
				Me.OnRequestIDChanging(value)
				Me.SendPropertyChanging
				Me._RequestID = value
				Me.SendPropertyChanged("RequestID")
				Me.OnRequestIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Quantity", DbType:="Int NOT NULL")>  _
	Public Property Quantity() As Integer
		Get
			Return Me._Quantity
		End Get
		Set
			If ((Me._Quantity = value)  _
						= false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ResponseQuantity", DbType:="BigInt")>  _
	Public Property ResponseQuantity() As System.Nullable(Of Long)
		Get
			Return Me._ResponseQuantity
		End Get
		Set
			If (Me._ResponseQuantity.Equals(value) = false) Then
				Me.OnResponseQuantityChanging(value)
				Me.SendPropertyChanging
				Me._ResponseQuantity = value
				Me.SendPropertyChanged("ResponseQuantity")
				Me.OnResponseQuantityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsOrginalItemReq", DbType:="Int")>  _
	Public Property IsOrginalItemReq() As System.Nullable(Of Integer)
		Get
			Return Me._IsOrginalItemReq
		End Get
		Set
			If (Me._IsOrginalItemReq.Equals(value) = false) Then
				Me.OnIsOrginalItemReqChanging(value)
				Me.SendPropertyChanging
				Me._IsOrginalItemReq = value
				Me.SendPropertyChanged("IsOrginalItemReq")
				Me.OnIsOrginalItemReqChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CurrentBalance", DbType:="Decimal(18,0)")>  _
	Public Property CurrentBalance() As System.Nullable(Of Decimal)
		Get
			Return Me._CurrentBalance
		End Get
		Set
			If (Me._CurrentBalance.Equals(value) = false) Then
				Me.OnCurrentBalanceChanging(value)
				Me.SendPropertyChanging
				Me._CurrentBalance = value
				Me.SendPropertyChanged("CurrentBalance")
				Me.OnCurrentBalanceChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblRequest")>  _
Partial Public Class tblRequest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RequestID As Decimal
	
	Private _RequestOrderNumber As String
	
	Private _RequestFromDepartID As System.Nullable(Of Integer)
	
	Private _RequestDate As System.Nullable(Of Date)
	
	Private _RequestDescription As String
	
	Private _RequestToDepartID As System.Nullable(Of Integer)
	
	Private _UserID As System.Nullable(Of Integer)
	
	Private _UserRequestName As String
	
	Private _UserApproveName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRequestIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnRequestIDChanged()
    End Sub
    Partial Private Sub OnRequestOrderNumberChanging(value As String)
    End Sub
    Partial Private Sub OnRequestOrderNumberChanged()
    End Sub
    Partial Private Sub OnRequestFromDepartIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRequestFromDepartIDChanged()
    End Sub
    Partial Private Sub OnRequestDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRequestDateChanged()
    End Sub
    Partial Private Sub OnRequestDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnRequestDescriptionChanged()
    End Sub
    Partial Private Sub OnRequestToDepartIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRequestToDepartIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnUserRequestNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserRequestNameChanged()
    End Sub
    Partial Private Sub OnUserApproveNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserApproveNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_RequestID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RequestID() As Decimal
		Get
			Return Me._RequestID
		End Get
		Set
			If ((Me._RequestID = value)  _
						= false) Then
				Me.OnRequestIDChanging(value)
				Me.SendPropertyChanging
				Me._RequestID = value
				Me.SendPropertyChanged("RequestID")
				Me.OnRequestIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestOrderNumber", DbType:="NVarChar(50)")>  _
	Public Property RequestOrderNumber() As String
		Get
			Return Me._RequestOrderNumber
		End Get
		Set
			If (String.Equals(Me._RequestOrderNumber, value) = false) Then
				Me.OnRequestOrderNumberChanging(value)
				Me.SendPropertyChanging
				Me._RequestOrderNumber = value
				Me.SendPropertyChanged("RequestOrderNumber")
				Me.OnRequestOrderNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestFromDepartID", DbType:="Int")>  _
	Public Property RequestFromDepartID() As System.Nullable(Of Integer)
		Get
			Return Me._RequestFromDepartID
		End Get
		Set
			If (Me._RequestFromDepartID.Equals(value) = false) Then
				Me.OnRequestFromDepartIDChanging(value)
				Me.SendPropertyChanging
				Me._RequestFromDepartID = value
				Me.SendPropertyChanged("RequestFromDepartID")
				Me.OnRequestFromDepartIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestDate", DbType:="DateTime")>  _
	Public Property RequestDate() As System.Nullable(Of Date)
		Get
			Return Me._RequestDate
		End Get
		Set
			If (Me._RequestDate.Equals(value) = false) Then
				Me.OnRequestDateChanging(value)
				Me.SendPropertyChanging
				Me._RequestDate = value
				Me.SendPropertyChanged("RequestDate")
				Me.OnRequestDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestDescription", DbType:="NVarChar(250)")>  _
	Public Property RequestDescription() As String
		Get
			Return Me._RequestDescription
		End Get
		Set
			If (String.Equals(Me._RequestDescription, value) = false) Then
				Me.OnRequestDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._RequestDescription = value
				Me.SendPropertyChanged("RequestDescription")
				Me.OnRequestDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestToDepartID", DbType:="Int")>  _
	Public Property RequestToDepartID() As System.Nullable(Of Integer)
		Get
			Return Me._RequestToDepartID
		End Get
		Set
			If (Me._RequestToDepartID.Equals(value) = false) Then
				Me.OnRequestToDepartIDChanging(value)
				Me.SendPropertyChanging
				Me._RequestToDepartID = value
				Me.SendPropertyChanged("RequestToDepartID")
				Me.OnRequestToDepartIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserID", DbType:="Int")>  _
	Public Property UserID() As System.Nullable(Of Integer)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserRequestName", DbType:="NVarChar(100)")>  _
	Public Property UserRequestName() As String
		Get
			Return Me._UserRequestName
		End Get
		Set
			If (String.Equals(Me._UserRequestName, value) = false) Then
				Me.OnUserRequestNameChanging(value)
				Me.SendPropertyChanging
				Me._UserRequestName = value
				Me.SendPropertyChanged("UserRequestName")
				Me.OnUserRequestNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserApproveName", DbType:="NVarChar(100)")>  _
	Public Property UserApproveName() As String
		Get
			Return Me._UserApproveName
		End Get
		Set
			If (String.Equals(Me._UserApproveName, value) = false) Then
				Me.OnUserApproveNameChanging(value)
				Me.SendPropertyChanging
				Me._UserApproveName = value
				Me.SendPropertyChanged("UserApproveName")
				Me.OnUserApproveNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblTempUsedItem")>  _
Partial Public Class tblTempUsedItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Used As System.Nullable(Of Decimal)
	
	Private _ItemID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUsedChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUsedChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Used", DbType:="Decimal(18,2)")>  _
	Public Property Used() As System.Nullable(Of Decimal)
		Get
			Return Me._Used
		End Get
		Set
			If (Me._Used.Equals(value) = false) Then
				Me.OnUsedChanging(value)
				Me.SendPropertyChanging
				Me._Used = value
				Me.SendPropertyChanged("Used")
				Me.OnUsedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.VAllUsedItem")>  _
Partial Public Class VAllUsedItem
	
	Private _Used As System.Nullable(Of Decimal)
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _RunEndOfDayDate As System.Nullable(Of Date)
	
	Private _DepartID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_Used", DbType:="Decimal(38,0)")>  _
	Public Property Used() As System.Nullable(Of Decimal)
		Get
			Return Me._Used
		End Get
		Set
			If (Me._Used.Equals(value) = false) Then
				Me._Used = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me._ItemID = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_RunEndOfDayDate", DbType:="DateTime")>  _
	Public Property RunEndOfDayDate() As System.Nullable(Of Date)
		Get
			Return Me._RunEndOfDayDate
		End Get
		Set
			If (Me._RunEndOfDayDate.Equals(value) = false) Then
				Me._RunEndOfDayDate = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_DepartID", DbType:="Int")>  _
	Public Property DepartID() As System.Nullable(Of Integer)
		Get
			Return Me._DepartID
		End Get
		Set
			If (Me._DepartID.Equals(value) = false) Then
				Me._DepartID = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.tblTempBeginBalance")>  _
Partial Public Class tblTempBeginBalance
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _BeginBalance As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnBeginBalanceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBeginBalanceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BeginBalance", DbType:="Decimal(18,2)")>  _
	Public Property BeginBalance() As System.Nullable(Of Decimal)
		Get
			Return Me._BeginBalance
		End Get
		Set
			If (Me._BeginBalance.Equals(value) = false) Then
				Me.OnBeginBalanceChanging(value)
				Me.SendPropertyChanging
				Me._BeginBalance = value
				Me.SendPropertyChanged("BeginBalance")
				Me.OnBeginBalanceChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblItemExpireControl")>  _
Partial Public Class tblItemExpireControl
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ItemExpireContID As Decimal
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _ItemExpireDate As System.Nullable(Of Date)
	
	Private _Quantity As System.Nullable(Of Integer)
	
	Private _RequestDetailID As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnItemExpireContIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnItemExpireContIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnItemExpireDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnItemExpireDateChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnRequestDetailIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRequestDetailIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ItemExpireContID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ItemExpireContID() As Decimal
		Get
			Return Me._ItemExpireContID
		End Get
		Set
			If ((Me._ItemExpireContID = value)  _
						= false) Then
				Me.OnItemExpireContIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemExpireContID = value
				Me.SendPropertyChanged("ItemExpireContID")
				Me.OnItemExpireContIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemExpireDate", DbType:="DateTime")>  _
	Public Property ItemExpireDate() As System.Nullable(Of Date)
		Get
			Return Me._ItemExpireDate
		End Get
		Set
			If (Me._ItemExpireDate.Equals(value) = false) Then
				Me.OnItemExpireDateChanging(value)
				Me.SendPropertyChanging
				Me._ItemExpireDate = value
				Me.SendPropertyChanged("ItemExpireDate")
				Me.OnItemExpireDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Quantity", DbType:="Int")>  _
	Public Property Quantity() As System.Nullable(Of Integer)
		Get
			Return Me._Quantity
		End Get
		Set
			If (Me._Quantity.Equals(value) = false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestDetailID", DbType:="Decimal(18,0)")>  _
	Public Property RequestDetailID() As System.Nullable(Of Decimal)
		Get
			Return Me._RequestDetailID
		End Get
		Set
			If (Me._RequestDetailID.Equals(value) = false) Then
				Me.OnRequestDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._RequestDetailID = value
				Me.SendPropertyChanged("RequestDetailID")
				Me.OnRequestDetailIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.CARITAS_REQ_ITEM_PROVIDER_INFO")>  _
Partial Public Class CARITAS_REQ_ITEM_PROVIDER_INFO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProviderInfoID As Decimal
	
	Private _RequestDetailID As System.Nullable(Of Decimal)
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _ProviderID As System.Nullable(Of Integer)
	
	Private _GivenQty As System.Nullable(Of Decimal)
	
	Private _Cost As System.Nullable(Of Decimal)
	
	Private _CostInUSD As System.Nullable(Of Decimal)
	
	Private _CurrencyID As System.Nullable(Of Integer)
	
	Private _TotalCost As System.Nullable(Of Decimal)
	
	Private _ExpiredDateRecItem As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProviderInfoIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnProviderInfoIDChanged()
    End Sub
    Partial Private Sub OnRequestDetailIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRequestDetailIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnProviderIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProviderIDChanged()
    End Sub
    Partial Private Sub OnGivenQtyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnGivenQtyChanged()
    End Sub
    Partial Private Sub OnCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCostChanged()
    End Sub
    Partial Private Sub OnCostInUSDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCostInUSDChanged()
    End Sub
    Partial Private Sub OnCurrencyIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCurrencyIDChanged()
    End Sub
    Partial Private Sub OnTotalCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalCostChanged()
    End Sub
    Partial Private Sub OnExpiredDateRecItemChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnExpiredDateRecItemChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ProviderInfoID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProviderInfoID() As Decimal
		Get
			Return Me._ProviderInfoID
		End Get
		Set
			If ((Me._ProviderInfoID = value)  _
						= false) Then
				Me.OnProviderInfoIDChanging(value)
				Me.SendPropertyChanging
				Me._ProviderInfoID = value
				Me.SendPropertyChanged("ProviderInfoID")
				Me.OnProviderInfoIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestDetailID", DbType:="Decimal(18,0)")>  _
	Public Property RequestDetailID() As System.Nullable(Of Decimal)
		Get
			Return Me._RequestDetailID
		End Get
		Set
			If (Me._RequestDetailID.Equals(value) = false) Then
				Me.OnRequestDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._RequestDetailID = value
				Me.SendPropertyChanged("RequestDetailID")
				Me.OnRequestDetailIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProviderID", DbType:="Int")>  _
	Public Property ProviderID() As System.Nullable(Of Integer)
		Get
			Return Me._ProviderID
		End Get
		Set
			If (Me._ProviderID.Equals(value) = false) Then
				Me.OnProviderIDChanging(value)
				Me.SendPropertyChanging
				Me._ProviderID = value
				Me.SendPropertyChanged("ProviderID")
				Me.OnProviderIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_GivenQty", DbType:="Decimal(18,0)")>  _
	Public Property GivenQty() As System.Nullable(Of Decimal)
		Get
			Return Me._GivenQty
		End Get
		Set
			If (Me._GivenQty.Equals(value) = false) Then
				Me.OnGivenQtyChanging(value)
				Me.SendPropertyChanging
				Me._GivenQty = value
				Me.SendPropertyChanged("GivenQty")
				Me.OnGivenQtyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Cost", DbType:="Decimal(18,3)")>  _
	Public Property Cost() As System.Nullable(Of Decimal)
		Get
			Return Me._Cost
		End Get
		Set
			If (Me._Cost.Equals(value) = false) Then
				Me.OnCostChanging(value)
				Me.SendPropertyChanging
				Me._Cost = value
				Me.SendPropertyChanged("Cost")
				Me.OnCostChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CostInUSD", DbType:="Decimal(18,3)")>  _
	Public Property CostInUSD() As System.Nullable(Of Decimal)
		Get
			Return Me._CostInUSD
		End Get
		Set
			If (Me._CostInUSD.Equals(value) = false) Then
				Me.OnCostInUSDChanging(value)
				Me.SendPropertyChanging
				Me._CostInUSD = value
				Me.SendPropertyChanged("CostInUSD")
				Me.OnCostInUSDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CurrencyID", DbType:="Int")>  _
	Public Property CurrencyID() As System.Nullable(Of Integer)
		Get
			Return Me._CurrencyID
		End Get
		Set
			If (Me._CurrencyID.Equals(value) = false) Then
				Me.OnCurrencyIDChanging(value)
				Me.SendPropertyChanging
				Me._CurrencyID = value
				Me.SendPropertyChanged("CurrencyID")
				Me.OnCurrencyIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TotalCost", DbType:="Decimal(18,3)")>  _
	Public Property TotalCost() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalCost
		End Get
		Set
			If (Me._TotalCost.Equals(value) = false) Then
				Me.OnTotalCostChanging(value)
				Me.SendPropertyChanging
				Me._TotalCost = value
				Me.SendPropertyChanged("TotalCost")
				Me.OnTotalCostChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ExpiredDateRecItem", DbType:="DateTime")>  _
	Public Property ExpiredDateRecItem() As System.Nullable(Of Date)
		Get
			Return Me._ExpiredDateRecItem
		End Get
		Set
			If (Me._ExpiredDateRecItem.Equals(value) = false) Then
				Me.OnExpiredDateRecItemChanging(value)
				Me.SendPropertyChanging
				Me._ExpiredDateRecItem = value
				Me.SendPropertyChanged("ExpiredDateRecItem")
				Me.OnExpiredDateRecItemChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.PRESCRIP_DETAIL_INVENTORY")>  _
Partial Public Class PRESCRIP_DETAIL_INVENTORY
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PrescripDetailID As Decimal
	
	Private _PrescripID As System.Nullable(Of Decimal)
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _ItemName As String
	
	Private _IsOutsideMedicine As System.Nullable(Of Integer)
	
	Private _ItemUnitID As System.Nullable(Of Integer)
	
	Private _ItemQuantity As System.Nullable(Of Decimal)
	
	Private _Remark As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPrescripDetailIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPrescripDetailIDChanged()
    End Sub
    Partial Private Sub OnPrescripIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPrescripIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnItemNameChanging(value As String)
    End Sub
    Partial Private Sub OnItemNameChanged()
    End Sub
    Partial Private Sub OnIsOutsideMedicineChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIsOutsideMedicineChanged()
    End Sub
    Partial Private Sub OnItemUnitIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemUnitIDChanged()
    End Sub
    Partial Private Sub OnItemQuantityChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnItemQuantityChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_PrescripDetailID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PrescripDetailID() As Decimal
		Get
			Return Me._PrescripDetailID
		End Get
		Set
			If ((Me._PrescripDetailID = value)  _
						= false) Then
				Me.OnPrescripDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._PrescripDetailID = value
				Me.SendPropertyChanged("PrescripDetailID")
				Me.OnPrescripDetailIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PrescripID", DbType:="Decimal(18,0)")>  _
	Public Property PrescripID() As System.Nullable(Of Decimal)
		Get
			Return Me._PrescripID
		End Get
		Set
			If (Me._PrescripID.Equals(value) = false) Then
				Me.OnPrescripIDChanging(value)
				Me.SendPropertyChanging
				Me._PrescripID = value
				Me.SendPropertyChanged("PrescripID")
				Me.OnPrescripIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemName", DbType:="NVarChar(150)")>  _
	Public Property ItemName() As String
		Get
			Return Me._ItemName
		End Get
		Set
			If (String.Equals(Me._ItemName, value) = false) Then
				Me.OnItemNameChanging(value)
				Me.SendPropertyChanging
				Me._ItemName = value
				Me.SendPropertyChanged("ItemName")
				Me.OnItemNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsOutsideMedicine", DbType:="Int")>  _
	Public Property IsOutsideMedicine() As System.Nullable(Of Integer)
		Get
			Return Me._IsOutsideMedicine
		End Get
		Set
			If (Me._IsOutsideMedicine.Equals(value) = false) Then
				Me.OnIsOutsideMedicineChanging(value)
				Me.SendPropertyChanging
				Me._IsOutsideMedicine = value
				Me.SendPropertyChanged("IsOutsideMedicine")
				Me.OnIsOutsideMedicineChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemUnitID", DbType:="Int")>  _
	Public Property ItemUnitID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemUnitID
		End Get
		Set
			If (Me._ItemUnitID.Equals(value) = false) Then
				Me.OnItemUnitIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemUnitID = value
				Me.SendPropertyChanged("ItemUnitID")
				Me.OnItemUnitIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemQuantity", DbType:="Decimal(18,0)")>  _
	Public Property ItemQuantity() As System.Nullable(Of Decimal)
		Get
			Return Me._ItemQuantity
		End Get
		Set
			If (Me._ItemQuantity.Equals(value) = false) Then
				Me.OnItemQuantityChanging(value)
				Me.SendPropertyChanging
				Me._ItemQuantity = value
				Me.SendPropertyChanged("ItemQuantity")
				Me.OnItemQuantityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Remark", DbType:="NVarChar(150)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblTempRequestAllItem")>  _
Partial Public Class tblTempRequestAllItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _ItemID As Integer
	
	Private _Request As System.Nullable(Of Decimal)
	
	Private _RequestDate As System.Nullable(Of Date)
	
	Private _ReceivedDate As System.Nullable(Of Date)
	
	Private _Received As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnRequestChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRequestChanged()
    End Sub
    Partial Private Sub OnRequestDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRequestDateChanged()
    End Sub
    Partial Private Sub OnReceivedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReceivedDateChanged()
    End Sub
    Partial Private Sub OnReceivedChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnReceivedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int NOT NULL")>  _
	Public Property ItemID() As Integer
		Get
			Return Me._ItemID
		End Get
		Set
			If ((Me._ItemID = value)  _
						= false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Request", DbType:="Decimal(18,2)")>  _
	Public Property Request() As System.Nullable(Of Decimal)
		Get
			Return Me._Request
		End Get
		Set
			If (Me._Request.Equals(value) = false) Then
				Me.OnRequestChanging(value)
				Me.SendPropertyChanging
				Me._Request = value
				Me.SendPropertyChanged("Request")
				Me.OnRequestChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestDate", DbType:="DateTime")>  _
	Public Property RequestDate() As System.Nullable(Of Date)
		Get
			Return Me._RequestDate
		End Get
		Set
			If (Me._RequestDate.Equals(value) = false) Then
				Me.OnRequestDateChanging(value)
				Me.SendPropertyChanging
				Me._RequestDate = value
				Me.SendPropertyChanged("RequestDate")
				Me.OnRequestDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceivedDate", DbType:="DateTime")>  _
	Public Property ReceivedDate() As System.Nullable(Of Date)
		Get
			Return Me._ReceivedDate
		End Get
		Set
			If (Me._ReceivedDate.Equals(value) = false) Then
				Me.OnReceivedDateChanging(value)
				Me.SendPropertyChanging
				Me._ReceivedDate = value
				Me.SendPropertyChanged("ReceivedDate")
				Me.OnReceivedDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Received", DbType:="Decimal(18,0)")>  _
	Public Property Received() As System.Nullable(Of Decimal)
		Get
			Return Me._Received
		End Get
		Set
			If (Me._Received.Equals(value) = false) Then
				Me.OnReceivedChanging(value)
				Me.SendPropertyChanging
				Me._Received = value
				Me.SendPropertyChanged("Received")
				Me.OnReceivedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.VAllRequestItem")>  _
Partial Public Class VAllRequestItem
	
	Private _CateName As String
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _ItemName As String
	
	Private _Barcode As String
	
	Private _Request As System.Nullable(Of Integer)
	
	Private _RequestDate As System.Nullable(Of Date)
	
	Private _UnitPrice As System.Nullable(Of Decimal)
	
	Private _ReceivedQuantity As System.Nullable(Of Integer)
	
	Private _RequestDetailID As Decimal
	
	Private _RequestID As System.Nullable(Of Decimal)
	
	Private _ReceivedDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_CateName", DbType:="NVarChar(150)")>  _
	Public Property CateName() As String
		Get
			Return Me._CateName
		End Get
		Set
			If (String.Equals(Me._CateName, value) = false) Then
				Me._CateName = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me._ItemID = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemName", DbType:="NVarChar(150)")>  _
	Public Property ItemName() As String
		Get
			Return Me._ItemName
		End Get
		Set
			If (String.Equals(Me._ItemName, value) = false) Then
				Me._ItemName = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Barcode", DbType:="NVarChar(50)")>  _
	Public Property Barcode() As String
		Get
			Return Me._Barcode
		End Get
		Set
			If (String.Equals(Me._Barcode, value) = false) Then
				Me._Barcode = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Request", DbType:="Int")>  _
	Public Property Request() As System.Nullable(Of Integer)
		Get
			Return Me._Request
		End Get
		Set
			If (Me._Request.Equals(value) = false) Then
				Me._Request = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestDate", DbType:="DateTime")>  _
	Public Property RequestDate() As System.Nullable(Of Date)
		Get
			Return Me._RequestDate
		End Get
		Set
			If (Me._RequestDate.Equals(value) = false) Then
				Me._RequestDate = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_UnitPrice", DbType:="Decimal(18,2)")>  _
	Public Property UnitPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._UnitPrice
		End Get
		Set
			If (Me._UnitPrice.Equals(value) = false) Then
				Me._UnitPrice = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceivedQuantity", DbType:="Int")>  _
	Public Property ReceivedQuantity() As System.Nullable(Of Integer)
		Get
			Return Me._ReceivedQuantity
		End Get
		Set
			If (Me._ReceivedQuantity.Equals(value) = false) Then
				Me._ReceivedQuantity = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestDetailID", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property RequestDetailID() As Decimal
		Get
			Return Me._RequestDetailID
		End Get
		Set
			If ((Me._RequestDetailID = value)  _
						= false) Then
				Me._RequestDetailID = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestID", DbType:="Decimal(18,0)")>  _
	Public Property RequestID() As System.Nullable(Of Decimal)
		Get
			Return Me._RequestID
		End Get
		Set
			If (Me._RequestID.Equals(value) = false) Then
				Me._RequestID = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceivedDate", DbType:="DateTime")>  _
	Public Property ReceivedDate() As System.Nullable(Of Date)
		Get
			Return Me._ReceivedDate
		End Get
		Set
			If (Me._ReceivedDate.Equals(value) = false) Then
				Me._ReceivedDate = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.VAllBeginBalance")>  _
Partial Public Class VAllBeginBalance
	
	Private _RunEndOfDayDate As System.Nullable(Of Date)
	
	Private _BeginBalance As System.Nullable(Of Decimal)
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _DepartID As System.Nullable(Of Integer)
	
	Private _EndBalance As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_RunEndOfDayDate", DbType:="DateTime")>  _
	Public Property RunEndOfDayDate() As System.Nullable(Of Date)
		Get
			Return Me._RunEndOfDayDate
		End Get
		Set
			If (Me._RunEndOfDayDate.Equals(value) = false) Then
				Me._RunEndOfDayDate = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_BeginBalance", DbType:="Decimal(18,0)")>  _
	Public Property BeginBalance() As System.Nullable(Of Decimal)
		Get
			Return Me._BeginBalance
		End Get
		Set
			If (Me._BeginBalance.Equals(value) = false) Then
				Me._BeginBalance = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me._ItemID = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_DepartID", DbType:="Int")>  _
	Public Property DepartID() As System.Nullable(Of Integer)
		Get
			Return Me._DepartID
		End Get
		Set
			If (Me._DepartID.Equals(value) = false) Then
				Me._DepartID = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_EndBalance", DbType:="Decimal(18,0)")>  _
	Public Property EndBalance() As System.Nullable(Of Decimal)
		Get
			Return Me._EndBalance
		End Get
		Set
			If (Me._EndBalance.Equals(value) = false) Then
				Me._EndBalance = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.tblEndofDayRun")>  _
Partial Public Class tblEndofDayRun
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RunEndOfDayID As Decimal
	
	Private _RunEndOfDayDate As System.Nullable(Of Date)
	
	Private _DepartID As System.Nullable(Of Integer)
	
	Private _UserIDProcessRunEndOfDay As System.Nullable(Of Integer)
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _RequestQty As System.Nullable(Of Decimal)
	
	Private _ReceivedQty As System.Nullable(Of Decimal)
	
	Private _UseQty As System.Nullable(Of Decimal)
	
	Private _BeginBalance As System.Nullable(Of Decimal)
	
	Private _EndBalance As System.Nullable(Of Decimal)
	
	Private _AdjustQTY As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRunEndOfDayIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnRunEndOfDayIDChanged()
    End Sub
    Partial Private Sub OnRunEndOfDayDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRunEndOfDayDateChanged()
    End Sub
    Partial Private Sub OnDepartIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDepartIDChanged()
    End Sub
    Partial Private Sub OnUserIDProcessRunEndOfDayChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIDProcessRunEndOfDayChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnRequestQtyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRequestQtyChanged()
    End Sub
    Partial Private Sub OnReceivedQtyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnReceivedQtyChanged()
    End Sub
    Partial Private Sub OnUseQtyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUseQtyChanged()
    End Sub
    Partial Private Sub OnBeginBalanceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBeginBalanceChanged()
    End Sub
    Partial Private Sub OnEndBalanceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnEndBalanceChanged()
    End Sub
    Partial Private Sub OnAdjustQTYChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAdjustQTYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_RunEndOfDayID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RunEndOfDayID() As Decimal
		Get
			Return Me._RunEndOfDayID
		End Get
		Set
			If ((Me._RunEndOfDayID = value)  _
						= false) Then
				Me.OnRunEndOfDayIDChanging(value)
				Me.SendPropertyChanging
				Me._RunEndOfDayID = value
				Me.SendPropertyChanged("RunEndOfDayID")
				Me.OnRunEndOfDayIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RunEndOfDayDate", DbType:="DateTime")>  _
	Public Property RunEndOfDayDate() As System.Nullable(Of Date)
		Get
			Return Me._RunEndOfDayDate
		End Get
		Set
			If (Me._RunEndOfDayDate.Equals(value) = false) Then
				Me.OnRunEndOfDayDateChanging(value)
				Me.SendPropertyChanging
				Me._RunEndOfDayDate = value
				Me.SendPropertyChanged("RunEndOfDayDate")
				Me.OnRunEndOfDayDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DepartID", DbType:="Int")>  _
	Public Property DepartID() As System.Nullable(Of Integer)
		Get
			Return Me._DepartID
		End Get
		Set
			If (Me._DepartID.Equals(value) = false) Then
				Me.OnDepartIDChanging(value)
				Me.SendPropertyChanging
				Me._DepartID = value
				Me.SendPropertyChanged("DepartID")
				Me.OnDepartIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserIDProcessRunEndOfDay", DbType:="Int")>  _
	Public Property UserIDProcessRunEndOfDay() As System.Nullable(Of Integer)
		Get
			Return Me._UserIDProcessRunEndOfDay
		End Get
		Set
			If (Me._UserIDProcessRunEndOfDay.Equals(value) = false) Then
				Me.OnUserIDProcessRunEndOfDayChanging(value)
				Me.SendPropertyChanging
				Me._UserIDProcessRunEndOfDay = value
				Me.SendPropertyChanged("UserIDProcessRunEndOfDay")
				Me.OnUserIDProcessRunEndOfDayChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestQty", DbType:="Decimal(18,0)")>  _
	Public Property RequestQty() As System.Nullable(Of Decimal)
		Get
			Return Me._RequestQty
		End Get
		Set
			If (Me._RequestQty.Equals(value) = false) Then
				Me.OnRequestQtyChanging(value)
				Me.SendPropertyChanging
				Me._RequestQty = value
				Me.SendPropertyChanged("RequestQty")
				Me.OnRequestQtyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceivedQty", DbType:="Decimal(18,0)")>  _
	Public Property ReceivedQty() As System.Nullable(Of Decimal)
		Get
			Return Me._ReceivedQty
		End Get
		Set
			If (Me._ReceivedQty.Equals(value) = false) Then
				Me.OnReceivedQtyChanging(value)
				Me.SendPropertyChanging
				Me._ReceivedQty = value
				Me.SendPropertyChanged("ReceivedQty")
				Me.OnReceivedQtyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UseQty", DbType:="Decimal(18,0)")>  _
	Public Property UseQty() As System.Nullable(Of Decimal)
		Get
			Return Me._UseQty
		End Get
		Set
			If (Me._UseQty.Equals(value) = false) Then
				Me.OnUseQtyChanging(value)
				Me.SendPropertyChanging
				Me._UseQty = value
				Me.SendPropertyChanged("UseQty")
				Me.OnUseQtyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BeginBalance", DbType:="Decimal(18,0)")>  _
	Public Property BeginBalance() As System.Nullable(Of Decimal)
		Get
			Return Me._BeginBalance
		End Get
		Set
			If (Me._BeginBalance.Equals(value) = false) Then
				Me.OnBeginBalanceChanging(value)
				Me.SendPropertyChanging
				Me._BeginBalance = value
				Me.SendPropertyChanged("BeginBalance")
				Me.OnBeginBalanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EndBalance", DbType:="Decimal(18,0)")>  _
	Public Property EndBalance() As System.Nullable(Of Decimal)
		Get
			Return Me._EndBalance
		End Get
		Set
			If (Me._EndBalance.Equals(value) = false) Then
				Me.OnEndBalanceChanging(value)
				Me.SendPropertyChanging
				Me._EndBalance = value
				Me.SendPropertyChanged("EndBalance")
				Me.OnEndBalanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AdjustQTY", DbType:="Decimal(18,0)")>  _
	Public Property AdjustQTY() As System.Nullable(Of Decimal)
		Get
			Return Me._AdjustQTY
		End Get
		Set
			If (Me._AdjustQTY.Equals(value) = false) Then
				Me.OnAdjustQTYChanging(value)
				Me.SendPropertyChanging
				Me._AdjustQTY = value
				Me.SendPropertyChanged("AdjustQTY")
				Me.OnAdjustQTYChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.CARITAS_REQUEST_INVENTORY")>  _
Partial Public Class CARITAS_REQUEST_INVENTORY
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RequestID As Decimal
	
	Private _RequestOrderNumber As String
	
	Private _RequestDate As System.Nullable(Of Date)
	
	Private _ItemUsedFrom As System.Nullable(Of Date)
	
	Private _ItemUsedTo As System.Nullable(Of Date)
	
	Private _Comment As String
	
	Private _IsRequestExistingItem As System.Nullable(Of Boolean)
	
	Private _UserID As System.Nullable(Of Integer)
	
	Private _Status As System.Nullable(Of Integer)
	
	Private _ReceivedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRequestIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnRequestIDChanged()
    End Sub
    Partial Private Sub OnRequestOrderNumberChanging(value As String)
    End Sub
    Partial Private Sub OnRequestOrderNumberChanged()
    End Sub
    Partial Private Sub OnRequestDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRequestDateChanged()
    End Sub
    Partial Private Sub OnItemUsedFromChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnItemUsedFromChanged()
    End Sub
    Partial Private Sub OnItemUsedToChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnItemUsedToChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnIsRequestExistingItemChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsRequestExistingItemChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnReceivedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReceivedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_RequestID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RequestID() As Decimal
		Get
			Return Me._RequestID
		End Get
		Set
			If ((Me._RequestID = value)  _
						= false) Then
				Me.OnRequestIDChanging(value)
				Me.SendPropertyChanging
				Me._RequestID = value
				Me.SendPropertyChanged("RequestID")
				Me.OnRequestIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestOrderNumber", DbType:="NVarChar(50)")>  _
	Public Property RequestOrderNumber() As String
		Get
			Return Me._RequestOrderNumber
		End Get
		Set
			If (String.Equals(Me._RequestOrderNumber, value) = false) Then
				Me.OnRequestOrderNumberChanging(value)
				Me.SendPropertyChanging
				Me._RequestOrderNumber = value
				Me.SendPropertyChanged("RequestOrderNumber")
				Me.OnRequestOrderNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestDate", DbType:="DateTime")>  _
	Public Property RequestDate() As System.Nullable(Of Date)
		Get
			Return Me._RequestDate
		End Get
		Set
			If (Me._RequestDate.Equals(value) = false) Then
				Me.OnRequestDateChanging(value)
				Me.SendPropertyChanging
				Me._RequestDate = value
				Me.SendPropertyChanged("RequestDate")
				Me.OnRequestDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemUsedFrom", DbType:="DateTime")>  _
	Public Property ItemUsedFrom() As System.Nullable(Of Date)
		Get
			Return Me._ItemUsedFrom
		End Get
		Set
			If (Me._ItemUsedFrom.Equals(value) = false) Then
				Me.OnItemUsedFromChanging(value)
				Me.SendPropertyChanging
				Me._ItemUsedFrom = value
				Me.SendPropertyChanged("ItemUsedFrom")
				Me.OnItemUsedFromChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemUsedTo", DbType:="DateTime")>  _
	Public Property ItemUsedTo() As System.Nullable(Of Date)
		Get
			Return Me._ItemUsedTo
		End Get
		Set
			If (Me._ItemUsedTo.Equals(value) = false) Then
				Me.OnItemUsedToChanging(value)
				Me.SendPropertyChanging
				Me._ItemUsedTo = value
				Me.SendPropertyChanged("ItemUsedTo")
				Me.OnItemUsedToChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Comment", DbType:="NVarChar(250)")>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsRequestExistingItem", DbType:="Bit")>  _
	Public Property IsRequestExistingItem() As System.Nullable(Of Boolean)
		Get
			Return Me._IsRequestExistingItem
		End Get
		Set
			If (Me._IsRequestExistingItem.Equals(value) = false) Then
				Me.OnIsRequestExistingItemChanging(value)
				Me.SendPropertyChanging
				Me._IsRequestExistingItem = value
				Me.SendPropertyChanged("IsRequestExistingItem")
				Me.OnIsRequestExistingItemChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserID", DbType:="Int")>  _
	Public Property UserID() As System.Nullable(Of Integer)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceivedDate", DbType:="DateTime")>  _
	Public Property ReceivedDate() As System.Nullable(Of Date)
		Get
			Return Me._ReceivedDate
		End Get
		Set
			If (Me._ReceivedDate.Equals(value) = false) Then
				Me.OnReceivedDateChanging(value)
				Me.SendPropertyChanging
				Me._ReceivedDate = value
				Me.SendPropertyChanged("ReceivedDate")
				Me.OnReceivedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.CARITAS_REQUEST_DETAIL_INVENTORY")>  _
Partial Public Class CARITAS_REQUEST_DETAIL_INVENTORY
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RequestDetailID As Decimal
	
	Private _RequestID As System.Nullable(Of Decimal)
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _PresentStock As System.Nullable(Of Integer)
	
	Private _ReceivedQuantity As System.Nullable(Of Integer)
	
	Private _ReceivedDoReport As System.Nullable(Of Integer)
	
	Private _RequestQuantity As System.Nullable(Of Integer)
	
	Private _ItemUsed As System.Nullable(Of Integer)
	
	Private _Balance As System.Nullable(Of Integer)
	
	Private _ItemName As String
	
	Private _ExpiredDate As System.Nullable(Of Date)
	
	Private _Barcode As String
	
	Private _IsReceive As System.Nullable(Of Boolean)
	
	Private _IsReady As System.Nullable(Of Boolean)
	
	Private _ReceiveDateDetail As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRequestDetailIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnRequestDetailIDChanged()
    End Sub
    Partial Private Sub OnRequestIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRequestIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnPresentStockChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPresentStockChanged()
    End Sub
    Partial Private Sub OnReceivedQuantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReceivedQuantityChanged()
    End Sub
    Partial Private Sub OnReceivedDoReportChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReceivedDoReportChanged()
    End Sub
    Partial Private Sub OnRequestQuantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRequestQuantityChanged()
    End Sub
    Partial Private Sub OnItemUsedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemUsedChanged()
    End Sub
    Partial Private Sub OnBalanceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBalanceChanged()
    End Sub
    Partial Private Sub OnItemNameChanging(value As String)
    End Sub
    Partial Private Sub OnItemNameChanged()
    End Sub
    Partial Private Sub OnExpiredDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnExpiredDateChanged()
    End Sub
    Partial Private Sub OnBarcodeChanging(value As String)
    End Sub
    Partial Private Sub OnBarcodeChanged()
    End Sub
    Partial Private Sub OnIsReceiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsReceiveChanged()
    End Sub
    Partial Private Sub OnIsReadyChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsReadyChanged()
    End Sub
    Partial Private Sub OnReceiveDateDetailChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReceiveDateDetailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_RequestDetailID", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RequestDetailID() As Decimal
		Get
			Return Me._RequestDetailID
		End Get
		Set
			If ((Me._RequestDetailID = value)  _
						= false) Then
				Me.OnRequestDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._RequestDetailID = value
				Me.SendPropertyChanged("RequestDetailID")
				Me.OnRequestDetailIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestID", DbType:="Decimal(18,0)")>  _
	Public Property RequestID() As System.Nullable(Of Decimal)
		Get
			Return Me._RequestID
		End Get
		Set
			If (Me._RequestID.Equals(value) = false) Then
				Me.OnRequestIDChanging(value)
				Me.SendPropertyChanging
				Me._RequestID = value
				Me.SendPropertyChanged("RequestID")
				Me.OnRequestIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PresentStock", DbType:="Int")>  _
	Public Property PresentStock() As System.Nullable(Of Integer)
		Get
			Return Me._PresentStock
		End Get
		Set
			If (Me._PresentStock.Equals(value) = false) Then
				Me.OnPresentStockChanging(value)
				Me.SendPropertyChanging
				Me._PresentStock = value
				Me.SendPropertyChanged("PresentStock")
				Me.OnPresentStockChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceivedQuantity", DbType:="Int")>  _
	Public Property ReceivedQuantity() As System.Nullable(Of Integer)
		Get
			Return Me._ReceivedQuantity
		End Get
		Set
			If (Me._ReceivedQuantity.Equals(value) = false) Then
				Me.OnReceivedQuantityChanging(value)
				Me.SendPropertyChanging
				Me._ReceivedQuantity = value
				Me.SendPropertyChanged("ReceivedQuantity")
				Me.OnReceivedQuantityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceivedDoReport", DbType:="Int")>  _
	Public Property ReceivedDoReport() As System.Nullable(Of Integer)
		Get
			Return Me._ReceivedDoReport
		End Get
		Set
			If (Me._ReceivedDoReport.Equals(value) = false) Then
				Me.OnReceivedDoReportChanging(value)
				Me.SendPropertyChanging
				Me._ReceivedDoReport = value
				Me.SendPropertyChanged("ReceivedDoReport")
				Me.OnReceivedDoReportChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestQuantity", DbType:="Int")>  _
	Public Property RequestQuantity() As System.Nullable(Of Integer)
		Get
			Return Me._RequestQuantity
		End Get
		Set
			If (Me._RequestQuantity.Equals(value) = false) Then
				Me.OnRequestQuantityChanging(value)
				Me.SendPropertyChanging
				Me._RequestQuantity = value
				Me.SendPropertyChanged("RequestQuantity")
				Me.OnRequestQuantityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemUsed", DbType:="Int")>  _
	Public Property ItemUsed() As System.Nullable(Of Integer)
		Get
			Return Me._ItemUsed
		End Get
		Set
			If (Me._ItemUsed.Equals(value) = false) Then
				Me.OnItemUsedChanging(value)
				Me.SendPropertyChanging
				Me._ItemUsed = value
				Me.SendPropertyChanged("ItemUsed")
				Me.OnItemUsedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Balance", DbType:="Int")>  _
	Public Property Balance() As System.Nullable(Of Integer)
		Get
			Return Me._Balance
		End Get
		Set
			If (Me._Balance.Equals(value) = false) Then
				Me.OnBalanceChanging(value)
				Me.SendPropertyChanging
				Me._Balance = value
				Me.SendPropertyChanged("Balance")
				Me.OnBalanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemName", DbType:="NVarChar(150)")>  _
	Public Property ItemName() As String
		Get
			Return Me._ItemName
		End Get
		Set
			If (String.Equals(Me._ItemName, value) = false) Then
				Me.OnItemNameChanging(value)
				Me.SendPropertyChanging
				Me._ItemName = value
				Me.SendPropertyChanged("ItemName")
				Me.OnItemNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ExpiredDate", DbType:="DateTime")>  _
	Public Property ExpiredDate() As System.Nullable(Of Date)
		Get
			Return Me._ExpiredDate
		End Get
		Set
			If (Me._ExpiredDate.Equals(value) = false) Then
				Me.OnExpiredDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpiredDate = value
				Me.SendPropertyChanged("ExpiredDate")
				Me.OnExpiredDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Barcode", DbType:="NVarChar(50)")>  _
	Public Property Barcode() As String
		Get
			Return Me._Barcode
		End Get
		Set
			If (String.Equals(Me._Barcode, value) = false) Then
				Me.OnBarcodeChanging(value)
				Me.SendPropertyChanging
				Me._Barcode = value
				Me.SendPropertyChanged("Barcode")
				Me.OnBarcodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsReceive", DbType:="Bit")>  _
	Public Property IsReceive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsReceive
		End Get
		Set
			If (Me._IsReceive.Equals(value) = false) Then
				Me.OnIsReceiveChanging(value)
				Me.SendPropertyChanging
				Me._IsReceive = value
				Me.SendPropertyChanged("IsReceive")
				Me.OnIsReceiveChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsReady", DbType:="Bit")>  _
	Public Property IsReady() As System.Nullable(Of Boolean)
		Get
			Return Me._IsReady
		End Get
		Set
			If (Me._IsReady.Equals(value) = false) Then
				Me.OnIsReadyChanging(value)
				Me.SendPropertyChanging
				Me._IsReady = value
				Me.SendPropertyChanged("IsReady")
				Me.OnIsReadyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReceiveDateDetail", DbType:="DateTime")>  _
	Public Property ReceiveDateDetail() As System.Nullable(Of Date)
		Get
			Return Me._ReceiveDateDetail
		End Get
		Set
			If (Me._ReceiveDateDetail.Equals(value) = false) Then
				Me.OnReceiveDateDetailChanging(value)
				Me.SendPropertyChanging
				Me._ReceiveDateDetail = value
				Me.SendPropertyChanged("ReceiveDateDetail")
				Me.OnReceiveDateDetailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ITEM_EXPIREDATE_DETAIL")>  _
Partial Public Class ITEM_EXPIREDATE_DETAIL
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _InventoryID As Integer
	
	Private _ItemID As System.Nullable(Of Integer)
	
	Private _UnitsInStock As System.Nullable(Of Integer)
	
	Private _UnitsOnOrder As System.Nullable(Of Integer)
	
	Private _StockAlertQty As System.Nullable(Of Decimal)
	
	Private _ExpiredAlert As System.Nullable(Of Decimal)
	
	Private _DepartID As System.Nullable(Of Decimal)
	
	Private _PROVIDER_ID As System.Nullable(Of Decimal)
	
	Private _EXPIRE_DATE As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnInventoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnInventoryIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnUnitsInStockChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUnitsInStockChanged()
    End Sub
    Partial Private Sub OnUnitsOnOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUnitsOnOrderChanged()
    End Sub
    Partial Private Sub OnStockAlertQtyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnStockAlertQtyChanged()
    End Sub
    Partial Private Sub OnExpiredAlertChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnExpiredAlertChanged()
    End Sub
    Partial Private Sub OnDepartIDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDepartIDChanged()
    End Sub
    Partial Private Sub OnPROVIDER_IDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPROVIDER_IDChanged()
    End Sub
    Partial Private Sub OnEXPIRE_DATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEXPIRE_DATEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_InventoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property InventoryID() As Integer
		Get
			Return Me._InventoryID
		End Get
		Set
			If ((Me._InventoryID = value)  _
						= false) Then
				Me.OnInventoryIDChanging(value)
				Me.SendPropertyChanging
				Me._InventoryID = value
				Me.SendPropertyChanged("InventoryID")
				Me.OnInventoryIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemID", DbType:="Int")>  _
	Public Property ItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemID
		End Get
		Set
			If (Me._ItemID.Equals(value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UnitsInStock", DbType:="Int")>  _
	Public Property UnitsInStock() As System.Nullable(Of Integer)
		Get
			Return Me._UnitsInStock
		End Get
		Set
			If (Me._UnitsInStock.Equals(value) = false) Then
				Me.OnUnitsInStockChanging(value)
				Me.SendPropertyChanging
				Me._UnitsInStock = value
				Me.SendPropertyChanged("UnitsInStock")
				Me.OnUnitsInStockChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UnitsOnOrder", DbType:="Int")>  _
	Public Property UnitsOnOrder() As System.Nullable(Of Integer)
		Get
			Return Me._UnitsOnOrder
		End Get
		Set
			If (Me._UnitsOnOrder.Equals(value) = false) Then
				Me.OnUnitsOnOrderChanging(value)
				Me.SendPropertyChanging
				Me._UnitsOnOrder = value
				Me.SendPropertyChanged("UnitsOnOrder")
				Me.OnUnitsOnOrderChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StockAlertQty", DbType:="Decimal(18,0)")>  _
	Public Property StockAlertQty() As System.Nullable(Of Decimal)
		Get
			Return Me._StockAlertQty
		End Get
		Set
			If (Me._StockAlertQty.Equals(value) = false) Then
				Me.OnStockAlertQtyChanging(value)
				Me.SendPropertyChanging
				Me._StockAlertQty = value
				Me.SendPropertyChanged("StockAlertQty")
				Me.OnStockAlertQtyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ExpiredAlert", DbType:="Decimal(18,0)")>  _
	Public Property ExpiredAlert() As System.Nullable(Of Decimal)
		Get
			Return Me._ExpiredAlert
		End Get
		Set
			If (Me._ExpiredAlert.Equals(value) = false) Then
				Me.OnExpiredAlertChanging(value)
				Me.SendPropertyChanging
				Me._ExpiredAlert = value
				Me.SendPropertyChanged("ExpiredAlert")
				Me.OnExpiredAlertChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DepartID", DbType:="Decimal(18,0)")>  _
	Public Property DepartID() As System.Nullable(Of Decimal)
		Get
			Return Me._DepartID
		End Get
		Set
			If (Me._DepartID.Equals(value) = false) Then
				Me.OnDepartIDChanging(value)
				Me.SendPropertyChanging
				Me._DepartID = value
				Me.SendPropertyChanged("DepartID")
				Me.OnDepartIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PROVIDER_ID", DbType:="Decimal(18,0)")>  _
	Public Property PROVIDER_ID() As System.Nullable(Of Decimal)
		Get
			Return Me._PROVIDER_ID
		End Get
		Set
			If (Me._PROVIDER_ID.Equals(value) = false) Then
				Me.OnPROVIDER_IDChanging(value)
				Me.SendPropertyChanging
				Me._PROVIDER_ID = value
				Me.SendPropertyChanged("PROVIDER_ID")
				Me.OnPROVIDER_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EXPIRE_DATE", DbType:="DateTime")>  _
	Public Property EXPIRE_DATE() As System.Nullable(Of Date)
		Get
			Return Me._EXPIRE_DATE
		End Get
		Set
			If (Me._EXPIRE_DATE.Equals(value) = false) Then
				Me.OnEXPIRE_DATEChanging(value)
				Me.SendPropertyChanging
				Me._EXPIRE_DATE = value
				Me.SendPropertyChanged("EXPIRE_DATE")
				Me.OnEXPIRE_DATEChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
