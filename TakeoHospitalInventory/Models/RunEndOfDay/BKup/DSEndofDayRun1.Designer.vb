'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8825
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSEndofDayRun"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSEndofDayRun
    Inherits Global.System.Data.DataSet
    
    Private tableVRunEndofDayResult As VRunEndofDayResultDataTable
    
    Private tabletblDepartment As tblDepartmentDataTable
    
    Private tableVRunEndOfPeriodMonth As VRunEndOfPeriodMonthDataTable
    
    Private tabletblEndofMonthRun As tblEndofMonthRunDataTable
    
    Private tableVRunEndofDayResultV1OPT As VRunEndofDayResultV1OPTDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VRunEndofDayResult")) Is Nothing) Then
                MyBase.Tables.Add(New VRunEndofDayResultDataTable(ds.Tables("VRunEndofDayResult")))
            End If
            If (Not (ds.Tables("tblDepartment")) Is Nothing) Then
                MyBase.Tables.Add(New tblDepartmentDataTable(ds.Tables("tblDepartment")))
            End If
            If (Not (ds.Tables("VRunEndOfPeriodMonth")) Is Nothing) Then
                MyBase.Tables.Add(New VRunEndOfPeriodMonthDataTable(ds.Tables("VRunEndOfPeriodMonth")))
            End If
            If (Not (ds.Tables("tblEndofMonthRun")) Is Nothing) Then
                MyBase.Tables.Add(New tblEndofMonthRunDataTable(ds.Tables("tblEndofMonthRun")))
            End If
            If (Not (ds.Tables("VRunEndofDayResultV1OPT")) Is Nothing) Then
                MyBase.Tables.Add(New VRunEndofDayResultV1OPTDataTable(ds.Tables("VRunEndofDayResultV1OPT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VRunEndofDayResult() As VRunEndofDayResultDataTable
        Get
            Return Me.tableVRunEndofDayResult
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblDepartment() As tblDepartmentDataTable
        Get
            Return Me.tabletblDepartment
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VRunEndOfPeriodMonth() As VRunEndOfPeriodMonthDataTable
        Get
            Return Me.tableVRunEndOfPeriodMonth
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblEndofMonthRun() As tblEndofMonthRunDataTable
        Get
            Return Me.tabletblEndofMonthRun
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VRunEndofDayResultV1OPT() As VRunEndofDayResultV1OPTDataTable
        Get
            Return Me.tableVRunEndofDayResultV1OPT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSEndofDayRun = CType(MyBase.Clone,DSEndofDayRun)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VRunEndofDayResult")) Is Nothing) Then
                MyBase.Tables.Add(New VRunEndofDayResultDataTable(ds.Tables("VRunEndofDayResult")))
            End If
            If (Not (ds.Tables("tblDepartment")) Is Nothing) Then
                MyBase.Tables.Add(New tblDepartmentDataTable(ds.Tables("tblDepartment")))
            End If
            If (Not (ds.Tables("VRunEndOfPeriodMonth")) Is Nothing) Then
                MyBase.Tables.Add(New VRunEndOfPeriodMonthDataTable(ds.Tables("VRunEndOfPeriodMonth")))
            End If
            If (Not (ds.Tables("tblEndofMonthRun")) Is Nothing) Then
                MyBase.Tables.Add(New tblEndofMonthRunDataTable(ds.Tables("tblEndofMonthRun")))
            End If
            If (Not (ds.Tables("VRunEndofDayResultV1OPT")) Is Nothing) Then
                MyBase.Tables.Add(New VRunEndofDayResultV1OPTDataTable(ds.Tables("VRunEndofDayResultV1OPT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVRunEndofDayResult = CType(MyBase.Tables("VRunEndofDayResult"),VRunEndofDayResultDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVRunEndofDayResult) Is Nothing) Then
                Me.tableVRunEndofDayResult.InitVars
            End If
        End If
        Me.tabletblDepartment = CType(MyBase.Tables("tblDepartment"),tblDepartmentDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblDepartment) Is Nothing) Then
                Me.tabletblDepartment.InitVars
            End If
        End If
        Me.tableVRunEndOfPeriodMonth = CType(MyBase.Tables("VRunEndOfPeriodMonth"),VRunEndOfPeriodMonthDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVRunEndOfPeriodMonth) Is Nothing) Then
                Me.tableVRunEndOfPeriodMonth.InitVars
            End If
        End If
        Me.tabletblEndofMonthRun = CType(MyBase.Tables("tblEndofMonthRun"),tblEndofMonthRunDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblEndofMonthRun) Is Nothing) Then
                Me.tabletblEndofMonthRun.InitVars
            End If
        End If
        Me.tableVRunEndofDayResultV1OPT = CType(MyBase.Tables("VRunEndofDayResultV1OPT"),VRunEndofDayResultV1OPTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVRunEndofDayResultV1OPT) Is Nothing) Then
                Me.tableVRunEndofDayResultV1OPT.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSEndofDayRun"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSEndofDayRun.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVRunEndofDayResult = New VRunEndofDayResultDataTable
        MyBase.Tables.Add(Me.tableVRunEndofDayResult)
        Me.tabletblDepartment = New tblDepartmentDataTable
        MyBase.Tables.Add(Me.tabletblDepartment)
        Me.tableVRunEndOfPeriodMonth = New VRunEndOfPeriodMonthDataTable
        MyBase.Tables.Add(Me.tableVRunEndOfPeriodMonth)
        Me.tabletblEndofMonthRun = New tblEndofMonthRunDataTable
        MyBase.Tables.Add(Me.tabletblEndofMonthRun)
        Me.tableVRunEndofDayResultV1OPT = New VRunEndofDayResultV1OPTDataTable
        MyBase.Tables.Add(Me.tableVRunEndofDayResultV1OPT)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVRunEndofDayResult() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblDepartment() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVRunEndOfPeriodMonth() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblEndofMonthRun() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVRunEndofDayResultV1OPT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSEndofDayRun = New DSEndofDayRun
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VRunEndofDayResultRowChangeEventHandler(ByVal sender As Object, ByVal e As VRunEndofDayResultRowChangeEvent)
    
    Public Delegate Sub tblDepartmentRowChangeEventHandler(ByVal sender As Object, ByVal e As tblDepartmentRowChangeEvent)
    
    Public Delegate Sub VRunEndOfPeriodMonthRowChangeEventHandler(ByVal sender As Object, ByVal e As VRunEndOfPeriodMonthRowChangeEvent)
    
    Public Delegate Sub tblEndofMonthRunRowChangeEventHandler(ByVal sender As Object, ByVal e As tblEndofMonthRunRowChangeEvent)
    
    Public Delegate Sub VRunEndofDayResultV1OPTRowChangeEventHandler(ByVal sender As Object, ByVal e As VRunEndofDayResultV1OPTRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VRunEndofDayResultDataTable
        Inherits Global.System.Data.TypedTableBase(Of VRunEndofDayResultRow)
        
        Private columnRunEndOfDayDate As Global.System.Data.DataColumn
        
        Private columnDepartName As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnRequestQty As Global.System.Data.DataColumn
        
        Private columnReceivedQty As Global.System.Data.DataColumn
        
        Private columnUseQty As Global.System.Data.DataColumn
        
        Private columnItemID As Global.System.Data.DataColumn
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        Private columnBeginBalance As Global.System.Data.DataColumn
        
        Private columnEndBalance As Global.System.Data.DataColumn
        
        Private columnCateID As Global.System.Data.DataColumn
        
        Private columnCateName As Global.System.Data.DataColumn
        
        Private columnDepartID As Global.System.Data.DataColumn
        
        Private columnItemUnitName As Global.System.Data.DataColumn
        
        Private columnContainerName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VRunEndofDayResult"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RunEndOfDayDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRunEndOfDayDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceivedQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceivedQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UseQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUseQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BeginBalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBeginBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndBalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CateIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCateID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CateNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCateName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemUnitNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemUnitName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContainerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContainerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VRunEndofDayResultRow
            Get
                Return CType(Me.Rows(index),VRunEndofDayResultRow)
            End Get
        End Property
        
        Public Event VRunEndofDayResultRowChanging As VRunEndofDayResultRowChangeEventHandler
        
        Public Event VRunEndofDayResultRowChanged As VRunEndofDayResultRowChangeEventHandler
        
        Public Event VRunEndofDayResultRowDeleting As VRunEndofDayResultRowChangeEventHandler
        
        Public Event VRunEndofDayResultRowDeleted As VRunEndofDayResultRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVRunEndofDayResultRow(ByVal row As VRunEndofDayResultRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVRunEndofDayResultRow(ByVal RunEndOfDayDate As Date, ByVal DepartName As String, ByVal ItemName As String, ByVal RequestQty As Decimal, ByVal ReceivedQty As Decimal, ByVal UseQty As Decimal, ByVal ItemID As Integer, ByVal Barcode As String, ByVal BeginBalance As Decimal, ByVal EndBalance As Decimal, ByVal CateID As Integer, ByVal CateName As String, ByVal DepartID As Integer, ByVal ItemUnitName As String, ByVal ContainerName As String) As VRunEndofDayResultRow
            Dim rowVRunEndofDayResultRow As VRunEndofDayResultRow = CType(Me.NewRow,VRunEndofDayResultRow)
            Dim columnValuesArray() As Object = New Object() {RunEndOfDayDate, DepartName, ItemName, RequestQty, ReceivedQty, UseQty, ItemID, Barcode, BeginBalance, EndBalance, CateID, CateName, DepartID, ItemUnitName, ContainerName}
            rowVRunEndofDayResultRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVRunEndofDayResultRow)
            Return rowVRunEndofDayResultRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VRunEndofDayResultDataTable = CType(MyBase.Clone,VRunEndofDayResultDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VRunEndofDayResultDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRunEndOfDayDate = MyBase.Columns("RunEndOfDayDate")
            Me.columnDepartName = MyBase.Columns("DepartName")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnRequestQty = MyBase.Columns("RequestQty")
            Me.columnReceivedQty = MyBase.Columns("ReceivedQty")
            Me.columnUseQty = MyBase.Columns("UseQty")
            Me.columnItemID = MyBase.Columns("ItemID")
            Me.columnBarcode = MyBase.Columns("Barcode")
            Me.columnBeginBalance = MyBase.Columns("BeginBalance")
            Me.columnEndBalance = MyBase.Columns("EndBalance")
            Me.columnCateID = MyBase.Columns("CateID")
            Me.columnCateName = MyBase.Columns("CateName")
            Me.columnDepartID = MyBase.Columns("DepartID")
            Me.columnItemUnitName = MyBase.Columns("ItemUnitName")
            Me.columnContainerName = MyBase.Columns("ContainerName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRunEndOfDayDate = New Global.System.Data.DataColumn("RunEndOfDayDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRunEndOfDayDate)
            Me.columnDepartName = New Global.System.Data.DataColumn("DepartName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartName)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnRequestQty = New Global.System.Data.DataColumn("RequestQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestQty)
            Me.columnReceivedQty = New Global.System.Data.DataColumn("ReceivedQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceivedQty)
            Me.columnUseQty = New Global.System.Data.DataColumn("UseQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUseQty)
            Me.columnItemID = New Global.System.Data.DataColumn("ItemID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemID)
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.columnBeginBalance = New Global.System.Data.DataColumn("BeginBalance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBeginBalance)
            Me.columnEndBalance = New Global.System.Data.DataColumn("EndBalance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndBalance)
            Me.columnCateID = New Global.System.Data.DataColumn("CateID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCateID)
            Me.columnCateName = New Global.System.Data.DataColumn("CateName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCateName)
            Me.columnDepartID = New Global.System.Data.DataColumn("DepartID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartID)
            Me.columnItemUnitName = New Global.System.Data.DataColumn("ItemUnitName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemUnitName)
            Me.columnContainerName = New Global.System.Data.DataColumn("ContainerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContainerName)
            Me.columnDepartName.MaxLength = 150
            Me.columnItemName.MaxLength = 150
            Me.columnBarcode.MaxLength = 50
            Me.columnCateName.MaxLength = 150
            Me.columnDepartID.AllowDBNull = false
            Me.columnItemUnitName.MaxLength = 150
            Me.columnContainerName.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVRunEndofDayResultRow() As VRunEndofDayResultRow
            Return CType(Me.NewRow,VRunEndofDayResultRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VRunEndofDayResultRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VRunEndofDayResultRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VRunEndofDayResultRowChangedEvent) Is Nothing) Then
                RaiseEvent VRunEndofDayResultRowChanged(Me, New VRunEndofDayResultRowChangeEvent(CType(e.Row,VRunEndofDayResultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VRunEndofDayResultRowChangingEvent) Is Nothing) Then
                RaiseEvent VRunEndofDayResultRowChanging(Me, New VRunEndofDayResultRowChangeEvent(CType(e.Row,VRunEndofDayResultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VRunEndofDayResultRowDeletedEvent) Is Nothing) Then
                RaiseEvent VRunEndofDayResultRowDeleted(Me, New VRunEndofDayResultRowChangeEvent(CType(e.Row,VRunEndofDayResultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VRunEndofDayResultRowDeletingEvent) Is Nothing) Then
                RaiseEvent VRunEndofDayResultRowDeleting(Me, New VRunEndofDayResultRowChangeEvent(CType(e.Row,VRunEndofDayResultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVRunEndofDayResultRow(ByVal row As VRunEndofDayResultRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSEndofDayRun = New DSEndofDayRun
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VRunEndofDayResultDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblDepartmentDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblDepartmentRow)
        
        Private columnDepartID As Global.System.Data.DataColumn
        
        Private columnDepartName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblDepartment"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblDepartmentRow
            Get
                Return CType(Me.Rows(index),tblDepartmentRow)
            End Get
        End Property
        
        Public Event tblDepartmentRowChanging As tblDepartmentRowChangeEventHandler
        
        Public Event tblDepartmentRowChanged As tblDepartmentRowChangeEventHandler
        
        Public Event tblDepartmentRowDeleting As tblDepartmentRowChangeEventHandler
        
        Public Event tblDepartmentRowDeleted As tblDepartmentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblDepartmentRow(ByVal row As tblDepartmentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblDepartmentRow(ByVal DepartName As String) As tblDepartmentRow
            Dim rowtblDepartmentRow As tblDepartmentRow = CType(Me.NewRow,tblDepartmentRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, DepartName}
            rowtblDepartmentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblDepartmentRow)
            Return rowtblDepartmentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDepartID(ByVal DepartID As Decimal) As tblDepartmentRow
            Return CType(Me.Rows.Find(New Object() {DepartID}),tblDepartmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblDepartmentDataTable = CType(MyBase.Clone,tblDepartmentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblDepartmentDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDepartID = MyBase.Columns("DepartID")
            Me.columnDepartName = MyBase.Columns("DepartName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDepartID = New Global.System.Data.DataColumn("DepartID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartID)
            Me.columnDepartName = New Global.System.Data.DataColumn("DepartName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDepartID}, true))
            Me.columnDepartID.AutoIncrement = true
            Me.columnDepartID.AutoIncrementSeed = -1
            Me.columnDepartID.AutoIncrementStep = -1
            Me.columnDepartID.AllowDBNull = false
            Me.columnDepartID.ReadOnly = true
            Me.columnDepartID.Unique = true
            Me.columnDepartName.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblDepartmentRow() As tblDepartmentRow
            Return CType(Me.NewRow,tblDepartmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblDepartmentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblDepartmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblDepartmentRowChangedEvent) Is Nothing) Then
                RaiseEvent tblDepartmentRowChanged(Me, New tblDepartmentRowChangeEvent(CType(e.Row,tblDepartmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblDepartmentRowChangingEvent) Is Nothing) Then
                RaiseEvent tblDepartmentRowChanging(Me, New tblDepartmentRowChangeEvent(CType(e.Row,tblDepartmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblDepartmentRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblDepartmentRowDeleted(Me, New tblDepartmentRowChangeEvent(CType(e.Row,tblDepartmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblDepartmentRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblDepartmentRowDeleting(Me, New tblDepartmentRowChangeEvent(CType(e.Row,tblDepartmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblDepartmentRow(ByVal row As tblDepartmentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSEndofDayRun = New DSEndofDayRun
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblDepartmentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VRunEndOfPeriodMonthDataTable
        Inherits Global.System.Data.TypedTableBase(Of VRunEndOfPeriodMonthRow)
        
        Private columnsmonth As Global.System.Data.DataColumn
        
        Private columnRequestQty As Global.System.Data.DataColumn
        
        Private columnReceivedQty As Global.System.Data.DataColumn
        
        Private columnItemID As Global.System.Data.DataColumn
        
        Private columnDepartID As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnCateID As Global.System.Data.DataColumn
        
        Private columnUsedQty As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VRunEndOfPeriodMonth"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property smonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsmonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceivedQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceivedQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CateIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCateID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsedQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsedQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VRunEndOfPeriodMonthRow
            Get
                Return CType(Me.Rows(index),VRunEndOfPeriodMonthRow)
            End Get
        End Property
        
        Public Event VRunEndOfPeriodMonthRowChanging As VRunEndOfPeriodMonthRowChangeEventHandler
        
        Public Event VRunEndOfPeriodMonthRowChanged As VRunEndOfPeriodMonthRowChangeEventHandler
        
        Public Event VRunEndOfPeriodMonthRowDeleting As VRunEndOfPeriodMonthRowChangeEventHandler
        
        Public Event VRunEndOfPeriodMonthRowDeleted As VRunEndOfPeriodMonthRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVRunEndOfPeriodMonthRow(ByVal row As VRunEndOfPeriodMonthRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVRunEndOfPeriodMonthRow(ByVal smonth As String, ByVal RequestQty As Integer, ByVal ReceivedQty As Integer, ByVal ItemID As Integer, ByVal DepartID As Decimal, ByVal ItemName As String, ByVal CateID As Integer, ByVal UsedQty As Decimal) As VRunEndOfPeriodMonthRow
            Dim rowVRunEndOfPeriodMonthRow As VRunEndOfPeriodMonthRow = CType(Me.NewRow,VRunEndOfPeriodMonthRow)
            Dim columnValuesArray() As Object = New Object() {smonth, RequestQty, ReceivedQty, ItemID, DepartID, ItemName, CateID, UsedQty}
            rowVRunEndOfPeriodMonthRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVRunEndOfPeriodMonthRow)
            Return rowVRunEndOfPeriodMonthRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VRunEndOfPeriodMonthDataTable = CType(MyBase.Clone,VRunEndOfPeriodMonthDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VRunEndOfPeriodMonthDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsmonth = MyBase.Columns("smonth")
            Me.columnRequestQty = MyBase.Columns("RequestQty")
            Me.columnReceivedQty = MyBase.Columns("ReceivedQty")
            Me.columnItemID = MyBase.Columns("ItemID")
            Me.columnDepartID = MyBase.Columns("DepartID")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnCateID = MyBase.Columns("CateID")
            Me.columnUsedQty = MyBase.Columns("UsedQty")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsmonth = New Global.System.Data.DataColumn("smonth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsmonth)
            Me.columnRequestQty = New Global.System.Data.DataColumn("RequestQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestQty)
            Me.columnReceivedQty = New Global.System.Data.DataColumn("ReceivedQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceivedQty)
            Me.columnItemID = New Global.System.Data.DataColumn("ItemID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemID)
            Me.columnDepartID = New Global.System.Data.DataColumn("DepartID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartID)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnCateID = New Global.System.Data.DataColumn("CateID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCateID)
            Me.columnUsedQty = New Global.System.Data.DataColumn("UsedQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsedQty)
            Me.columnsmonth.ReadOnly = true
            Me.columnsmonth.MaxLength = 7
            Me.columnRequestQty.ReadOnly = true
            Me.columnReceivedQty.ReadOnly = true
            Me.columnDepartID.AllowDBNull = false
            Me.columnItemName.MaxLength = 150
            Me.columnUsedQty.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVRunEndOfPeriodMonthRow() As VRunEndOfPeriodMonthRow
            Return CType(Me.NewRow,VRunEndOfPeriodMonthRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VRunEndOfPeriodMonthRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VRunEndOfPeriodMonthRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VRunEndOfPeriodMonthRowChangedEvent) Is Nothing) Then
                RaiseEvent VRunEndOfPeriodMonthRowChanged(Me, New VRunEndOfPeriodMonthRowChangeEvent(CType(e.Row,VRunEndOfPeriodMonthRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VRunEndOfPeriodMonthRowChangingEvent) Is Nothing) Then
                RaiseEvent VRunEndOfPeriodMonthRowChanging(Me, New VRunEndOfPeriodMonthRowChangeEvent(CType(e.Row,VRunEndOfPeriodMonthRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VRunEndOfPeriodMonthRowDeletedEvent) Is Nothing) Then
                RaiseEvent VRunEndOfPeriodMonthRowDeleted(Me, New VRunEndOfPeriodMonthRowChangeEvent(CType(e.Row,VRunEndOfPeriodMonthRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VRunEndOfPeriodMonthRowDeletingEvent) Is Nothing) Then
                RaiseEvent VRunEndOfPeriodMonthRowDeleting(Me, New VRunEndOfPeriodMonthRowChangeEvent(CType(e.Row,VRunEndOfPeriodMonthRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVRunEndOfPeriodMonthRow(ByVal row As VRunEndOfPeriodMonthRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSEndofDayRun = New DSEndofDayRun
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VRunEndOfPeriodMonthDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblEndofMonthRunDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblEndofMonthRunRow)
        
        Private columnDate As Global.System.Data.DataColumn
        
        Private columnRequestQty As Global.System.Data.DataColumn
        
        Private columnReceivedQty As Global.System.Data.DataColumn
        
        Private columnUsedQty As Global.System.Data.DataColumn
        
        Private columnBeginBalance As Global.System.Data.DataColumn
        
        Private columnEndBalance As Global.System.Data.DataColumn
        
        Private columnDepartID As Global.System.Data.DataColumn
        
        Private columnItemID As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblEndofMonthRun"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceivedQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceivedQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsedQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsedQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BeginBalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBeginBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndBalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblEndofMonthRunRow
            Get
                Return CType(Me.Rows(index),tblEndofMonthRunRow)
            End Get
        End Property
        
        Public Event tblEndofMonthRunRowChanging As tblEndofMonthRunRowChangeEventHandler
        
        Public Event tblEndofMonthRunRowChanged As tblEndofMonthRunRowChangeEventHandler
        
        Public Event tblEndofMonthRunRowDeleting As tblEndofMonthRunRowChangeEventHandler
        
        Public Event tblEndofMonthRunRowDeleted As tblEndofMonthRunRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblEndofMonthRunRow(ByVal row As tblEndofMonthRunRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblEndofMonthRunRow(ByVal _Date As String, ByVal RequestQty As Integer, ByVal ReceivedQty As Integer, ByVal UsedQty As Integer, ByVal BeginBalance As Integer, ByVal EndBalance As Integer, ByVal DepartID As Integer, ByVal ItemID As Integer, ByVal ItemName As String, ByVal Barcode As String) As tblEndofMonthRunRow
            Dim rowtblEndofMonthRunRow As tblEndofMonthRunRow = CType(Me.NewRow,tblEndofMonthRunRow)
            Dim columnValuesArray() As Object = New Object() {_Date, RequestQty, ReceivedQty, UsedQty, BeginBalance, EndBalance, DepartID, ItemID, ItemName, Barcode}
            rowtblEndofMonthRunRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblEndofMonthRunRow)
            Return rowtblEndofMonthRunRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblEndofMonthRunDataTable = CType(MyBase.Clone,tblEndofMonthRunDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblEndofMonthRunDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDate = MyBase.Columns("Date")
            Me.columnRequestQty = MyBase.Columns("RequestQty")
            Me.columnReceivedQty = MyBase.Columns("ReceivedQty")
            Me.columnUsedQty = MyBase.Columns("UsedQty")
            Me.columnBeginBalance = MyBase.Columns("BeginBalance")
            Me.columnEndBalance = MyBase.Columns("EndBalance")
            Me.columnDepartID = MyBase.Columns("DepartID")
            Me.columnItemID = MyBase.Columns("ItemID")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnBarcode = MyBase.Columns("Barcode")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDate = New Global.System.Data.DataColumn("Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DateColumn")
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDate")
            Me.columnDate.ExtendedProperties.Add("Generator_UserColumnName", "Date")
            MyBase.Columns.Add(Me.columnDate)
            Me.columnRequestQty = New Global.System.Data.DataColumn("RequestQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestQty)
            Me.columnReceivedQty = New Global.System.Data.DataColumn("ReceivedQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceivedQty)
            Me.columnUsedQty = New Global.System.Data.DataColumn("UsedQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsedQty)
            Me.columnBeginBalance = New Global.System.Data.DataColumn("BeginBalance", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBeginBalance)
            Me.columnEndBalance = New Global.System.Data.DataColumn("EndBalance", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndBalance)
            Me.columnDepartID = New Global.System.Data.DataColumn("DepartID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartID)
            Me.columnItemID = New Global.System.Data.DataColumn("ItemID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemID)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.columnDate.MaxLength = 50
            Me.columnItemName.MaxLength = 150
            Me.columnBarcode.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblEndofMonthRunRow() As tblEndofMonthRunRow
            Return CType(Me.NewRow,tblEndofMonthRunRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblEndofMonthRunRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblEndofMonthRunRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblEndofMonthRunRowChangedEvent) Is Nothing) Then
                RaiseEvent tblEndofMonthRunRowChanged(Me, New tblEndofMonthRunRowChangeEvent(CType(e.Row,tblEndofMonthRunRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblEndofMonthRunRowChangingEvent) Is Nothing) Then
                RaiseEvent tblEndofMonthRunRowChanging(Me, New tblEndofMonthRunRowChangeEvent(CType(e.Row,tblEndofMonthRunRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblEndofMonthRunRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblEndofMonthRunRowDeleted(Me, New tblEndofMonthRunRowChangeEvent(CType(e.Row,tblEndofMonthRunRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblEndofMonthRunRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblEndofMonthRunRowDeleting(Me, New tblEndofMonthRunRowChangeEvent(CType(e.Row,tblEndofMonthRunRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblEndofMonthRunRow(ByVal row As tblEndofMonthRunRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSEndofDayRun = New DSEndofDayRun
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblEndofMonthRunDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VRunEndofDayResultV1OPTDataTable
        Inherits Global.System.Data.TypedTableBase(Of VRunEndofDayResultV1OPTRow)
        
        Private columnRunEndOfDayDate As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnRequestQty As Global.System.Data.DataColumn
        
        Private columnReceivedQty As Global.System.Data.DataColumn
        
        Private columnUseQty As Global.System.Data.DataColumn
        
        Private columnItemID As Global.System.Data.DataColumn
        
        Private columnDepartName As Global.System.Data.DataColumn
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        Private columnDepartID As Global.System.Data.DataColumn
        
        Private columnBeginBalance As Global.System.Data.DataColumn
        
        Private columnEndBalance As Global.System.Data.DataColumn
        
        Private columnCateID As Global.System.Data.DataColumn
        
        Private columnCateName As Global.System.Data.DataColumn
        
        Private columnItemUnitName As Global.System.Data.DataColumn
        
        Private columnContainerName As Global.System.Data.DataColumn
        
        Private columnUnitPrice As Global.System.Data.DataColumn
        
        Private columnItemPrice As Global.System.Data.DataColumn
        
        Private columnItemQTY As Global.System.Data.DataColumn
        
        Private columnSubTotalReal As Global.System.Data.DataColumn
        
        Private columnSubTotalDolar As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VRunEndofDayResultV1OPT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RunEndOfDayDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRunEndOfDayDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceivedQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceivedQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UseQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUseQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BeginBalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBeginBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndBalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CateIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCateID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CateNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCateName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemUnitNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemUnitName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContainerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContainerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnitPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemQTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotalReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotalDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VRunEndofDayResultV1OPTRow
            Get
                Return CType(Me.Rows(index),VRunEndofDayResultV1OPTRow)
            End Get
        End Property
        
        Public Event VRunEndofDayResultV1OPTRowChanging As VRunEndofDayResultV1OPTRowChangeEventHandler
        
        Public Event VRunEndofDayResultV1OPTRowChanged As VRunEndofDayResultV1OPTRowChangeEventHandler
        
        Public Event VRunEndofDayResultV1OPTRowDeleting As VRunEndofDayResultV1OPTRowChangeEventHandler
        
        Public Event VRunEndofDayResultV1OPTRowDeleted As VRunEndofDayResultV1OPTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVRunEndofDayResultV1OPTRow(ByVal row As VRunEndofDayResultV1OPTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVRunEndofDayResultV1OPTRow( _
                    ByVal RunEndOfDayDate As Date,  _
                    ByVal ItemName As String,  _
                    ByVal RequestQty As Decimal,  _
                    ByVal ReceivedQty As Decimal,  _
                    ByVal UseQty As Decimal,  _
                    ByVal ItemID As Integer,  _
                    ByVal DepartName As String,  _
                    ByVal Barcode As String,  _
                    ByVal DepartID As Integer,  _
                    ByVal BeginBalance As Decimal,  _
                    ByVal EndBalance As Decimal,  _
                    ByVal CateID As Integer,  _
                    ByVal CateName As String,  _
                    ByVal ItemUnitName As String,  _
                    ByVal ContainerName As String,  _
                    ByVal UnitPrice As Decimal,  _
                    ByVal ItemPrice As Double,  _
                    ByVal ItemQTY As Decimal,  _
                    ByVal SubTotalReal As Double,  _
                    ByVal SubTotalDolar As Double) As VRunEndofDayResultV1OPTRow
            Dim rowVRunEndofDayResultV1OPTRow As VRunEndofDayResultV1OPTRow = CType(Me.NewRow,VRunEndofDayResultV1OPTRow)
            Dim columnValuesArray() As Object = New Object() {RunEndOfDayDate, ItemName, RequestQty, ReceivedQty, UseQty, ItemID, DepartName, Barcode, DepartID, BeginBalance, EndBalance, CateID, CateName, ItemUnitName, ContainerName, UnitPrice, ItemPrice, ItemQTY, SubTotalReal, SubTotalDolar}
            rowVRunEndofDayResultV1OPTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVRunEndofDayResultV1OPTRow)
            Return rowVRunEndofDayResultV1OPTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VRunEndofDayResultV1OPTDataTable = CType(MyBase.Clone,VRunEndofDayResultV1OPTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VRunEndofDayResultV1OPTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRunEndOfDayDate = MyBase.Columns("RunEndOfDayDate")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnRequestQty = MyBase.Columns("RequestQty")
            Me.columnReceivedQty = MyBase.Columns("ReceivedQty")
            Me.columnUseQty = MyBase.Columns("UseQty")
            Me.columnItemID = MyBase.Columns("ItemID")
            Me.columnDepartName = MyBase.Columns("DepartName")
            Me.columnBarcode = MyBase.Columns("Barcode")
            Me.columnDepartID = MyBase.Columns("DepartID")
            Me.columnBeginBalance = MyBase.Columns("BeginBalance")
            Me.columnEndBalance = MyBase.Columns("EndBalance")
            Me.columnCateID = MyBase.Columns("CateID")
            Me.columnCateName = MyBase.Columns("CateName")
            Me.columnItemUnitName = MyBase.Columns("ItemUnitName")
            Me.columnContainerName = MyBase.Columns("ContainerName")
            Me.columnUnitPrice = MyBase.Columns("UnitPrice")
            Me.columnItemPrice = MyBase.Columns("ItemPrice")
            Me.columnItemQTY = MyBase.Columns("ItemQTY")
            Me.columnSubTotalReal = MyBase.Columns("SubTotalReal")
            Me.columnSubTotalDolar = MyBase.Columns("SubTotalDolar")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRunEndOfDayDate = New Global.System.Data.DataColumn("RunEndOfDayDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRunEndOfDayDate)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnRequestQty = New Global.System.Data.DataColumn("RequestQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestQty)
            Me.columnReceivedQty = New Global.System.Data.DataColumn("ReceivedQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceivedQty)
            Me.columnUseQty = New Global.System.Data.DataColumn("UseQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUseQty)
            Me.columnItemID = New Global.System.Data.DataColumn("ItemID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemID)
            Me.columnDepartName = New Global.System.Data.DataColumn("DepartName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartName)
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.columnDepartID = New Global.System.Data.DataColumn("DepartID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartID)
            Me.columnBeginBalance = New Global.System.Data.DataColumn("BeginBalance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBeginBalance)
            Me.columnEndBalance = New Global.System.Data.DataColumn("EndBalance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndBalance)
            Me.columnCateID = New Global.System.Data.DataColumn("CateID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCateID)
            Me.columnCateName = New Global.System.Data.DataColumn("CateName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCateName)
            Me.columnItemUnitName = New Global.System.Data.DataColumn("ItemUnitName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemUnitName)
            Me.columnContainerName = New Global.System.Data.DataColumn("ContainerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContainerName)
            Me.columnUnitPrice = New Global.System.Data.DataColumn("UnitPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitPrice)
            Me.columnItemPrice = New Global.System.Data.DataColumn("ItemPrice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemPrice)
            Me.columnItemQTY = New Global.System.Data.DataColumn("ItemQTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemQTY)
            Me.columnSubTotalReal = New Global.System.Data.DataColumn("SubTotalReal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotalReal)
            Me.columnSubTotalDolar = New Global.System.Data.DataColumn("SubTotalDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotalDolar)
            Me.columnItemName.MaxLength = 150
            Me.columnDepartName.MaxLength = 100
            Me.columnBarcode.MaxLength = 50
            Me.columnDepartID.AllowDBNull = false
            Me.columnCateName.MaxLength = 150
            Me.columnItemUnitName.MaxLength = 150
            Me.columnContainerName.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVRunEndofDayResultV1OPTRow() As VRunEndofDayResultV1OPTRow
            Return CType(Me.NewRow,VRunEndofDayResultV1OPTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VRunEndofDayResultV1OPTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VRunEndofDayResultV1OPTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VRunEndofDayResultV1OPTRowChangedEvent) Is Nothing) Then
                RaiseEvent VRunEndofDayResultV1OPTRowChanged(Me, New VRunEndofDayResultV1OPTRowChangeEvent(CType(e.Row,VRunEndofDayResultV1OPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VRunEndofDayResultV1OPTRowChangingEvent) Is Nothing) Then
                RaiseEvent VRunEndofDayResultV1OPTRowChanging(Me, New VRunEndofDayResultV1OPTRowChangeEvent(CType(e.Row,VRunEndofDayResultV1OPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VRunEndofDayResultV1OPTRowDeletedEvent) Is Nothing) Then
                RaiseEvent VRunEndofDayResultV1OPTRowDeleted(Me, New VRunEndofDayResultV1OPTRowChangeEvent(CType(e.Row,VRunEndofDayResultV1OPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VRunEndofDayResultV1OPTRowDeletingEvent) Is Nothing) Then
                RaiseEvent VRunEndofDayResultV1OPTRowDeleting(Me, New VRunEndofDayResultV1OPTRowChangeEvent(CType(e.Row,VRunEndofDayResultV1OPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVRunEndofDayResultV1OPTRow(ByVal row As VRunEndofDayResultV1OPTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSEndofDayRun = New DSEndofDayRun
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VRunEndofDayResultV1OPTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VRunEndofDayResultRow
        Inherits Global.System.Data.DataRow
        
        Private tableVRunEndofDayResult As VRunEndofDayResultDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVRunEndofDayResult = CType(Me.Table,VRunEndofDayResultDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RunEndOfDayDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResult.RunEndOfDayDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RunEndOfDayDate' in table 'VRunEndofDayResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResult.RunEndOfDayDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepartName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResult.DepartNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DepartName' in table 'VRunEndofDayResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResult.DepartNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResult.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'VRunEndofDayResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResult.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResult.RequestQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestQty' in table 'VRunEndofDayResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResult.RequestQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceivedQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResult.ReceivedQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceivedQty' in table 'VRunEndofDayResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResult.ReceivedQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UseQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResult.UseQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UseQty' in table 'VRunEndofDayResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResult.UseQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResult.ItemIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemID' in table 'VRunEndofDayResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResult.ItemIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResult.BarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'VRunEndofDayResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResult.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BeginBalance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResult.BeginBalanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BeginBalance' in table 'VRunEndofDayResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResult.BeginBalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndBalance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResult.EndBalanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EndBalance' in table 'VRunEndofDayResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResult.EndBalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CateID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResult.CateIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CateID' in table 'VRunEndofDayResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResult.CateIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CateName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResult.CateNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CateName' in table 'VRunEndofDayResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResult.CateNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepartID() As Integer
            Get
                Return CType(Me(Me.tableVRunEndofDayResult.DepartIDColumn),Integer)
            End Get
            Set
                Me(Me.tableVRunEndofDayResult.DepartIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemUnitName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResult.ItemUnitNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemUnitName' in table 'VRunEndofDayResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResult.ItemUnitNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContainerName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResult.ContainerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContainerName' in table 'VRunEndofDayResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResult.ContainerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRunEndOfDayDateNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResult.RunEndOfDayDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRunEndOfDayDateNull()
            Me(Me.tableVRunEndofDayResult.RunEndOfDayDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartNameNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResult.DepartNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartNameNull()
            Me(Me.tableVRunEndofDayResult.DepartNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResult.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableVRunEndofDayResult.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestQtyNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResult.RequestQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestQtyNull()
            Me(Me.tableVRunEndofDayResult.RequestQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceivedQtyNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResult.ReceivedQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceivedQtyNull()
            Me(Me.tableVRunEndofDayResult.ReceivedQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUseQtyNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResult.UseQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUseQtyNull()
            Me(Me.tableVRunEndofDayResult.UseQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemIDNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResult.ItemIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemIDNull()
            Me(Me.tableVRunEndofDayResult.ItemIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResult.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tableVRunEndofDayResult.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBeginBalanceNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResult.BeginBalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBeginBalanceNull()
            Me(Me.tableVRunEndofDayResult.BeginBalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEndBalanceNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResult.EndBalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEndBalanceNull()
            Me(Me.tableVRunEndofDayResult.EndBalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCateIDNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResult.CateIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCateIDNull()
            Me(Me.tableVRunEndofDayResult.CateIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCateNameNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResult.CateNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCateNameNull()
            Me(Me.tableVRunEndofDayResult.CateNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemUnitNameNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResult.ItemUnitNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemUnitNameNull()
            Me(Me.tableVRunEndofDayResult.ItemUnitNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContainerNameNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResult.ContainerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContainerNameNull()
            Me(Me.tableVRunEndofDayResult.ContainerNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblDepartmentRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblDepartment As tblDepartmentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblDepartment = CType(Me.Table,tblDepartmentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepartID() As Decimal
            Get
                Return CType(Me(Me.tabletblDepartment.DepartIDColumn),Decimal)
            End Get
            Set
                Me(Me.tabletblDepartment.DepartIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepartName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblDepartment.DepartNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DepartName' in table 'tblDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblDepartment.DepartNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartNameNull() As Boolean
            Return Me.IsNull(Me.tabletblDepartment.DepartNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartNameNull()
            Me(Me.tabletblDepartment.DepartNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VRunEndOfPeriodMonthRow
        Inherits Global.System.Data.DataRow
        
        Private tableVRunEndOfPeriodMonth As VRunEndOfPeriodMonthDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVRunEndOfPeriodMonth = CType(Me.Table,VRunEndOfPeriodMonthDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property smonth() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndOfPeriodMonth.smonthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'smonth' in table 'VRunEndOfPeriodMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndOfPeriodMonth.smonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndOfPeriodMonth.RequestQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestQty' in table 'VRunEndOfPeriodMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndOfPeriodMonth.RequestQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceivedQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndOfPeriodMonth.ReceivedQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceivedQty' in table 'VRunEndOfPeriodMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndOfPeriodMonth.ReceivedQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndOfPeriodMonth.ItemIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemID' in table 'VRunEndOfPeriodMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndOfPeriodMonth.ItemIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepartID() As Decimal
            Get
                Return CType(Me(Me.tableVRunEndOfPeriodMonth.DepartIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableVRunEndOfPeriodMonth.DepartIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndOfPeriodMonth.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'VRunEndOfPeriodMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndOfPeriodMonth.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CateID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndOfPeriodMonth.CateIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CateID' in table 'VRunEndOfPeriodMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndOfPeriodMonth.CateIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsedQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndOfPeriodMonth.UsedQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UsedQty' in table 'VRunEndOfPeriodMonth' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndOfPeriodMonth.UsedQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssmonthNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndOfPeriodMonth.smonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsmonthNull()
            Me(Me.tableVRunEndOfPeriodMonth.smonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestQtyNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndOfPeriodMonth.RequestQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestQtyNull()
            Me(Me.tableVRunEndOfPeriodMonth.RequestQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceivedQtyNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndOfPeriodMonth.ReceivedQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceivedQtyNull()
            Me(Me.tableVRunEndOfPeriodMonth.ReceivedQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemIDNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndOfPeriodMonth.ItemIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemIDNull()
            Me(Me.tableVRunEndOfPeriodMonth.ItemIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndOfPeriodMonth.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableVRunEndOfPeriodMonth.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCateIDNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndOfPeriodMonth.CateIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCateIDNull()
            Me(Me.tableVRunEndOfPeriodMonth.CateIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsedQtyNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndOfPeriodMonth.UsedQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsedQtyNull()
            Me(Me.tableVRunEndOfPeriodMonth.UsedQtyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblEndofMonthRunRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblEndofMonthRun As tblEndofMonthRunDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblEndofMonthRun = CType(Me.Table,tblEndofMonthRunDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Date() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEndofMonthRun.DateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Date' in table 'tblEndofMonthRun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEndofMonthRun.DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblEndofMonthRun.RequestQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestQty' in table 'tblEndofMonthRun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEndofMonthRun.RequestQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceivedQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblEndofMonthRun.ReceivedQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceivedQty' in table 'tblEndofMonthRun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEndofMonthRun.ReceivedQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsedQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblEndofMonthRun.UsedQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UsedQty' in table 'tblEndofMonthRun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEndofMonthRun.UsedQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BeginBalance() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblEndofMonthRun.BeginBalanceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BeginBalance' in table 'tblEndofMonthRun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEndofMonthRun.BeginBalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndBalance() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblEndofMonthRun.EndBalanceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EndBalance' in table 'tblEndofMonthRun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEndofMonthRun.EndBalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepartID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblEndofMonthRun.DepartIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DepartID' in table 'tblEndofMonthRun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEndofMonthRun.DepartIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblEndofMonthRun.ItemIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemID' in table 'tblEndofMonthRun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEndofMonthRun.ItemIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEndofMonthRun.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'tblEndofMonthRun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEndofMonthRun.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEndofMonthRun.BarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'tblEndofMonthRun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEndofMonthRun.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tabletblEndofMonthRun.DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_DateNull()
            Me(Me.tabletblEndofMonthRun.DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestQtyNull() As Boolean
            Return Me.IsNull(Me.tabletblEndofMonthRun.RequestQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestQtyNull()
            Me(Me.tabletblEndofMonthRun.RequestQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceivedQtyNull() As Boolean
            Return Me.IsNull(Me.tabletblEndofMonthRun.ReceivedQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceivedQtyNull()
            Me(Me.tabletblEndofMonthRun.ReceivedQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsedQtyNull() As Boolean
            Return Me.IsNull(Me.tabletblEndofMonthRun.UsedQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsedQtyNull()
            Me(Me.tabletblEndofMonthRun.UsedQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBeginBalanceNull() As Boolean
            Return Me.IsNull(Me.tabletblEndofMonthRun.BeginBalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBeginBalanceNull()
            Me(Me.tabletblEndofMonthRun.BeginBalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEndBalanceNull() As Boolean
            Return Me.IsNull(Me.tabletblEndofMonthRun.EndBalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEndBalanceNull()
            Me(Me.tabletblEndofMonthRun.EndBalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartIDNull() As Boolean
            Return Me.IsNull(Me.tabletblEndofMonthRun.DepartIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartIDNull()
            Me(Me.tabletblEndofMonthRun.DepartIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemIDNull() As Boolean
            Return Me.IsNull(Me.tabletblEndofMonthRun.ItemIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemIDNull()
            Me(Me.tabletblEndofMonthRun.ItemIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tabletblEndofMonthRun.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tabletblEndofMonthRun.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tabletblEndofMonthRun.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tabletblEndofMonthRun.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VRunEndofDayResultV1OPTRow
        Inherits Global.System.Data.DataRow
        
        Private tableVRunEndofDayResultV1OPT As VRunEndofDayResultV1OPTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVRunEndofDayResultV1OPT = CType(Me.Table,VRunEndofDayResultV1OPTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RunEndOfDayDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.RunEndOfDayDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RunEndOfDayDate' in table 'VRunEndofDayResultV1OPT' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.RunEndOfDayDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'VRunEndofDayResultV1OPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.RequestQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestQty' in table 'VRunEndofDayResultV1OPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.RequestQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceivedQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.ReceivedQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceivedQty' in table 'VRunEndofDayResultV1OPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.ReceivedQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UseQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.UseQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UseQty' in table 'VRunEndofDayResultV1OPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.UseQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.ItemIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemID' in table 'VRunEndofDayResultV1OPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.ItemIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepartName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.DepartNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DepartName' in table 'VRunEndofDayResultV1OPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.DepartNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.BarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'VRunEndofDayResultV1OPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepartID() As Integer
            Get
                Return CType(Me(Me.tableVRunEndofDayResultV1OPT.DepartIDColumn),Integer)
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.DepartIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BeginBalance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.BeginBalanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BeginBalance' in table 'VRunEndofDayResultV1OPT' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.BeginBalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndBalance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.EndBalanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EndBalance' in table 'VRunEndofDayResultV1OPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.EndBalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CateID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.CateIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CateID' in table 'VRunEndofDayResultV1OPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.CateIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CateName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.CateNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CateName' in table 'VRunEndofDayResultV1OPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.CateNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemUnitName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.ItemUnitNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemUnitName' in table 'VRunEndofDayResultV1OPT' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.ItemUnitNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContainerName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.ContainerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContainerName' in table 'VRunEndofDayResultV1OPT' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.ContainerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitPrice() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.UnitPriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnitPrice' in table 'VRunEndofDayResultV1OPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.UnitPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemPrice() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.ItemPriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemPrice' in table 'VRunEndofDayResultV1OPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.ItemPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemQTY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.ItemQTYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemQTY' in table 'VRunEndofDayResultV1OPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.ItemQTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotalReal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.SubTotalRealColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTotalReal' in table 'VRunEndofDayResultV1OPT' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.SubTotalRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotalDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVRunEndofDayResultV1OPT.SubTotalDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTotalDolar' in table 'VRunEndofDayResultV1OPT' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVRunEndofDayResultV1OPT.SubTotalDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRunEndOfDayDateNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.RunEndOfDayDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRunEndOfDayDateNull()
            Me(Me.tableVRunEndofDayResultV1OPT.RunEndOfDayDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableVRunEndofDayResultV1OPT.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestQtyNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.RequestQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestQtyNull()
            Me(Me.tableVRunEndofDayResultV1OPT.RequestQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceivedQtyNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.ReceivedQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceivedQtyNull()
            Me(Me.tableVRunEndofDayResultV1OPT.ReceivedQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUseQtyNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.UseQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUseQtyNull()
            Me(Me.tableVRunEndofDayResultV1OPT.UseQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemIDNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.ItemIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemIDNull()
            Me(Me.tableVRunEndofDayResultV1OPT.ItemIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartNameNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.DepartNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartNameNull()
            Me(Me.tableVRunEndofDayResultV1OPT.DepartNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tableVRunEndofDayResultV1OPT.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBeginBalanceNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.BeginBalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBeginBalanceNull()
            Me(Me.tableVRunEndofDayResultV1OPT.BeginBalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEndBalanceNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.EndBalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEndBalanceNull()
            Me(Me.tableVRunEndofDayResultV1OPT.EndBalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCateIDNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.CateIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCateIDNull()
            Me(Me.tableVRunEndofDayResultV1OPT.CateIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCateNameNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.CateNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCateNameNull()
            Me(Me.tableVRunEndofDayResultV1OPT.CateNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemUnitNameNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.ItemUnitNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemUnitNameNull()
            Me(Me.tableVRunEndofDayResultV1OPT.ItemUnitNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContainerNameNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.ContainerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContainerNameNull()
            Me(Me.tableVRunEndofDayResultV1OPT.ContainerNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitPriceNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.UnitPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitPriceNull()
            Me(Me.tableVRunEndofDayResultV1OPT.UnitPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemPriceNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.ItemPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemPriceNull()
            Me(Me.tableVRunEndofDayResultV1OPT.ItemPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemQTYNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.ItemQTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemQTYNull()
            Me(Me.tableVRunEndofDayResultV1OPT.ItemQTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalRealNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.SubTotalRealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalRealNull()
            Me(Me.tableVRunEndofDayResultV1OPT.SubTotalRealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalDolarNull() As Boolean
            Return Me.IsNull(Me.tableVRunEndofDayResultV1OPT.SubTotalDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalDolarNull()
            Me(Me.tableVRunEndofDayResultV1OPT.SubTotalDolarColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VRunEndofDayResultRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VRunEndofDayResultRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VRunEndofDayResultRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VRunEndofDayResultRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblDepartmentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblDepartmentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblDepartmentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblDepartmentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VRunEndOfPeriodMonthRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VRunEndOfPeriodMonthRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VRunEndOfPeriodMonthRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VRunEndOfPeriodMonthRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblEndofMonthRunRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblEndofMonthRunRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblEndofMonthRunRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblEndofMonthRunRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VRunEndofDayResultV1OPTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VRunEndofDayResultV1OPTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VRunEndofDayResultV1OPTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VRunEndofDayResultV1OPTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DSEndofDayRunTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VRunEndofDayResultTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VRunEndofDayResult"
            tableMapping.ColumnMappings.Add("RunEndOfDayDate", "RunEndOfDayDate")
            tableMapping.ColumnMappings.Add("DepartName", "DepartName")
            tableMapping.ColumnMappings.Add("ItemName", "ItemName")
            tableMapping.ColumnMappings.Add("RequestQty", "RequestQty")
            tableMapping.ColumnMappings.Add("ReceivedQty", "ReceivedQty")
            tableMapping.ColumnMappings.Add("UseQty", "UseQty")
            tableMapping.ColumnMappings.Add("ItemID", "ItemID")
            tableMapping.ColumnMappings.Add("Barcode", "Barcode")
            tableMapping.ColumnMappings.Add("BeginBalance", "BeginBalance")
            tableMapping.ColumnMappings.Add("EndBalance", "EndBalance")
            tableMapping.ColumnMappings.Add("CateID", "CateID")
            tableMapping.ColumnMappings.Add("CateName", "CateName")
            tableMapping.ColumnMappings.Add("DepartID", "DepartID")
            tableMapping.ColumnMappings.Add("ItemUnitName", "ItemUnitName")
            tableMapping.ColumnMappings.Add("ContainerName", "ContainerName")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(7) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     RunEndOfDayDate, DepartName, ItemName, RequestQty, ReceivedQty, UseQty"& _ 
                ", ItemID, Barcode, BeginBalance, EndBalance, CateID, CateName, ItemUnitName, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                     ContainerName, DepartID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         VRunEndofDayResult"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Barcode, BeginBalance, CateID, CateName, ContainerName, DepartID, DepartNa"& _ 
                "me, EndBalance, ItemID, ItemName, ItemUnitName, ReceivedQty, RequestQty, RunEndO"& _ 
                "fDayDate, UseQty FROM VRunEndofDayResult WHERE (DepartID = @DepartID) AND (CAST("& _ 
                "CONVERT (VARCHAR(10), RunEndOfDayDate, 1) AS DateTime) = CAST(CONVERT (VARCHAR(1"& _ 
                "0), @RunEndOfDayDate, 1) AS DateTime))"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DepartID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "DepartID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RunEndOfDayDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Barcode, BeginBalance, CateID, CateName, ContainerName, DepartID, DepartNa"& _ 
                "me, EndBalance, ItemID, ItemName, ItemUnitName, ReceivedQty, RequestQty, RunEndO"& _ 
                "fDayDate, UseQty FROM VRunEndofDayResult WHERE (DepartID = @DepartID) AND (ItemI"& _ 
                "D = @ItemID) AND (CAST(CONVERT (VARCHAR(10), RunEndOfDayDate, 1) AS DateTime) BE"& _ 
                "TWEEN CAST(CONVERT (VARCHAR(10), CAST(@FromDate AS DATETIME), 1) AS Datetime) AN"& _ 
                "D CAST(CONVERT (VARCHAR(10), CAST(@ToDate AS DATETIME), 1) AS Datetime))"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DepartID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "DepartID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FromDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT Barcode, BeginBalance, CateID, CateName, ContainerName, DepartID, DepartNa"& _ 
                "me, EndBalance, ItemID, ItemName, ItemUnitName, ReceivedQty, RequestQty, RunEndO"& _ 
                "fDayDate, UseQty FROM VRunEndofDayResult WHERE (DepartID = @DepartID) AND (CONVE"& _ 
                "RT (datetime, RunEndOfDayDate, 101) >= CONVERT (datetime, @FromDate, 101)) AND ("& _ 
                "CAST(CONVERT (VARCHAR(10), RunEndOfDayDate, 1) AS DateTime) BETWEEN CAST(CONVERT"& _ 
                " (VARCHAR(10), CAST(@FromDate AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VA"& _ 
                "RCHAR(10), CAST(@ToDate AS DATETIME), 1) AS Datetime)) ORDER BY RunEndOfDayDate"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DepartID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "DepartID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FromDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT Barcode, BeginBalance, CateID, CateName, ContainerName, DepartID, DepartNa"& _ 
                "me, EndBalance, ItemID, ItemName, ItemUnitName, ReceivedQty, RequestQty, RunEndO"& _ 
                "fDayDate, UseQty FROM VRunEndofDayResult WHERE (DepartID = @DepartID) AND (CateI"& _ 
                "D = @CateID) AND (CAST(CONVERT (VARCHAR(10), RunEndOfDayDate, 1) AS DateTime) BE"& _ 
                "TWEEN CAST(CONVERT (VARCHAR(10), CAST(@fromDate AS DATETIME), 1) AS Datetime) AN"& _ 
                "D CAST(CONVERT (VARCHAR(10), CAST(@toDate AS DATETIME), 1) AS Datetime)) ORDER B"& _ 
                "Y RunEndOfDayDate, ItemName"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DepartID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "DepartID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CateID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CateID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fromDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@toDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT Barcode, BeginBalance, CateID, CateName, ContainerName, DepartID, DepartNa"& _ 
                "me, EndBalance, ItemID, ItemName, ItemUnitName, ReceivedQty, RequestQty, RunEndO"& _ 
                "fDayDate, UseQty FROM VRunEndofDayResult WHERE (DepartID = @DepartID) AND (ItemI"& _ 
                "D = @ItemID) AND (CAST(CONVERT (VARCHAR(10), RunEndOfDayDate, 1) AS DateTime) BE"& _ 
                "TWEEN CAST(CONVERT (VARCHAR(10), CAST(@fromDate AS DATETIME), 1) AS Datetime) AN"& _ 
                "D CAST(CONVERT (VARCHAR(10), CAST(@toDate AS DATETIME), 1) AS Datetime)) ORDER B"& _ 
                "Y RunEndOfDayDate, ItemName"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DepartID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "DepartID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fromDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@toDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT Barcode, BeginBalance, CateID, CateName, ContainerName, DepartID, DepartNa"& _ 
                "me, EndBalance, ItemID, ItemName, ItemUnitName, ReceivedQty, RequestQty, RunEndO"& _ 
                "fDayDate, UseQty FROM VRunEndofDayResult WHERE (DepartID = @DepartID) AND (CAST("& _ 
                "CONVERT (VARCHAR(10), RunEndOfDayDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VAR"& _ 
                "CHAR(10), CAST(@fromDate AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR"& _ 
                "(10), CAST(@toDate AS DATETIME), 1) AS Datetime)) ORDER BY RunEndOfDayDate, Item"& _ 
                "Name"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DepartID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "DepartID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fromDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@toDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT Barcode, BeginBalance, CateID, CateName, ContainerName, DepartID, DepartNa"& _ 
                "me, EndBalance, ItemID, ItemName, ItemUnitName, ReceivedQty, RequestQty, RunEndO"& _ 
                "fDayDate, UseQty FROM VRunEndofDayResult WHERE (CONVERT (datetime, RunEndOfDayDa"& _ 
                "te, 101) >= CONVERT (datetime, @FromDate, 101)) AND (CAST(CONVERT (VARCHAR(10), "& _ 
                "RunEndOfDayDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@FromDa"& _ 
                "te AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@ToDate AS "& _ 
                "DATETIME), 1) AS Datetime)) ORDER BY RunEndOfDayDate"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FromDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSEndofDayRun.VRunEndofDayResultDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSEndofDayRun.VRunEndofDayResultDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSEndofDayRun.VRunEndofDayResultDataTable = New DSEndofDayRun.VRunEndofDayResultDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSEndofDayRun.VRunEndofDayResultDataTable, ByVal DepartID As Decimal, ByVal RunEndOfDayDate As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DepartID,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(RunEndOfDayDate,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetRunEndofDayByDepartIDandSpecificDate(ByVal DepartID As Decimal, ByVal RunEndOfDayDate As Date) As DSEndofDayRun.VRunEndofDayResultDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DepartID,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(RunEndOfDayDate,Date)
            Dim dataTable As DSEndofDayRun.VRunEndofDayResultDataTable = New DSEndofDayRun.VRunEndofDayResultDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSEndofDayRun.VRunEndofDayResultDataTable, ByVal DepartID As Decimal, ByVal ItemID As Global.System.Nullable(Of Integer), ByVal FromDate As Date, ByVal ToDate As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DepartID,Decimal)
            If (ItemID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ItemID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(FromDate,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(ToDate,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetItemEndofDaySearch(ByVal DepartID As Decimal, ByVal ItemID As Global.System.Nullable(Of Integer), ByVal FromDate As Date, ByVal ToDate As Date) As DSEndofDayRun.VRunEndofDayResultDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DepartID,Decimal)
            If (ItemID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ItemID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(FromDate,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(ToDate,Date)
            Dim dataTable As DSEndofDayRun.VRunEndofDayResultDataTable = New DSEndofDayRun.VRunEndofDayResultDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy2(ByVal dataTable As DSEndofDayRun.VRunEndofDayResultDataTable, ByVal DepartID As Decimal, ByVal FromDate As Date, ByVal ToDate As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DepartID,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(FromDate,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(ToDate,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllItemEndofDaySearch(ByVal DepartID As Decimal, ByVal FromDate As Date, ByVal ToDate As Date) As DSEndofDayRun.VRunEndofDayResultDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DepartID,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(FromDate,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(ToDate,Date)
            Dim dataTable As DSEndofDayRun.VRunEndofDayResultDataTable = New DSEndofDayRun.VRunEndofDayResultDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy3(ByVal dataTable As DSEndofDayRun.VRunEndofDayResultDataTable, ByVal DepartID As Integer, ByVal CateID As Global.System.Nullable(Of Integer), ByVal fromDate As Date, ByVal toDate As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DepartID,Integer)
            If (CateID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CateID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(fromDate,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(toDate,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDepartTranDataByCateID(ByVal DepartID As Integer, ByVal CateID As Global.System.Nullable(Of Integer), ByVal fromDate As Date, ByVal toDate As Date) As DSEndofDayRun.VRunEndofDayResultDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DepartID,Integer)
            If (CateID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CateID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(fromDate,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(toDate,Date)
            Dim dataTable As DSEndofDayRun.VRunEndofDayResultDataTable = New DSEndofDayRun.VRunEndofDayResultDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy4(ByVal dataTable As DSEndofDayRun.VRunEndofDayResultDataTable, ByVal DepartID As Integer, ByVal ItemID As Global.System.Nullable(Of Integer), ByVal fromDate As Date, ByVal toDate As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DepartID,Integer)
            If (ItemID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ItemID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(fromDate,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(toDate,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDepartTranDataByItemID(ByVal DepartID As Integer, ByVal ItemID As Global.System.Nullable(Of Integer), ByVal fromDate As Date, ByVal toDate As Date) As DSEndofDayRun.VRunEndofDayResultDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DepartID,Integer)
            If (ItemID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ItemID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(fromDate,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(toDate,Date)
            Dim dataTable As DSEndofDayRun.VRunEndofDayResultDataTable = New DSEndofDayRun.VRunEndofDayResultDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy5(ByVal dataTable As DSEndofDayRun.VRunEndofDayResultDataTable, ByVal DepartID As Decimal, ByVal fromDate As Date, ByVal toDate As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DepartID,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(fromDate,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(toDate,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDepartTranDataByDepartID(ByVal DepartID As Decimal, ByVal fromDate As Date, ByVal toDate As Date) As DSEndofDayRun.VRunEndofDayResultDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DepartID,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(fromDate,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(toDate,Date)
            Dim dataTable As DSEndofDayRun.VRunEndofDayResultDataTable = New DSEndofDayRun.VRunEndofDayResultDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy6(ByVal dataTable As DSEndofDayRun.VRunEndofDayResultDataTable, ByVal FromDate As Date, ByVal ToDate As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FromDate,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ToDate,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllRunEndofDayData(ByVal FromDate As Date, ByVal ToDate As Date) As DSEndofDayRun.VRunEndofDayResultDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FromDate,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ToDate,Date)
            Dim dataTable As DSEndofDayRun.VRunEndofDayResultDataTable = New DSEndofDayRun.VRunEndofDayResultDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblDepartmentTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblDepartment"
            tableMapping.ColumnMappings.Add("DepartID", "DepartID")
            tableMapping.ColumnMappings.Add("DepartName", "DepartName")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblDepartment] WHERE (([DepartID] = @Original_DepartID) AND (("& _ 
                "@IsNull_DepartName = 1 AND [DepartName] IS NULL) OR ([DepartName] = @Original_De"& _ 
                "partName)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DepartID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "DepartID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DepartName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DepartName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DepartName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DepartName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblDepartment] ([DepartName]) VALUES (@DepartName);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT De"& _ 
                "partID, DepartName FROM tblDepartment WHERE (DepartID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DepartName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DepartName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblDepartment] SET [DepartName] = @DepartName WHERE (([DepartID] = "& _ 
                "@Original_DepartID) AND ((@IsNull_DepartName = 1 AND [DepartName] IS NULL) OR (["& _ 
                "DepartName] = @Original_DepartName)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT DepartID, DepartName FROM tblDepa"& _ 
                "rtment WHERE (DepartID = @DepartID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DepartName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DepartName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DepartID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "DepartID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DepartName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DepartName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DepartName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DepartName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DepartID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "DepartID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DepartID, DepartName FROM dbo.tblDepartment"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSEndofDayRun.tblDepartmentDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSEndofDayRun.tblDepartmentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSEndofDayRun.tblDepartmentDataTable = New DSEndofDayRun.tblDepartmentDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSEndofDayRun.tblDepartmentDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSEndofDayRun) As Integer
            Return Me.Adapter.Update(dataSet, "tblDepartment")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_DepartID As Decimal, ByVal Original_DepartName As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_DepartID,Decimal)
            If (Original_DepartName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DepartName,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DepartName As String) As Integer
            If (DepartName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DepartName,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DepartName As String, ByVal Original_DepartID As Decimal, ByVal Original_DepartName As String, ByVal DepartID As Decimal) As Integer
            If (DepartName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DepartName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_DepartID,Decimal)
            If (Original_DepartName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_DepartName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DepartID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DepartName As String, ByVal Original_DepartID As Decimal, ByVal Original_DepartName As String) As Integer
            Return Me.Update(DepartName, Original_DepartID, Original_DepartName, Original_DepartID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VRunEndOfPeriodMonthTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VRunEndOfPeriodMonth"
            tableMapping.ColumnMappings.Add("smonth", "smonth")
            tableMapping.ColumnMappings.Add("ItemID", "ItemID")
            tableMapping.ColumnMappings.Add("ItemName", "ItemName")
            tableMapping.ColumnMappings.Add("CateID", "CateID")
            tableMapping.ColumnMappings.Add("UsedQty", "UsedQty")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     TOP (100) PERCENT CONVERT(varchar(2), t.M) + '/' + CONVERT(varchar(4),"& _ 
                " t.Y) AS smonth, SUM(t.RequestQty) AS RequestQty, SUM(t.ReceivedQty) AS Received"& _ 
                "Qty, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SUM(t.UseQty) AS UsedQty, t.ItemID, t.DepartID, tbl"& _ 
                "Item.ItemName, tblItem.CateID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT     RunEndOfDayDate, ItemNam"& _ 
                "e, RequestQty, ReceivedQty, UseQty, ItemID, DepartName, Barcode, DepartID, Begin"& _ 
                "Balance, EndBalance, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              YEAR(RunEnd"& _ 
                "OfDayDate) AS Y, MONTH(RunEndOfDayDate) AS M, DAY(RunEndOfDayDate) AS D"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "                FROM          VRunEndofDayResult"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE  "& _ 
                "    (CAST(CONVERT(VARCHAR(10), RunEndOfDayDate, 1) AS DateTime) BETWEEN CAST(CON"& _ 
                "VERT(VARCHAR(10), CAST(@fromDate AS DATETIME), 1) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            "& _ 
                "                  AS Datetime) AND CAST(CONVERT(VARCHAR(10), CAST(@toDate AS DAT"& _ 
                "ETIME), 1) AS Datetime))) AS t INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      tblItem ON t.It"& _ 
                "emID = tblItem.ItemID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY t.Y, t.M, t.ItemID, t.DepartID, tblItem.ItemName"& _ 
                ", tblItem.CateID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY  tblItem.ItemName"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fromDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@toDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     TOP (100) PERCENT CONVERT(varchar(2), t.M) + '/' + CONVERT(varchar(4),"& _ 
                " t.Y) AS smonth, SUM(t.RequestQty) AS RequestQty, SUM(t.ReceivedQty) AS Received"& _ 
                "Qty, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SUM(t.UseQty) AS UsedQty, t.ItemID, t.DepartID, dbo"& _ 
                ".tblItem.ItemName, dbo.tblItem.CateID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT     RunEndOfDayDate,"& _ 
                " ItemName, RequestQty, ReceivedQty, UseQty, ItemID, DepartName, Barcode, DepartI"& _ 
                "D, BeginBalance, EndBalance, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              YEA"& _ 
                "R(RunEndOfDayDate) AS Y, MONTH(RunEndOfDayDate) AS M, DAY(RunEndOfDayDate) AS D"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FROM          dbo.VRunEndofDayResult"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "     WHERE      ((CAST(CONVERT(VARCHAR(10), RunEndOfDayDate, 1) AS DateTime) BET"& _ 
                "WEEN CAST(CONVERT(VARCHAR(10), CAST(@fromDate AS DATETIME), 1) AS Datetime) AND "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      CAST(CONVERT(VARCHAR(10), CAST(@toDate AS DATETIME), 1) "& _ 
                "AS Datetime)) AND CateID=@CateID AND DepartID=@DepartID)) AS t INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                 dbo.tblItem ON t.ItemID = dbo.tblItem.ItemID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY t.Y, t.M"& _ 
                ", t.ItemID, t.DepartID, dbo.tblItem.ItemName, dbo.tblItem.CateID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY  dbo."& _ 
                "tblItem.ItemName"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fromDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@toDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CateID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DepartID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     TOP (100) PERCENT CONVERT(varchar(2), t.M) + '/' + CONVERT(varchar(4),"& _ 
                " t.Y) AS smonth, SUM(t.RequestQty) AS RequestQty, SUM(t.ReceivedQty) AS Received"& _ 
                "Qty, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SUM(t.UseQty) AS UsedQty, t.ItemID, t.DepartID, dbo"& _ 
                ".tblItem.ItemName, dbo.tblItem.CateID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT     RunEndOfDayDate,"& _ 
                " ItemName, RequestQty, ReceivedQty, UseQty, ItemID, DepartName, Barcode, DepartI"& _ 
                "D, BeginBalance, EndBalance, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              YEA"& _ 
                "R(RunEndOfDayDate) AS Y, MONTH(RunEndOfDayDate) AS M, DAY(RunEndOfDayDate) AS D"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FROM          dbo.VRunEndofDayResult"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "     WHERE      ((CAST(CONVERT(VARCHAR(10), RunEndOfDayDate, 1) AS DateTime) BET"& _ 
                "WEEN CAST(CONVERT(VARCHAR(10), CAST(@fromDate AS DATETIME), 1) AS Datetime) AND "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      CAST(CONVERT(VARCHAR(10), CAST(@toDate AS DATETIME), 1) "& _ 
                "AS Datetime)) AND ItemID=@ItemID AND DepartID=@DepartID)) AS t INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                 dbo.tblItem ON t.ItemID = dbo.tblItem.ItemID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY t.Y, t.M"& _ 
                ", t.ItemID, t.DepartID, dbo.tblItem.ItemName, dbo.tblItem.CateID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY dbo.t"& _ 
                "blItem.ItemName"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fromDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@toDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DepartID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT      CONVERT(varchar(2), t.M) + '/' + CONVERT(varchar(4), t.Y) AS smonth, "& _ 
                "SUM(t.RequestQty) AS RequestQty, SUM(t.ReceivedQty) AS ReceivedQty, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "            SUM(t.UseQty) AS UsedQty, t.ItemID, t.DepartID, dbo.tblItem.ItemName"& _ 
                ", dbo.tblItem.CateID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT     RunEndOfDayDate, ItemName, Reques"& _ 
                "tQty, ReceivedQty, UseQty, ItemID, DepartName, Barcode, DepartID, BeginBalance, "& _ 
                "EndBalance, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              YEAR(RunEndOfDayDate"& _ 
                ") AS Y, MONTH(RunEndOfDayDate) AS M, DAY(RunEndOfDayDate) AS D"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "       FROM          dbo.VRunEndofDayResult"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE      ("& _ 
                "(CAST(CONVERT(VARCHAR(10), RunEndOfDayDate, 1) AS DateTime) BETWEEN CAST(CONVERT"& _ 
                "(VARCHAR(10), CAST(@fromDate AS DATETIME), 1) AS Datetime) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "       CAST(CONVERT(VARCHAR(10), CAST(@toDate AS DATETIME), 1) AS Datetime)) AND"& _ 
                " DepartID=@DepartID )) AS t INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      dbo.tblItem ON t.I"& _ 
                "temID = dbo.tblItem.ItemID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY t.Y, t.M, t.ItemID, t.DepartID, dbo.tblItem"& _ 
                ".ItemName, dbo.tblItem.CateID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY dbo.tblItem.ItemName"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fromDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@toDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DepartID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSEndofDayRun.VRunEndOfPeriodMonthDataTable, ByVal fromDate As Date, ByVal toDate As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(fromDate,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(toDate,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal fromDate As Date, ByVal toDate As Date) As DSEndofDayRun.VRunEndOfPeriodMonthDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(fromDate,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(toDate,Date)
            Dim dataTable As DSEndofDayRun.VRunEndOfPeriodMonthDataTable = New DSEndofDayRun.VRunEndOfPeriodMonthDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSEndofDayRun.VRunEndOfPeriodMonthDataTable, ByVal fromDate As Date, ByVal toDate As Date, ByVal CateID As Global.System.Nullable(Of Integer), ByVal DepartID As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(fromDate,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(toDate,Date)
            If (CateID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CateID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(DepartID,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCateIDAndDepartID(ByVal fromDate As Date, ByVal toDate As Date, ByVal CateID As Global.System.Nullable(Of Integer), ByVal DepartID As Integer) As DSEndofDayRun.VRunEndOfPeriodMonthDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(fromDate,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(toDate,Date)
            If (CateID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CateID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(DepartID,Integer)
            Dim dataTable As DSEndofDayRun.VRunEndOfPeriodMonthDataTable = New DSEndofDayRun.VRunEndOfPeriodMonthDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSEndofDayRun.VRunEndOfPeriodMonthDataTable, ByVal fromDate As Date, ByVal toDate As Date, ByVal ItemID As Global.System.Nullable(Of Integer), ByVal DepartID As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(fromDate,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(toDate,Date)
            If (ItemID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ItemID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(DepartID,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByItemIDAndDepartID(ByVal fromDate As Date, ByVal toDate As Date, ByVal ItemID As Global.System.Nullable(Of Integer), ByVal DepartID As Integer) As DSEndofDayRun.VRunEndOfPeriodMonthDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(fromDate,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(toDate,Date)
            If (ItemID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ItemID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(DepartID,Integer)
            Dim dataTable As DSEndofDayRun.VRunEndOfPeriodMonthDataTable = New DSEndofDayRun.VRunEndOfPeriodMonthDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy2(ByVal dataTable As DSEndofDayRun.VRunEndOfPeriodMonthDataTable, ByVal fromDate As Date, ByVal toDate As Date, ByVal DepartID As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(fromDate,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(toDate,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(DepartID,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDepartID(ByVal fromDate As Date, ByVal toDate As Date, ByVal DepartID As Integer) As DSEndofDayRun.VRunEndOfPeriodMonthDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(fromDate,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(toDate,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(DepartID,Integer)
            Dim dataTable As DSEndofDayRun.VRunEndOfPeriodMonthDataTable = New DSEndofDayRun.VRunEndOfPeriodMonthDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblEndofMonthRunTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblEndofMonthRun"
            tableMapping.ColumnMappings.Add("Date", "Date")
            tableMapping.ColumnMappings.Add("RequestQty", "RequestQty")
            tableMapping.ColumnMappings.Add("ReceivedQty", "ReceivedQty")
            tableMapping.ColumnMappings.Add("UsedQty", "UsedQty")
            tableMapping.ColumnMappings.Add("BeginBalance", "BeginBalance")
            tableMapping.ColumnMappings.Add("EndBalance", "EndBalance")
            tableMapping.ColumnMappings.Add("DepartID", "DepartID")
            tableMapping.ColumnMappings.Add("ItemID", "ItemID")
            tableMapping.ColumnMappings.Add("ItemName", "ItemName")
            tableMapping.ColumnMappings.Add("Barcode", "Barcode")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Date, RequestQty, ReceivedQty, UsedQty, BeginBalance, EndBalance, Depa"& _ 
                "rtID, ItemID, ItemName, Barcode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         tblEndofMonthRun"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSEndofDayRun.tblEndofMonthRunDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSEndofDayRun.tblEndofMonthRunDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSEndofDayRun.tblEndofMonthRunDataTable = New DSEndofDayRun.tblEndofMonthRunDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VRunEndofDayResultV1OPTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VRunEndofDayResultV1OPT"
            tableMapping.ColumnMappings.Add("RunEndOfDayDate", "RunEndOfDayDate")
            tableMapping.ColumnMappings.Add("ItemName", "ItemName")
            tableMapping.ColumnMappings.Add("RequestQty", "RequestQty")
            tableMapping.ColumnMappings.Add("ReceivedQty", "ReceivedQty")
            tableMapping.ColumnMappings.Add("UseQty", "UseQty")
            tableMapping.ColumnMappings.Add("ItemID", "ItemID")
            tableMapping.ColumnMappings.Add("DepartName", "DepartName")
            tableMapping.ColumnMappings.Add("Barcode", "Barcode")
            tableMapping.ColumnMappings.Add("DepartID", "DepartID")
            tableMapping.ColumnMappings.Add("BeginBalance", "BeginBalance")
            tableMapping.ColumnMappings.Add("EndBalance", "EndBalance")
            tableMapping.ColumnMappings.Add("CateID", "CateID")
            tableMapping.ColumnMappings.Add("CateName", "CateName")
            tableMapping.ColumnMappings.Add("ItemUnitName", "ItemUnitName")
            tableMapping.ColumnMappings.Add("ContainerName", "ContainerName")
            tableMapping.ColumnMappings.Add("UnitPrice", "UnitPrice")
            tableMapping.ColumnMappings.Add("ItemPrice", "ItemPrice")
            tableMapping.ColumnMappings.Add("ItemQTY", "ItemQTY")
            tableMapping.ColumnMappings.Add("SubTotalReal", "SubTotalReal")
            tableMapping.ColumnMappings.Add("SubTotalDolar", "SubTotalDolar")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        RunEndOfDayDate, ItemName, RequestQty, ReceivedQty, UseQty, ItemID,"& _ 
                " DepartName, Barcode, DepartID, BeginBalance, EndBalance, CateID, CateName, Item"& _ 
                "UnitName, ContainerName, UnitPrice, ItemPrice, ItemQTY, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "   SubTotalReal, SubTotalDolar"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VRunEndofDayResultV1OPT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSEndofDayRun.VRunEndofDayResultV1OPTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSEndofDayRun.VRunEndofDayResultV1OPTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSEndofDayRun.VRunEndofDayResultV1OPTDataTable = New DSEndofDayRun.VRunEndofDayResultV1OPTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _tblDepartmentTableAdapter As tblDepartmentTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblDepartmentTableAdapter() As tblDepartmentTableAdapter
            Get
                Return Me._tblDepartmentTableAdapter
            End Get
            Set
                Me._tblDepartmentTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._tblDepartmentTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblDepartmentTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblDepartmentTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._tblDepartmentTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DSEndofDayRun, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tblDepartmentTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblDepartment.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblDepartmentTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DSEndofDayRun, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tblDepartmentTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblDepartment.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblDepartmentTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DSEndofDayRun, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tblDepartmentTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblDepartment.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblDepartmentTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DSEndofDayRun) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._tblDepartmentTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblDepartmentTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._tblDepartmentTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblDepartmentTableAdapter, Me._tblDepartmentTableAdapter.Connection)
                    Me._tblDepartmentTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblDepartmentTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblDepartmentTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblDepartmentTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblDepartmentTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._tblDepartmentTableAdapter) Is Nothing) Then
                    Me._tblDepartmentTableAdapter.Connection = CType(revertConnections(Me._tblDepartmentTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblDepartmentTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
