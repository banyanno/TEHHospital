'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="TakeoDB")>  _
Partial Public Class DataClassesUserManagmentDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertEOD_ACCESS_RIGHT(instance As EOD_ACCESS_RIGHT)
    End Sub
  Partial Private Sub UpdateEOD_ACCESS_RIGHT(instance As EOD_ACCESS_RIGHT)
    End Sub
  Partial Private Sub DeleteEOD_ACCESS_RIGHT(instance As EOD_ACCESS_RIGHT)
    End Sub
  Partial Private Sub InsertDepartment_Add_User(instance As Department_Add_User)
    End Sub
  Partial Private Sub UpdateDepartment_Add_User(instance As Department_Add_User)
    End Sub
  Partial Private Sub DeleteDepartment_Add_User(instance As Department_Add_User)
    End Sub
  Partial Private Sub InsertDeppartment_Permistion_Menu(instance As Deppartment_Permistion_Menu)
    End Sub
  Partial Private Sub UpdateDeppartment_Permistion_Menu(instance As Deppartment_Permistion_Menu)
    End Sub
  Partial Private Sub DeleteDeppartment_Permistion_Menu(instance As Deppartment_Permistion_Menu)
    End Sub
  Partial Private Sub InsertMenu_INVENTORY(instance As Menu_INVENTORY)
    End Sub
  Partial Private Sub UpdateMenu_INVENTORY(instance As Menu_INVENTORY)
    End Sub
  Partial Private Sub DeleteMenu_INVENTORY(instance As Menu_INVENTORY)
    End Sub
  Partial Private Sub InsertDepartment_User(instance As Department_User)
    End Sub
  Partial Private Sub UpdateDepartment_User(instance As Department_User)
    End Sub
  Partial Private Sub DeleteDepartment_User(instance As Department_User)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property EOD_ACCESS_RIGHTs() As System.Data.Linq.Table(Of EOD_ACCESS_RIGHT)
		Get
			Return Me.GetTable(Of EOD_ACCESS_RIGHT)
		End Get
	End Property
	
	Public ReadOnly Property Department_Add_Users() As System.Data.Linq.Table(Of Department_Add_User)
		Get
			Return Me.GetTable(Of Department_Add_User)
		End Get
	End Property
	
	Public ReadOnly Property Deppartment_Permistion_Menus() As System.Data.Linq.Table(Of Deppartment_Permistion_Menu)
		Get
			Return Me.GetTable(Of Deppartment_Permistion_Menu)
		End Get
	End Property
	
	Public ReadOnly Property Menu_INVENTORies() As System.Data.Linq.Table(Of Menu_INVENTORY)
		Get
			Return Me.GetTable(Of Menu_INVENTORY)
		End Get
	End Property
	
	Public ReadOnly Property Department_Users() As System.Data.Linq.Table(Of Department_User)
		Get
			Return Me.GetTable(Of Department_User)
		End Get
	End Property
End Class

<Table(Name:="dbo.EOD_ACCESS_RIGHTS")>  _
Partial Public Class EOD_ACCESS_RIGHT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Decimal
	
	Private _UserNo As System.Nullable(Of Integer)
	
	Private _EOD_Right_DepartID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Decimal)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnUserNoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserNoChanged()
    End Sub
    Partial Private Sub OnEOD_Right_DepartIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEOD_Right_DepartIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Decimal
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserNo", DbType:="Int")>  _
	Public Property UserNo() As System.Nullable(Of Integer)
		Get
			Return Me._UserNo
		End Get
		Set
			If (Me._UserNo.Equals(value) = false) Then
				Me.OnUserNoChanging(value)
				Me.SendPropertyChanging
				Me._UserNo = value
				Me.SendPropertyChanged("UserNo")
				Me.OnUserNoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EOD_Right_DepartID", DbType:="Int")>  _
	Public Property EOD_Right_DepartID() As System.Nullable(Of Integer)
		Get
			Return Me._EOD_Right_DepartID
		End Get
		Set
			If (Me._EOD_Right_DepartID.Equals(value) = false) Then
				Me.OnEOD_Right_DepartIDChanging(value)
				Me.SendPropertyChanging
				Me._EOD_Right_DepartID = value
				Me.SendPropertyChanged("EOD_Right_DepartID")
				Me.OnEOD_Right_DepartIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Department_Add_User")>  _
Partial Public Class Department_Add_User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GUNo As Decimal
	
	Private _GroupNo As System.Nullable(Of Decimal)
	
	Private _UserNo As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGUNoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnGUNoChanged()
    End Sub
    Partial Private Sub OnGroupNoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnGroupNoChanged()
    End Sub
    Partial Private Sub OnUserNoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUserNoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_GUNo", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property GUNo() As Decimal
		Get
			Return Me._GUNo
		End Get
		Set
			If ((Me._GUNo = value)  _
						= false) Then
				Me.OnGUNoChanging(value)
				Me.SendPropertyChanging
				Me._GUNo = value
				Me.SendPropertyChanged("GUNo")
				Me.OnGUNoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_GroupNo", DbType:="Decimal(18,0)")>  _
	Public Property GroupNo() As System.Nullable(Of Decimal)
		Get
			Return Me._GroupNo
		End Get
		Set
			If (Me._GroupNo.Equals(value) = false) Then
				Me.OnGroupNoChanging(value)
				Me.SendPropertyChanging
				Me._GroupNo = value
				Me.SendPropertyChanged("GroupNo")
				Me.OnGroupNoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserNo", DbType:="Decimal(18,0)")>  _
	Public Property UserNo() As System.Nullable(Of Decimal)
		Get
			Return Me._UserNo
		End Get
		Set
			If (Me._UserNo.Equals(value) = false) Then
				Me.OnUserNoChanging(value)
				Me.SendPropertyChanging
				Me._UserNo = value
				Me.SendPropertyChanged("UserNo")
				Me.OnUserNoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Deppartment_Permistion_Menu")>  _
Partial Public Class Deppartment_Permistion_Menu
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GroupID As Integer
	
	Private _GroupNo As System.Nullable(Of Integer)
	
	Private _MenuNo As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    Partial Private Sub OnGroupNoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGroupNoChanged()
    End Sub
    Partial Private Sub OnMenuNoChanging(value As String)
    End Sub
    Partial Private Sub OnMenuNoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_GroupID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property GroupID() As Integer
		Get
			Return Me._GroupID
		End Get
		Set
			If ((Me._GroupID = value)  _
						= false) Then
				Me.OnGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupID = value
				Me.SendPropertyChanged("GroupID")
				Me.OnGroupIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_GroupNo", DbType:="Int")>  _
	Public Property GroupNo() As System.Nullable(Of Integer)
		Get
			Return Me._GroupNo
		End Get
		Set
			If (Me._GroupNo.Equals(value) = false) Then
				Me.OnGroupNoChanging(value)
				Me.SendPropertyChanging
				Me._GroupNo = value
				Me.SendPropertyChanged("GroupNo")
				Me.OnGroupNoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MenuNo", DbType:="VarChar(50)")>  _
	Public Property MenuNo() As String
		Get
			Return Me._MenuNo
		End Get
		Set
			If (String.Equals(Me._MenuNo, value) = false) Then
				Me.OnMenuNoChanging(value)
				Me.SendPropertyChanging
				Me._MenuNo = value
				Me.SendPropertyChanged("MenuNo")
				Me.OnMenuNoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Menu_INVENTORY")>  _
Partial Public Class Menu_INVENTORY
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MenuNo As Integer
	
	Private _MenuKey As String
	
	Private _MenuDisplay As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMenuNoChanging(value As Integer)
    End Sub
    Partial Private Sub OnMenuNoChanged()
    End Sub
    Partial Private Sub OnMenuKeyChanging(value As String)
    End Sub
    Partial Private Sub OnMenuKeyChanged()
    End Sub
    Partial Private Sub OnMenuDisplayChanging(value As String)
    End Sub
    Partial Private Sub OnMenuDisplayChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_MenuNo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property MenuNo() As Integer
		Get
			Return Me._MenuNo
		End Get
		Set
			If ((Me._MenuNo = value)  _
						= false) Then
				Me.OnMenuNoChanging(value)
				Me.SendPropertyChanging
				Me._MenuNo = value
				Me.SendPropertyChanged("MenuNo")
				Me.OnMenuNoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MenuKey", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MenuKey() As String
		Get
			Return Me._MenuKey
		End Get
		Set
			If (String.Equals(Me._MenuKey, value) = false) Then
				Me.OnMenuKeyChanging(value)
				Me.SendPropertyChanging
				Me._MenuKey = value
				Me.SendPropertyChanged("MenuKey")
				Me.OnMenuKeyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MenuDisplay", DbType:="VarChar(50)")>  _
	Public Property MenuDisplay() As String
		Get
			Return Me._MenuDisplay
		End Get
		Set
			If (String.Equals(Me._MenuDisplay, value) = false) Then
				Me.OnMenuDisplayChanging(value)
				Me.SendPropertyChanging
				Me._MenuDisplay = value
				Me.SendPropertyChanged("MenuDisplay")
				Me.OnMenuDisplayChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Department_User")>  _
Partial Public Class Department_User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As Integer
	
	Private _EmployeeName As String
	
	Private _UserName As String
	
	Private _Password As System.Data.Linq.Binary
	
	Private _isActive As System.Nullable(Of Char)
	
	Private _isBadLogIn As System.Nullable(Of Char)
	
	Private _GroupNo As System.Nullable(Of Integer)
	
	Private _isHospitalManager As System.Nullable(Of Boolean)
	
	Private _isMainStockManager As System.Nullable(Of Boolean)
	
	Private _NewPassword As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnEmployeeNameChanging(value As String)
    End Sub
    Partial Private Sub OnEmployeeNameChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnisActiveChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnisActiveChanged()
    End Sub
    Partial Private Sub OnisBadLogInChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnisBadLogInChanged()
    End Sub
    Partial Private Sub OnGroupNoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGroupNoChanged()
    End Sub
    Partial Private Sub OnisHospitalManagerChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisHospitalManagerChanged()
    End Sub
    Partial Private Sub OnisMainStockManagerChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisMainStockManagerChanged()
    End Sub
    Partial Private Sub OnNewPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnNewPasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_UserID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EmployeeName", DbType:="VarChar(80)")>  _
	Public Property EmployeeName() As String
		Get
			Return Me._EmployeeName
		End Get
		Set
			If (String.Equals(Me._EmployeeName, value) = false) Then
				Me.OnEmployeeNameChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeName = value
				Me.SendPropertyChanged("EmployeeName")
				Me.OnEmployeeNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Password", DbType:="VarBinary(250)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Password() As System.Data.Linq.Binary
		Get
			Return Me._Password
		End Get
		Set
			If (Object.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_isActive", DbType:="Char(1)")>  _
	Public Property isActive() As System.Nullable(Of Char)
		Get
			Return Me._isActive
		End Get
		Set
			If (Me._isActive.Equals(value) = false) Then
				Me.OnisActiveChanging(value)
				Me.SendPropertyChanging
				Me._isActive = value
				Me.SendPropertyChanged("isActive")
				Me.OnisActiveChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_isBadLogIn", DbType:="Char(1)")>  _
	Public Property isBadLogIn() As System.Nullable(Of Char)
		Get
			Return Me._isBadLogIn
		End Get
		Set
			If (Me._isBadLogIn.Equals(value) = false) Then
				Me.OnisBadLogInChanging(value)
				Me.SendPropertyChanging
				Me._isBadLogIn = value
				Me.SendPropertyChanged("isBadLogIn")
				Me.OnisBadLogInChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_GroupNo", DbType:="Int")>  _
	Public Property GroupNo() As System.Nullable(Of Integer)
		Get
			Return Me._GroupNo
		End Get
		Set
			If (Me._GroupNo.Equals(value) = false) Then
				Me.OnGroupNoChanging(value)
				Me.SendPropertyChanging
				Me._GroupNo = value
				Me.SendPropertyChanged("GroupNo")
				Me.OnGroupNoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_isHospitalManager", DbType:="Bit")>  _
	Public Property isHospitalManager() As System.Nullable(Of Boolean)
		Get
			Return Me._isHospitalManager
		End Get
		Set
			If (Me._isHospitalManager.Equals(value) = false) Then
				Me.OnisHospitalManagerChanging(value)
				Me.SendPropertyChanging
				Me._isHospitalManager = value
				Me.SendPropertyChanged("isHospitalManager")
				Me.OnisHospitalManagerChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_isMainStockManager", DbType:="Bit")>  _
	Public Property isMainStockManager() As System.Nullable(Of Boolean)
		Get
			Return Me._isMainStockManager
		End Get
		Set
			If (Me._isMainStockManager.Equals(value) = false) Then
				Me.OnisMainStockManagerChanging(value)
				Me.SendPropertyChanging
				Me._isMainStockManager = value
				Me.SendPropertyChanged("isMainStockManager")
				Me.OnisMainStockManagerChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_NewPassword", DbType:="VarChar(250)")>  _
	Public Property NewPassword() As String
		Get
			Return Me._NewPassword
		End Get
		Set
			If (String.Equals(Me._NewPassword, value) = false) Then
				Me.OnNewPasswordChanging(value)
				Me.SendPropertyChanging
				Me._NewPassword = value
				Me.SendPropertyChanged("NewPassword")
				Me.OnNewPasswordChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
