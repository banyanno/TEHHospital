'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5485
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSRptRequestHistoryStatusTrace"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSRptRequestHistoryStatusTrace
    Inherits Global.System.Data.DataSet
    
    Private tableVRptRequestHistoryStatuTrace As VRptRequestHistoryStatuTraceDataTable
    
    Private tableVRequestHistoryStatusTraceMaster As VRequestHistoryStatusTraceMasterDataTable
    
    Private tableVRequestHistoryStatusTraceDetail As VRequestHistoryStatusTraceDetailDataTable
    
    Private tableVIncomingRequestHistoryStatusTraceMaster As VIncomingRequestHistoryStatusTraceMasterDataTable
    
    Private relationVIncomingRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail As Global.System.Data.DataRelation
    
    Private relationVRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VRptRequestHistoryStatuTrace")) Is Nothing) Then
                MyBase.Tables.Add(New VRptRequestHistoryStatuTraceDataTable(ds.Tables("VRptRequestHistoryStatuTrace")))
            End If
            If (Not (ds.Tables("VRequestHistoryStatusTraceMaster")) Is Nothing) Then
                MyBase.Tables.Add(New VRequestHistoryStatusTraceMasterDataTable(ds.Tables("VRequestHistoryStatusTraceMaster")))
            End If
            If (Not (ds.Tables("VRequestHistoryStatusTraceDetail")) Is Nothing) Then
                MyBase.Tables.Add(New VRequestHistoryStatusTraceDetailDataTable(ds.Tables("VRequestHistoryStatusTraceDetail")))
            End If
            If (Not (ds.Tables("VIncomingRequestHistoryStatusTraceMaster")) Is Nothing) Then
                MyBase.Tables.Add(New VIncomingRequestHistoryStatusTraceMasterDataTable(ds.Tables("VIncomingRequestHistoryStatusTraceMaster")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VRptRequestHistoryStatuTrace() As VRptRequestHistoryStatuTraceDataTable
        Get
            Return Me.tableVRptRequestHistoryStatuTrace
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VRequestHistoryStatusTraceMaster() As VRequestHistoryStatusTraceMasterDataTable
        Get
            Return Me.tableVRequestHistoryStatusTraceMaster
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VRequestHistoryStatusTraceDetail() As VRequestHistoryStatusTraceDetailDataTable
        Get
            Return Me.tableVRequestHistoryStatusTraceDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIncomingRequestHistoryStatusTraceMaster() As VIncomingRequestHistoryStatusTraceMasterDataTable
        Get
            Return Me.tableVIncomingRequestHistoryStatusTraceMaster
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSRptRequestHistoryStatusTrace = CType(MyBase.Clone,DSRptRequestHistoryStatusTrace)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VRptRequestHistoryStatuTrace")) Is Nothing) Then
                MyBase.Tables.Add(New VRptRequestHistoryStatuTraceDataTable(ds.Tables("VRptRequestHistoryStatuTrace")))
            End If
            If (Not (ds.Tables("VRequestHistoryStatusTraceMaster")) Is Nothing) Then
                MyBase.Tables.Add(New VRequestHistoryStatusTraceMasterDataTable(ds.Tables("VRequestHistoryStatusTraceMaster")))
            End If
            If (Not (ds.Tables("VRequestHistoryStatusTraceDetail")) Is Nothing) Then
                MyBase.Tables.Add(New VRequestHistoryStatusTraceDetailDataTable(ds.Tables("VRequestHistoryStatusTraceDetail")))
            End If
            If (Not (ds.Tables("VIncomingRequestHistoryStatusTraceMaster")) Is Nothing) Then
                MyBase.Tables.Add(New VIncomingRequestHistoryStatusTraceMasterDataTable(ds.Tables("VIncomingRequestHistoryStatusTraceMaster")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVRptRequestHistoryStatuTrace = CType(MyBase.Tables("VRptRequestHistoryStatuTrace"),VRptRequestHistoryStatuTraceDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVRptRequestHistoryStatuTrace) Is Nothing) Then
                Me.tableVRptRequestHistoryStatuTrace.InitVars
            End If
        End If
        Me.tableVRequestHistoryStatusTraceMaster = CType(MyBase.Tables("VRequestHistoryStatusTraceMaster"),VRequestHistoryStatusTraceMasterDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVRequestHistoryStatusTraceMaster) Is Nothing) Then
                Me.tableVRequestHistoryStatusTraceMaster.InitVars
            End If
        End If
        Me.tableVRequestHistoryStatusTraceDetail = CType(MyBase.Tables("VRequestHistoryStatusTraceDetail"),VRequestHistoryStatusTraceDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVRequestHistoryStatusTraceDetail) Is Nothing) Then
                Me.tableVRequestHistoryStatusTraceDetail.InitVars
            End If
        End If
        Me.tableVIncomingRequestHistoryStatusTraceMaster = CType(MyBase.Tables("VIncomingRequestHistoryStatusTraceMaster"),VIncomingRequestHistoryStatusTraceMasterDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIncomingRequestHistoryStatusTraceMaster) Is Nothing) Then
                Me.tableVIncomingRequestHistoryStatusTraceMaster.InitVars
            End If
        End If
        Me.relationVIncomingRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail = Me.Relations("VIncomingRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail")
        Me.relationVRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail = Me.Relations("VRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSRptRequestHistoryStatusTrace"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSRptRequestHistoryStatusTrace.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVRptRequestHistoryStatuTrace = New VRptRequestHistoryStatuTraceDataTable
        MyBase.Tables.Add(Me.tableVRptRequestHistoryStatuTrace)
        Me.tableVRequestHistoryStatusTraceMaster = New VRequestHistoryStatusTraceMasterDataTable
        MyBase.Tables.Add(Me.tableVRequestHistoryStatusTraceMaster)
        Me.tableVRequestHistoryStatusTraceDetail = New VRequestHistoryStatusTraceDetailDataTable
        MyBase.Tables.Add(Me.tableVRequestHistoryStatusTraceDetail)
        Me.tableVIncomingRequestHistoryStatusTraceMaster = New VIncomingRequestHistoryStatusTraceMasterDataTable
        MyBase.Tables.Add(Me.tableVIncomingRequestHistoryStatusTraceMaster)
        Me.relationVIncomingRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail = New Global.System.Data.DataRelation("VIncomingRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail", New Global.System.Data.DataColumn() {Me.tableVIncomingRequestHistoryStatusTraceMaster.RequestIDColumn}, New Global.System.Data.DataColumn() {Me.tableVRequestHistoryStatusTraceDetail.RequestIDColumn}, false)
        Me.Relations.Add(Me.relationVIncomingRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail)
        Me.relationVRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail = New Global.System.Data.DataRelation("VRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail", New Global.System.Data.DataColumn() {Me.tableVRequestHistoryStatusTraceMaster.RequestIDColumn}, New Global.System.Data.DataColumn() {Me.tableVRequestHistoryStatusTraceDetail.RequestIDColumn}, false)
        Me.Relations.Add(Me.relationVRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVRptRequestHistoryStatuTrace() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVRequestHistoryStatusTraceMaster() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVRequestHistoryStatusTraceDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIncomingRequestHistoryStatusTraceMaster() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSRptRequestHistoryStatusTrace = New DSRptRequestHistoryStatusTrace
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VRptRequestHistoryStatuTraceRowChangeEventHandler(ByVal sender As Object, ByVal e As VRptRequestHistoryStatuTraceRowChangeEvent)
    
    Public Delegate Sub VRequestHistoryStatusTraceMasterRowChangeEventHandler(ByVal sender As Object, ByVal e As VRequestHistoryStatusTraceMasterRowChangeEvent)
    
    Public Delegate Sub VRequestHistoryStatusTraceDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As VRequestHistoryStatusTraceDetailRowChangeEvent)
    
    Public Delegate Sub VIncomingRequestHistoryStatusTraceMasterRowChangeEventHandler(ByVal sender As Object, ByVal e As VIncomingRequestHistoryStatusTraceMasterRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VRptRequestHistoryStatuTraceDataTable
        Inherits Global.System.Data.TypedTableBase(Of VRptRequestHistoryStatuTraceRow)
        
        Private columnRequestID As Global.System.Data.DataColumn
        
        Private columnRequestOrderNumber As Global.System.Data.DataColumn
        
        Private columnRequestFromDepartID As Global.System.Data.DataColumn
        
        Private columnRequestDate As Global.System.Data.DataColumn
        
        Private columnRequestDescription As Global.System.Data.DataColumn
        
        Private columnRequestToDepartID As Global.System.Data.DataColumn
        
        Private columnItemID As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnResponseQuantity As Global.System.Data.DataColumn
        
        Private columnPOStatusID As Global.System.Data.DataColumn
        
        Private columnUpdateRequestStatusDate As Global.System.Data.DataColumn
        
        Private columnDepartName As Global.System.Data.DataColumn
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnCateName As Global.System.Data.DataColumn
        
        Private columnUserRequestName As Global.System.Data.DataColumn
        
        Private columnUserApproveName As Global.System.Data.DataColumn
        
        Private columnCurrentBalance As Global.System.Data.DataColumn
        
        Private columnReceivedDate As Global.System.Data.DataColumn
        
        Private columnItemUnitName As Global.System.Data.DataColumn
        
        Private columnContainerName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VRptRequestHistoryStatuTrace"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestOrderNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestOrderNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestFromDepartIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestFromDepartID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestToDepartIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestToDepartID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResponseQuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResponseQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POStatusIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOStatusID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UpdateRequestStatusDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpdateRequestStatusDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CateNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCateName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserRequestNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserRequestName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserApproveNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserApproveName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrentBalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrentBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceivedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceivedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemUnitNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemUnitName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContainerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContainerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VRptRequestHistoryStatuTraceRow
            Get
                Return CType(Me.Rows(index),VRptRequestHistoryStatuTraceRow)
            End Get
        End Property
        
        Public Event VRptRequestHistoryStatuTraceRowChanging As VRptRequestHistoryStatuTraceRowChangeEventHandler
        
        Public Event VRptRequestHistoryStatuTraceRowChanged As VRptRequestHistoryStatuTraceRowChangeEventHandler
        
        Public Event VRptRequestHistoryStatuTraceRowDeleting As VRptRequestHistoryStatuTraceRowChangeEventHandler
        
        Public Event VRptRequestHistoryStatuTraceRowDeleted As VRptRequestHistoryStatuTraceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVRptRequestHistoryStatuTraceRow(ByVal row As VRptRequestHistoryStatuTraceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVRptRequestHistoryStatuTraceRow( _
                    ByVal RequestID As Decimal,  _
                    ByVal RequestOrderNumber As String,  _
                    ByVal RequestFromDepartID As Integer,  _
                    ByVal RequestDate As Date,  _
                    ByVal RequestDescription As String,  _
                    ByVal RequestToDepartID As Integer,  _
                    ByVal ItemID As Integer,  _
                    ByVal Quantity As Integer,  _
                    ByVal ResponseQuantity As Long,  _
                    ByVal POStatusID As Integer,  _
                    ByVal UpdateRequestStatusDate As Date,  _
                    ByVal DepartName As String,  _
                    ByVal Barcode As String,  _
                    ByVal ItemName As String,  _
                    ByVal CateName As String,  _
                    ByVal UserRequestName As String,  _
                    ByVal UserApproveName As String,  _
                    ByVal CurrentBalance As Decimal,  _
                    ByVal ReceivedDate As Date,  _
                    ByVal ItemUnitName As String,  _
                    ByVal ContainerName As String) As VRptRequestHistoryStatuTraceRow
            Dim rowVRptRequestHistoryStatuTraceRow As VRptRequestHistoryStatuTraceRow = CType(Me.NewRow,VRptRequestHistoryStatuTraceRow)
            Dim columnValuesArray() As Object = New Object() {RequestID, RequestOrderNumber, RequestFromDepartID, RequestDate, RequestDescription, RequestToDepartID, ItemID, Quantity, ResponseQuantity, POStatusID, UpdateRequestStatusDate, DepartName, Barcode, ItemName, CateName, UserRequestName, UserApproveName, CurrentBalance, ReceivedDate, ItemUnitName, ContainerName}
            rowVRptRequestHistoryStatuTraceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVRptRequestHistoryStatuTraceRow)
            Return rowVRptRequestHistoryStatuTraceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VRptRequestHistoryStatuTraceDataTable = CType(MyBase.Clone,VRptRequestHistoryStatuTraceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VRptRequestHistoryStatuTraceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRequestID = MyBase.Columns("RequestID")
            Me.columnRequestOrderNumber = MyBase.Columns("RequestOrderNumber")
            Me.columnRequestFromDepartID = MyBase.Columns("RequestFromDepartID")
            Me.columnRequestDate = MyBase.Columns("RequestDate")
            Me.columnRequestDescription = MyBase.Columns("RequestDescription")
            Me.columnRequestToDepartID = MyBase.Columns("RequestToDepartID")
            Me.columnItemID = MyBase.Columns("ItemID")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnResponseQuantity = MyBase.Columns("ResponseQuantity")
            Me.columnPOStatusID = MyBase.Columns("POStatusID")
            Me.columnUpdateRequestStatusDate = MyBase.Columns("UpdateRequestStatusDate")
            Me.columnDepartName = MyBase.Columns("DepartName")
            Me.columnBarcode = MyBase.Columns("Barcode")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnCateName = MyBase.Columns("CateName")
            Me.columnUserRequestName = MyBase.Columns("UserRequestName")
            Me.columnUserApproveName = MyBase.Columns("UserApproveName")
            Me.columnCurrentBalance = MyBase.Columns("CurrentBalance")
            Me.columnReceivedDate = MyBase.Columns("ReceivedDate")
            Me.columnItemUnitName = MyBase.Columns("ItemUnitName")
            Me.columnContainerName = MyBase.Columns("ContainerName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRequestID = New Global.System.Data.DataColumn("RequestID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestID)
            Me.columnRequestOrderNumber = New Global.System.Data.DataColumn("RequestOrderNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestOrderNumber)
            Me.columnRequestFromDepartID = New Global.System.Data.DataColumn("RequestFromDepartID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestFromDepartID)
            Me.columnRequestDate = New Global.System.Data.DataColumn("RequestDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestDate)
            Me.columnRequestDescription = New Global.System.Data.DataColumn("RequestDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestDescription)
            Me.columnRequestToDepartID = New Global.System.Data.DataColumn("RequestToDepartID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestToDepartID)
            Me.columnItemID = New Global.System.Data.DataColumn("ItemID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemID)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnResponseQuantity = New Global.System.Data.DataColumn("ResponseQuantity", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResponseQuantity)
            Me.columnPOStatusID = New Global.System.Data.DataColumn("POStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOStatusID)
            Me.columnUpdateRequestStatusDate = New Global.System.Data.DataColumn("UpdateRequestStatusDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpdateRequestStatusDate)
            Me.columnDepartName = New Global.System.Data.DataColumn("DepartName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartName)
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnCateName = New Global.System.Data.DataColumn("CateName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCateName)
            Me.columnUserRequestName = New Global.System.Data.DataColumn("UserRequestName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserRequestName)
            Me.columnUserApproveName = New Global.System.Data.DataColumn("UserApproveName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserApproveName)
            Me.columnCurrentBalance = New Global.System.Data.DataColumn("CurrentBalance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrentBalance)
            Me.columnReceivedDate = New Global.System.Data.DataColumn("ReceivedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceivedDate)
            Me.columnItemUnitName = New Global.System.Data.DataColumn("ItemUnitName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemUnitName)
            Me.columnContainerName = New Global.System.Data.DataColumn("ContainerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContainerName)
            Me.columnRequestID.AllowDBNull = false
            Me.columnRequestOrderNumber.MaxLength = 50
            Me.columnRequestDescription.MaxLength = 250
            Me.columnQuantity.AllowDBNull = false
            Me.columnDepartName.MaxLength = 150
            Me.columnBarcode.MaxLength = 50
            Me.columnItemName.MaxLength = 150
            Me.columnCateName.MaxLength = 150
            Me.columnUserRequestName.MaxLength = 100
            Me.columnUserApproveName.MaxLength = 100
            Me.columnItemUnitName.MaxLength = 150
            Me.columnContainerName.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVRptRequestHistoryStatuTraceRow() As VRptRequestHistoryStatuTraceRow
            Return CType(Me.NewRow,VRptRequestHistoryStatuTraceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VRptRequestHistoryStatuTraceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VRptRequestHistoryStatuTraceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VRptRequestHistoryStatuTraceRowChangedEvent) Is Nothing) Then
                RaiseEvent VRptRequestHistoryStatuTraceRowChanged(Me, New VRptRequestHistoryStatuTraceRowChangeEvent(CType(e.Row,VRptRequestHistoryStatuTraceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VRptRequestHistoryStatuTraceRowChangingEvent) Is Nothing) Then
                RaiseEvent VRptRequestHistoryStatuTraceRowChanging(Me, New VRptRequestHistoryStatuTraceRowChangeEvent(CType(e.Row,VRptRequestHistoryStatuTraceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VRptRequestHistoryStatuTraceRowDeletedEvent) Is Nothing) Then
                RaiseEvent VRptRequestHistoryStatuTraceRowDeleted(Me, New VRptRequestHistoryStatuTraceRowChangeEvent(CType(e.Row,VRptRequestHistoryStatuTraceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VRptRequestHistoryStatuTraceRowDeletingEvent) Is Nothing) Then
                RaiseEvent VRptRequestHistoryStatuTraceRowDeleting(Me, New VRptRequestHistoryStatuTraceRowChangeEvent(CType(e.Row,VRptRequestHistoryStatuTraceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVRptRequestHistoryStatuTraceRow(ByVal row As VRptRequestHistoryStatuTraceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSRptRequestHistoryStatusTrace = New DSRptRequestHistoryStatusTrace
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VRptRequestHistoryStatuTraceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VRequestHistoryStatusTraceMasterDataTable
        Inherits Global.System.Data.TypedTableBase(Of VRequestHistoryStatusTraceMasterRow)
        
        Private columnRequestID As Global.System.Data.DataColumn
        
        Private columnRequestOrderNumber As Global.System.Data.DataColumn
        
        Private columnRequestFromDepartID As Global.System.Data.DataColumn
        
        Private columnRequestToDepartID As Global.System.Data.DataColumn
        
        Private columnPOStatusID As Global.System.Data.DataColumn
        
        Private columnUpdateRequestStatusDate As Global.System.Data.DataColumn
        
        Private columnDepartName As Global.System.Data.DataColumn
        
        Private columnPOStatus As Global.System.Data.DataColumn
        
        Private columnReceivedDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VRequestHistoryStatusTraceMaster"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestOrderNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestOrderNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestFromDepartIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestFromDepartID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestToDepartIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestToDepartID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POStatusIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOStatusID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UpdateRequestStatusDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpdateRequestStatusDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceivedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceivedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VRequestHistoryStatusTraceMasterRow
            Get
                Return CType(Me.Rows(index),VRequestHistoryStatusTraceMasterRow)
            End Get
        End Property
        
        Public Event VRequestHistoryStatusTraceMasterRowChanging As VRequestHistoryStatusTraceMasterRowChangeEventHandler
        
        Public Event VRequestHistoryStatusTraceMasterRowChanged As VRequestHistoryStatusTraceMasterRowChangeEventHandler
        
        Public Event VRequestHistoryStatusTraceMasterRowDeleting As VRequestHistoryStatusTraceMasterRowChangeEventHandler
        
        Public Event VRequestHistoryStatusTraceMasterRowDeleted As VRequestHistoryStatusTraceMasterRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVRequestHistoryStatusTraceMasterRow(ByVal row As VRequestHistoryStatusTraceMasterRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVRequestHistoryStatusTraceMasterRow(ByVal RequestID As Decimal, ByVal RequestOrderNumber As String, ByVal RequestFromDepartID As Integer, ByVal RequestToDepartID As Integer, ByVal POStatusID As Integer, ByVal UpdateRequestStatusDate As Date, ByVal DepartName As String, ByVal POStatus As String, ByVal ReceivedDate As Date) As VRequestHistoryStatusTraceMasterRow
            Dim rowVRequestHistoryStatusTraceMasterRow As VRequestHistoryStatusTraceMasterRow = CType(Me.NewRow,VRequestHistoryStatusTraceMasterRow)
            Dim columnValuesArray() As Object = New Object() {RequestID, RequestOrderNumber, RequestFromDepartID, RequestToDepartID, POStatusID, UpdateRequestStatusDate, DepartName, POStatus, ReceivedDate}
            rowVRequestHistoryStatusTraceMasterRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVRequestHistoryStatusTraceMasterRow)
            Return rowVRequestHistoryStatusTraceMasterRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VRequestHistoryStatusTraceMasterDataTable = CType(MyBase.Clone,VRequestHistoryStatusTraceMasterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VRequestHistoryStatusTraceMasterDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRequestID = MyBase.Columns("RequestID")
            Me.columnRequestOrderNumber = MyBase.Columns("RequestOrderNumber")
            Me.columnRequestFromDepartID = MyBase.Columns("RequestFromDepartID")
            Me.columnRequestToDepartID = MyBase.Columns("RequestToDepartID")
            Me.columnPOStatusID = MyBase.Columns("POStatusID")
            Me.columnUpdateRequestStatusDate = MyBase.Columns("UpdateRequestStatusDate")
            Me.columnDepartName = MyBase.Columns("DepartName")
            Me.columnPOStatus = MyBase.Columns("POStatus")
            Me.columnReceivedDate = MyBase.Columns("ReceivedDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRequestID = New Global.System.Data.DataColumn("RequestID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestID)
            Me.columnRequestOrderNumber = New Global.System.Data.DataColumn("RequestOrderNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestOrderNumber)
            Me.columnRequestFromDepartID = New Global.System.Data.DataColumn("RequestFromDepartID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestFromDepartID)
            Me.columnRequestToDepartID = New Global.System.Data.DataColumn("RequestToDepartID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestToDepartID)
            Me.columnPOStatusID = New Global.System.Data.DataColumn("POStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOStatusID)
            Me.columnUpdateRequestStatusDate = New Global.System.Data.DataColumn("UpdateRequestStatusDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpdateRequestStatusDate)
            Me.columnDepartName = New Global.System.Data.DataColumn("DepartName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartName)
            Me.columnPOStatus = New Global.System.Data.DataColumn("POStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOStatus)
            Me.columnReceivedDate = New Global.System.Data.DataColumn("ReceivedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceivedDate)
            Me.columnRequestID.AllowDBNull = false
            Me.columnRequestOrderNumber.MaxLength = 50
            Me.columnDepartName.MaxLength = 150
            Me.columnPOStatus.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVRequestHistoryStatusTraceMasterRow() As VRequestHistoryStatusTraceMasterRow
            Return CType(Me.NewRow,VRequestHistoryStatusTraceMasterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VRequestHistoryStatusTraceMasterRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VRequestHistoryStatusTraceMasterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VRequestHistoryStatusTraceMasterRowChangedEvent) Is Nothing) Then
                RaiseEvent VRequestHistoryStatusTraceMasterRowChanged(Me, New VRequestHistoryStatusTraceMasterRowChangeEvent(CType(e.Row,VRequestHistoryStatusTraceMasterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VRequestHistoryStatusTraceMasterRowChangingEvent) Is Nothing) Then
                RaiseEvent VRequestHistoryStatusTraceMasterRowChanging(Me, New VRequestHistoryStatusTraceMasterRowChangeEvent(CType(e.Row,VRequestHistoryStatusTraceMasterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VRequestHistoryStatusTraceMasterRowDeletedEvent) Is Nothing) Then
                RaiseEvent VRequestHistoryStatusTraceMasterRowDeleted(Me, New VRequestHistoryStatusTraceMasterRowChangeEvent(CType(e.Row,VRequestHistoryStatusTraceMasterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VRequestHistoryStatusTraceMasterRowDeletingEvent) Is Nothing) Then
                RaiseEvent VRequestHistoryStatusTraceMasterRowDeleting(Me, New VRequestHistoryStatusTraceMasterRowChangeEvent(CType(e.Row,VRequestHistoryStatusTraceMasterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVRequestHistoryStatusTraceMasterRow(ByVal row As VRequestHistoryStatusTraceMasterRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSRptRequestHistoryStatusTrace = New DSRptRequestHistoryStatusTrace
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VRequestHistoryStatusTraceMasterDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VRequestHistoryStatusTraceDetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of VRequestHistoryStatusTraceDetailRow)
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnCateName As Global.System.Data.DataColumn
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        Private columnItemID As Global.System.Data.DataColumn
        
        Private columnRequestID As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnResponseQuantity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VRequestHistoryStatusTraceDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CateNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCateName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResponseQuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResponseQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VRequestHistoryStatusTraceDetailRow
            Get
                Return CType(Me.Rows(index),VRequestHistoryStatusTraceDetailRow)
            End Get
        End Property
        
        Public Event VRequestHistoryStatusTraceDetailRowChanging As VRequestHistoryStatusTraceDetailRowChangeEventHandler
        
        Public Event VRequestHistoryStatusTraceDetailRowChanged As VRequestHistoryStatusTraceDetailRowChangeEventHandler
        
        Public Event VRequestHistoryStatusTraceDetailRowDeleting As VRequestHistoryStatusTraceDetailRowChangeEventHandler
        
        Public Event VRequestHistoryStatusTraceDetailRowDeleted As VRequestHistoryStatusTraceDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVRequestHistoryStatusTraceDetailRow(ByVal row As VRequestHistoryStatusTraceDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVRequestHistoryStatusTraceDetailRow(ByVal ItemName As String, ByVal CateName As String, ByVal Barcode As String, ByVal ItemID As Integer, ByVal parentVIncomingRequestHistoryStatusTraceMasterRowByVIncomingRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail As VIncomingRequestHistoryStatusTraceMasterRow, ByVal Quantity As Integer, ByVal ResponseQuantity As Long) As VRequestHistoryStatusTraceDetailRow
            Dim rowVRequestHistoryStatusTraceDetailRow As VRequestHistoryStatusTraceDetailRow = CType(Me.NewRow,VRequestHistoryStatusTraceDetailRow)
            Dim columnValuesArray() As Object = New Object() {ItemName, CateName, Barcode, ItemID, Nothing, Quantity, ResponseQuantity}
            If (Not (parentVIncomingRequestHistoryStatusTraceMasterRowByVIncomingRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail) Is Nothing) Then
                columnValuesArray(4) = parentVIncomingRequestHistoryStatusTraceMasterRowByVIncomingRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail(0)
            End If
            rowVRequestHistoryStatusTraceDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVRequestHistoryStatusTraceDetailRow)
            Return rowVRequestHistoryStatusTraceDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VRequestHistoryStatusTraceDetailDataTable = CType(MyBase.Clone,VRequestHistoryStatusTraceDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VRequestHistoryStatusTraceDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnCateName = MyBase.Columns("CateName")
            Me.columnBarcode = MyBase.Columns("Barcode")
            Me.columnItemID = MyBase.Columns("ItemID")
            Me.columnRequestID = MyBase.Columns("RequestID")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnResponseQuantity = MyBase.Columns("ResponseQuantity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnCateName = New Global.System.Data.DataColumn("CateName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCateName)
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.columnItemID = New Global.System.Data.DataColumn("ItemID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemID)
            Me.columnRequestID = New Global.System.Data.DataColumn("RequestID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestID)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnResponseQuantity = New Global.System.Data.DataColumn("ResponseQuantity", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResponseQuantity)
            Me.columnItemName.MaxLength = 150
            Me.columnCateName.MaxLength = 150
            Me.columnBarcode.MaxLength = 50
            Me.columnQuantity.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVRequestHistoryStatusTraceDetailRow() As VRequestHistoryStatusTraceDetailRow
            Return CType(Me.NewRow,VRequestHistoryStatusTraceDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VRequestHistoryStatusTraceDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VRequestHistoryStatusTraceDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VRequestHistoryStatusTraceDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent VRequestHistoryStatusTraceDetailRowChanged(Me, New VRequestHistoryStatusTraceDetailRowChangeEvent(CType(e.Row,VRequestHistoryStatusTraceDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VRequestHistoryStatusTraceDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent VRequestHistoryStatusTraceDetailRowChanging(Me, New VRequestHistoryStatusTraceDetailRowChangeEvent(CType(e.Row,VRequestHistoryStatusTraceDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VRequestHistoryStatusTraceDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent VRequestHistoryStatusTraceDetailRowDeleted(Me, New VRequestHistoryStatusTraceDetailRowChangeEvent(CType(e.Row,VRequestHistoryStatusTraceDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VRequestHistoryStatusTraceDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent VRequestHistoryStatusTraceDetailRowDeleting(Me, New VRequestHistoryStatusTraceDetailRowChangeEvent(CType(e.Row,VRequestHistoryStatusTraceDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVRequestHistoryStatusTraceDetailRow(ByVal row As VRequestHistoryStatusTraceDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSRptRequestHistoryStatusTrace = New DSRptRequestHistoryStatusTrace
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VRequestHistoryStatusTraceDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIncomingRequestHistoryStatusTraceMasterDataTable
        Inherits Global.System.Data.TypedTableBase(Of VIncomingRequestHistoryStatusTraceMasterRow)
        
        Private columnRequestID As Global.System.Data.DataColumn
        
        Private columnRequestOrderNumber As Global.System.Data.DataColumn
        
        Private columnRequestFromDepartID As Global.System.Data.DataColumn
        
        Private columnPOStatusID As Global.System.Data.DataColumn
        
        Private columnUpdateRequestStatusDate As Global.System.Data.DataColumn
        
        Private columnPOStatus As Global.System.Data.DataColumn
        
        Private columnRequestToDepartID As Global.System.Data.DataColumn
        
        Private columnDepReqName As Global.System.Data.DataColumn
        
        Private columnReceivedDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIncomingRequestHistoryStatusTraceMaster"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestOrderNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestOrderNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestFromDepartIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestFromDepartID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POStatusIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOStatusID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UpdateRequestStatusDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpdateRequestStatusDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestToDepartIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestToDepartID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepReqNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepReqName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceivedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceivedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIncomingRequestHistoryStatusTraceMasterRow
            Get
                Return CType(Me.Rows(index),VIncomingRequestHistoryStatusTraceMasterRow)
            End Get
        End Property
        
        Public Event VIncomingRequestHistoryStatusTraceMasterRowChanging As VIncomingRequestHistoryStatusTraceMasterRowChangeEventHandler
        
        Public Event VIncomingRequestHistoryStatusTraceMasterRowChanged As VIncomingRequestHistoryStatusTraceMasterRowChangeEventHandler
        
        Public Event VIncomingRequestHistoryStatusTraceMasterRowDeleting As VIncomingRequestHistoryStatusTraceMasterRowChangeEventHandler
        
        Public Event VIncomingRequestHistoryStatusTraceMasterRowDeleted As VIncomingRequestHistoryStatusTraceMasterRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIncomingRequestHistoryStatusTraceMasterRow(ByVal row As VIncomingRequestHistoryStatusTraceMasterRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIncomingRequestHistoryStatusTraceMasterRow(ByVal RequestID As Decimal, ByVal RequestOrderNumber As String, ByVal RequestFromDepartID As Integer, ByVal POStatusID As Integer, ByVal UpdateRequestStatusDate As Date, ByVal POStatus As String, ByVal RequestToDepartID As Integer, ByVal DepReqName As String, ByVal ReceivedDate As Date) As VIncomingRequestHistoryStatusTraceMasterRow
            Dim rowVIncomingRequestHistoryStatusTraceMasterRow As VIncomingRequestHistoryStatusTraceMasterRow = CType(Me.NewRow,VIncomingRequestHistoryStatusTraceMasterRow)
            Dim columnValuesArray() As Object = New Object() {RequestID, RequestOrderNumber, RequestFromDepartID, POStatusID, UpdateRequestStatusDate, POStatus, RequestToDepartID, DepReqName, ReceivedDate}
            rowVIncomingRequestHistoryStatusTraceMasterRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIncomingRequestHistoryStatusTraceMasterRow)
            Return rowVIncomingRequestHistoryStatusTraceMasterRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIncomingRequestHistoryStatusTraceMasterDataTable = CType(MyBase.Clone,VIncomingRequestHistoryStatusTraceMasterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIncomingRequestHistoryStatusTraceMasterDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRequestID = MyBase.Columns("RequestID")
            Me.columnRequestOrderNumber = MyBase.Columns("RequestOrderNumber")
            Me.columnRequestFromDepartID = MyBase.Columns("RequestFromDepartID")
            Me.columnPOStatusID = MyBase.Columns("POStatusID")
            Me.columnUpdateRequestStatusDate = MyBase.Columns("UpdateRequestStatusDate")
            Me.columnPOStatus = MyBase.Columns("POStatus")
            Me.columnRequestToDepartID = MyBase.Columns("RequestToDepartID")
            Me.columnDepReqName = MyBase.Columns("DepReqName")
            Me.columnReceivedDate = MyBase.Columns("ReceivedDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRequestID = New Global.System.Data.DataColumn("RequestID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestID)
            Me.columnRequestOrderNumber = New Global.System.Data.DataColumn("RequestOrderNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestOrderNumber)
            Me.columnRequestFromDepartID = New Global.System.Data.DataColumn("RequestFromDepartID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestFromDepartID)
            Me.columnPOStatusID = New Global.System.Data.DataColumn("POStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOStatusID)
            Me.columnUpdateRequestStatusDate = New Global.System.Data.DataColumn("UpdateRequestStatusDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpdateRequestStatusDate)
            Me.columnPOStatus = New Global.System.Data.DataColumn("POStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOStatus)
            Me.columnRequestToDepartID = New Global.System.Data.DataColumn("RequestToDepartID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestToDepartID)
            Me.columnDepReqName = New Global.System.Data.DataColumn("DepReqName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepReqName)
            Me.columnReceivedDate = New Global.System.Data.DataColumn("ReceivedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceivedDate)
            Me.columnRequestID.AllowDBNull = false
            Me.columnRequestOrderNumber.MaxLength = 50
            Me.columnPOStatus.MaxLength = 100
            Me.columnDepReqName.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIncomingRequestHistoryStatusTraceMasterRow() As VIncomingRequestHistoryStatusTraceMasterRow
            Return CType(Me.NewRow,VIncomingRequestHistoryStatusTraceMasterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIncomingRequestHistoryStatusTraceMasterRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIncomingRequestHistoryStatusTraceMasterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIncomingRequestHistoryStatusTraceMasterRowChangedEvent) Is Nothing) Then
                RaiseEvent VIncomingRequestHistoryStatusTraceMasterRowChanged(Me, New VIncomingRequestHistoryStatusTraceMasterRowChangeEvent(CType(e.Row,VIncomingRequestHistoryStatusTraceMasterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIncomingRequestHistoryStatusTraceMasterRowChangingEvent) Is Nothing) Then
                RaiseEvent VIncomingRequestHistoryStatusTraceMasterRowChanging(Me, New VIncomingRequestHistoryStatusTraceMasterRowChangeEvent(CType(e.Row,VIncomingRequestHistoryStatusTraceMasterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIncomingRequestHistoryStatusTraceMasterRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIncomingRequestHistoryStatusTraceMasterRowDeleted(Me, New VIncomingRequestHistoryStatusTraceMasterRowChangeEvent(CType(e.Row,VIncomingRequestHistoryStatusTraceMasterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIncomingRequestHistoryStatusTraceMasterRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIncomingRequestHistoryStatusTraceMasterRowDeleting(Me, New VIncomingRequestHistoryStatusTraceMasterRowChangeEvent(CType(e.Row,VIncomingRequestHistoryStatusTraceMasterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIncomingRequestHistoryStatusTraceMasterRow(ByVal row As VIncomingRequestHistoryStatusTraceMasterRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSRptRequestHistoryStatusTrace = New DSRptRequestHistoryStatusTrace
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIncomingRequestHistoryStatusTraceMasterDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VRptRequestHistoryStatuTraceRow
        Inherits Global.System.Data.DataRow
        
        Private tableVRptRequestHistoryStatuTrace As VRptRequestHistoryStatuTraceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVRptRequestHistoryStatuTrace = CType(Me.Table,VRptRequestHistoryStatuTraceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestID() As Decimal
            Get
                Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.RequestIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.RequestIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestOrderNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.RequestOrderNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestOrderNumber' in table 'VRptRequestHistoryStatuTrace'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.RequestOrderNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestFromDepartID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.RequestFromDepartIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestFromDepartID' in table 'VRptRequestHistoryStatuTrace"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.RequestFromDepartIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.RequestDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestDate' in table 'VRptRequestHistoryStatuTrace' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.RequestDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.RequestDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestDescription' in table 'VRptRequestHistoryStatuTrace'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.RequestDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestToDepartID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.RequestToDepartIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestToDepartID' in table 'VRptRequestHistoryStatuTrace' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.RequestToDepartIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.ItemIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemID' in table 'VRptRequestHistoryStatuTrace' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.ItemIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Integer
            Get
                Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.QuantityColumn),Integer)
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResponseQuantity() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.ResponseQuantityColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ResponseQuantity' in table 'VRptRequestHistoryStatuTrace' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.ResponseQuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POStatusID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.POStatusIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POStatusID' in table 'VRptRequestHistoryStatuTrace' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.POStatusIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateRequestStatusDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.UpdateRequestStatusDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UpdateRequestStatusDate' in table 'VRptRequestHistoryStatuT"& _ 
                            "race' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.UpdateRequestStatusDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepartName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.DepartNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DepartName' in table 'VRptRequestHistoryStatuTrace' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.DepartNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.BarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'VRptRequestHistoryStatuTrace' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'VRptRequestHistoryStatuTrace' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CateName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.CateNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CateName' in table 'VRptRequestHistoryStatuTrace' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.CateNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserRequestName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.UserRequestNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UserRequestName' in table 'VRptRequestHistoryStatuTrace' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.UserRequestNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserApproveName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.UserApproveNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UserApproveName' in table 'VRptRequestHistoryStatuTrace' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.UserApproveNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrentBalance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.CurrentBalanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrentBalance' in table 'VRptRequestHistoryStatuTrace' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.CurrentBalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceivedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.ReceivedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceivedDate' in table 'VRptRequestHistoryStatuTrace' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.ReceivedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemUnitName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.ItemUnitNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemUnitName' in table 'VRptRequestHistoryStatuTrace' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.ItemUnitNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContainerName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRptRequestHistoryStatuTrace.ContainerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContainerName' in table 'VRptRequestHistoryStatuTrace' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRptRequestHistoryStatuTrace.ContainerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestOrderNumberNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.RequestOrderNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestOrderNumberNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.RequestOrderNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestFromDepartIDNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.RequestFromDepartIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestFromDepartIDNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.RequestFromDepartIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestDateNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.RequestDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestDateNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.RequestDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.RequestDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestDescriptionNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.RequestDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestToDepartIDNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.RequestToDepartIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestToDepartIDNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.RequestToDepartIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemIDNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.ItemIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemIDNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.ItemIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResponseQuantityNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.ResponseQuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResponseQuantityNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.ResponseQuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOStatusIDNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.POStatusIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOStatusIDNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.POStatusIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpdateRequestStatusDateNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.UpdateRequestStatusDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpdateRequestStatusDateNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.UpdateRequestStatusDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartNameNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.DepartNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartNameNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.DepartNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCateNameNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.CateNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCateNameNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.CateNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUserRequestNameNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.UserRequestNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUserRequestNameNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.UserRequestNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUserApproveNameNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.UserApproveNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUserApproveNameNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.UserApproveNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrentBalanceNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.CurrentBalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrentBalanceNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.CurrentBalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceivedDateNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.ReceivedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceivedDateNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.ReceivedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemUnitNameNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.ItemUnitNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemUnitNameNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.ItemUnitNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContainerNameNull() As Boolean
            Return Me.IsNull(Me.tableVRptRequestHistoryStatuTrace.ContainerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContainerNameNull()
            Me(Me.tableVRptRequestHistoryStatuTrace.ContainerNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VRequestHistoryStatusTraceMasterRow
        Inherits Global.System.Data.DataRow
        
        Private tableVRequestHistoryStatusTraceMaster As VRequestHistoryStatusTraceMasterDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVRequestHistoryStatusTraceMaster = CType(Me.Table,VRequestHistoryStatusTraceMasterDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestID() As Decimal
            Get
                Return CType(Me(Me.tableVRequestHistoryStatusTraceMaster.RequestIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableVRequestHistoryStatusTraceMaster.RequestIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestOrderNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRequestHistoryStatusTraceMaster.RequestOrderNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestOrderNumber' in table 'VRequestHistoryStatusTraceMas"& _ 
                            "ter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRequestHistoryStatusTraceMaster.RequestOrderNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestFromDepartID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVRequestHistoryStatusTraceMaster.RequestFromDepartIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestFromDepartID' in table 'VRequestHistoryStatusTraceMa"& _ 
                            "ster' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRequestHistoryStatusTraceMaster.RequestFromDepartIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestToDepartID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVRequestHistoryStatusTraceMaster.RequestToDepartIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestToDepartID' in table 'VRequestHistoryStatusTraceMast"& _ 
                            "er' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRequestHistoryStatusTraceMaster.RequestToDepartIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POStatusID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVRequestHistoryStatusTraceMaster.POStatusIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POStatusID' in table 'VRequestHistoryStatusTraceMaster' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRequestHistoryStatusTraceMaster.POStatusIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateRequestStatusDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVRequestHistoryStatusTraceMaster.UpdateRequestStatusDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UpdateRequestStatusDate' in table 'VRequestHistoryStatusTra"& _ 
                            "ceMaster' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRequestHistoryStatusTraceMaster.UpdateRequestStatusDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepartName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRequestHistoryStatusTraceMaster.DepartNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DepartName' in table 'VRequestHistoryStatusTraceMaster' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRequestHistoryStatusTraceMaster.DepartNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRequestHistoryStatusTraceMaster.POStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POStatus' in table 'VRequestHistoryStatusTraceMaster' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRequestHistoryStatusTraceMaster.POStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceivedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVRequestHistoryStatusTraceMaster.ReceivedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceivedDate' in table 'VRequestHistoryStatusTraceMaster' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRequestHistoryStatusTraceMaster.ReceivedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestOrderNumberNull() As Boolean
            Return Me.IsNull(Me.tableVRequestHistoryStatusTraceMaster.RequestOrderNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestOrderNumberNull()
            Me(Me.tableVRequestHistoryStatusTraceMaster.RequestOrderNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestFromDepartIDNull() As Boolean
            Return Me.IsNull(Me.tableVRequestHistoryStatusTraceMaster.RequestFromDepartIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestFromDepartIDNull()
            Me(Me.tableVRequestHistoryStatusTraceMaster.RequestFromDepartIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestToDepartIDNull() As Boolean
            Return Me.IsNull(Me.tableVRequestHistoryStatusTraceMaster.RequestToDepartIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestToDepartIDNull()
            Me(Me.tableVRequestHistoryStatusTraceMaster.RequestToDepartIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOStatusIDNull() As Boolean
            Return Me.IsNull(Me.tableVRequestHistoryStatusTraceMaster.POStatusIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOStatusIDNull()
            Me(Me.tableVRequestHistoryStatusTraceMaster.POStatusIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpdateRequestStatusDateNull() As Boolean
            Return Me.IsNull(Me.tableVRequestHistoryStatusTraceMaster.UpdateRequestStatusDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpdateRequestStatusDateNull()
            Me(Me.tableVRequestHistoryStatusTraceMaster.UpdateRequestStatusDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartNameNull() As Boolean
            Return Me.IsNull(Me.tableVRequestHistoryStatusTraceMaster.DepartNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartNameNull()
            Me(Me.tableVRequestHistoryStatusTraceMaster.DepartNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOStatusNull() As Boolean
            Return Me.IsNull(Me.tableVRequestHistoryStatusTraceMaster.POStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOStatusNull()
            Me(Me.tableVRequestHistoryStatusTraceMaster.POStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceivedDateNull() As Boolean
            Return Me.IsNull(Me.tableVRequestHistoryStatusTraceMaster.ReceivedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceivedDateNull()
            Me(Me.tableVRequestHistoryStatusTraceMaster.ReceivedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVRequestHistoryStatusTraceDetailRows() As VRequestHistoryStatusTraceDetailRow()
            If (Me.Table.ChildRelations("VRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail") Is Nothing) Then
                Return New VRequestHistoryStatusTraceDetailRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("VRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail")),VRequestHistoryStatusTraceDetailRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VRequestHistoryStatusTraceDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableVRequestHistoryStatusTraceDetail As VRequestHistoryStatusTraceDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVRequestHistoryStatusTraceDetail = CType(Me.Table,VRequestHistoryStatusTraceDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRequestHistoryStatusTraceDetail.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'VRequestHistoryStatusTraceDetail' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRequestHistoryStatusTraceDetail.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CateName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRequestHistoryStatusTraceDetail.CateNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CateName' in table 'VRequestHistoryStatusTraceDetail' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRequestHistoryStatusTraceDetail.CateNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableVRequestHistoryStatusTraceDetail.BarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'VRequestHistoryStatusTraceDetail' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRequestHistoryStatusTraceDetail.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVRequestHistoryStatusTraceDetail.ItemIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemID' in table 'VRequestHistoryStatusTraceDetail' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRequestHistoryStatusTraceDetail.ItemIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVRequestHistoryStatusTraceDetail.RequestIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestID' in table 'VRequestHistoryStatusTraceDetail' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRequestHistoryStatusTraceDetail.RequestIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Integer
            Get
                Return CType(Me(Me.tableVRequestHistoryStatusTraceDetail.QuantityColumn),Integer)
            End Get
            Set
                Me(Me.tableVRequestHistoryStatusTraceDetail.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResponseQuantity() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVRequestHistoryStatusTraceDetail.ResponseQuantityColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ResponseQuantity' in table 'VRequestHistoryStatusTraceDetai"& _ 
                            "l' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVRequestHistoryStatusTraceDetail.ResponseQuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VIncomingRequestHistoryStatusTraceMasterRow() As VIncomingRequestHistoryStatusTraceMasterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("VIncomingRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail")),VIncomingRequestHistoryStatusTraceMasterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("VIncomingRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VRequestHistoryStatusTraceMasterRow() As VRequestHistoryStatusTraceMasterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("VRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail")),VRequestHistoryStatusTraceMasterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("VRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableVRequestHistoryStatusTraceDetail.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableVRequestHistoryStatusTraceDetail.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCateNameNull() As Boolean
            Return Me.IsNull(Me.tableVRequestHistoryStatusTraceDetail.CateNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCateNameNull()
            Me(Me.tableVRequestHistoryStatusTraceDetail.CateNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableVRequestHistoryStatusTraceDetail.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tableVRequestHistoryStatusTraceDetail.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemIDNull() As Boolean
            Return Me.IsNull(Me.tableVRequestHistoryStatusTraceDetail.ItemIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemIDNull()
            Me(Me.tableVRequestHistoryStatusTraceDetail.ItemIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestIDNull() As Boolean
            Return Me.IsNull(Me.tableVRequestHistoryStatusTraceDetail.RequestIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestIDNull()
            Me(Me.tableVRequestHistoryStatusTraceDetail.RequestIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResponseQuantityNull() As Boolean
            Return Me.IsNull(Me.tableVRequestHistoryStatusTraceDetail.ResponseQuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResponseQuantityNull()
            Me(Me.tableVRequestHistoryStatusTraceDetail.ResponseQuantityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIncomingRequestHistoryStatusTraceMasterRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIncomingRequestHistoryStatusTraceMaster As VIncomingRequestHistoryStatusTraceMasterDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIncomingRequestHistoryStatusTraceMaster = CType(Me.Table,VIncomingRequestHistoryStatusTraceMasterDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestID() As Decimal
            Get
                Return CType(Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.RequestIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.RequestIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestOrderNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.RequestOrderNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestOrderNumber' in table 'VIncomingRequestHistoryStatus"& _ 
                            "TraceMaster' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.RequestOrderNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestFromDepartID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.RequestFromDepartIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestFromDepartID' in table 'VIncomingRequestHistoryStatu"& _ 
                            "sTraceMaster' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.RequestFromDepartIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POStatusID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.POStatusIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POStatusID' in table 'VIncomingRequestHistoryStatusTraceMas"& _ 
                            "ter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.POStatusIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateRequestStatusDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.UpdateRequestStatusDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UpdateRequestStatusDate' in table 'VIncomingRequestHistoryS"& _ 
                            "tatusTraceMaster' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.UpdateRequestStatusDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.POStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POStatus' in table 'VIncomingRequestHistoryStatusTraceMaste"& _ 
                            "r' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.POStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestToDepartID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.RequestToDepartIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestToDepartID' in table 'VIncomingRequestHistoryStatusT"& _ 
                            "raceMaster' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.RequestToDepartIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepReqName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.DepReqNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DepReqName' in table 'VIncomingRequestHistoryStatusTraceMas"& _ 
                            "ter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.DepReqNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceivedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.ReceivedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceivedDate' in table 'VIncomingRequestHistoryStatusTraceM"& _ 
                            "aster' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.ReceivedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestOrderNumberNull() As Boolean
            Return Me.IsNull(Me.tableVIncomingRequestHistoryStatusTraceMaster.RequestOrderNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestOrderNumberNull()
            Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.RequestOrderNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestFromDepartIDNull() As Boolean
            Return Me.IsNull(Me.tableVIncomingRequestHistoryStatusTraceMaster.RequestFromDepartIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestFromDepartIDNull()
            Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.RequestFromDepartIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOStatusIDNull() As Boolean
            Return Me.IsNull(Me.tableVIncomingRequestHistoryStatusTraceMaster.POStatusIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOStatusIDNull()
            Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.POStatusIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpdateRequestStatusDateNull() As Boolean
            Return Me.IsNull(Me.tableVIncomingRequestHistoryStatusTraceMaster.UpdateRequestStatusDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpdateRequestStatusDateNull()
            Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.UpdateRequestStatusDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOStatusNull() As Boolean
            Return Me.IsNull(Me.tableVIncomingRequestHistoryStatusTraceMaster.POStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOStatusNull()
            Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.POStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestToDepartIDNull() As Boolean
            Return Me.IsNull(Me.tableVIncomingRequestHistoryStatusTraceMaster.RequestToDepartIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestToDepartIDNull()
            Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.RequestToDepartIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepReqNameNull() As Boolean
            Return Me.IsNull(Me.tableVIncomingRequestHistoryStatusTraceMaster.DepReqNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepReqNameNull()
            Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.DepReqNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceivedDateNull() As Boolean
            Return Me.IsNull(Me.tableVIncomingRequestHistoryStatusTraceMaster.ReceivedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceivedDateNull()
            Me(Me.tableVIncomingRequestHistoryStatusTraceMaster.ReceivedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVRequestHistoryStatusTraceDetailRows() As VRequestHistoryStatusTraceDetailRow()
            If (Me.Table.ChildRelations("VIncomingRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail") Is Nothing) Then
                Return New VRequestHistoryStatusTraceDetailRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("VIncomingRequestHistoryStatusTraceMaster_VRequestHistoryStatusTraceDetail")),VRequestHistoryStatusTraceDetailRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VRptRequestHistoryStatuTraceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VRptRequestHistoryStatuTraceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VRptRequestHistoryStatuTraceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VRptRequestHistoryStatuTraceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VRequestHistoryStatusTraceMasterRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VRequestHistoryStatusTraceMasterRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VRequestHistoryStatusTraceMasterRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VRequestHistoryStatusTraceMasterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VRequestHistoryStatusTraceDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VRequestHistoryStatusTraceDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VRequestHistoryStatusTraceDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VRequestHistoryStatusTraceDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIncomingRequestHistoryStatusTraceMasterRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIncomingRequestHistoryStatusTraceMasterRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIncomingRequestHistoryStatusTraceMasterRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIncomingRequestHistoryStatusTraceMasterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DSRptRequestHistoryStatusTraceTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VRptRequestHistoryStatuTraceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VRptRequestHistoryStatuTrace"
            tableMapping.ColumnMappings.Add("RequestID", "RequestID")
            tableMapping.ColumnMappings.Add("RequestOrderNumber", "RequestOrderNumber")
            tableMapping.ColumnMappings.Add("RequestFromDepartID", "RequestFromDepartID")
            tableMapping.ColumnMappings.Add("RequestDate", "RequestDate")
            tableMapping.ColumnMappings.Add("RequestDescription", "RequestDescription")
            tableMapping.ColumnMappings.Add("RequestToDepartID", "RequestToDepartID")
            tableMapping.ColumnMappings.Add("ItemID", "ItemID")
            tableMapping.ColumnMappings.Add("Quantity", "Quantity")
            tableMapping.ColumnMappings.Add("ResponseQuantity", "ResponseQuantity")
            tableMapping.ColumnMappings.Add("POStatusID", "POStatusID")
            tableMapping.ColumnMappings.Add("UpdateRequestStatusDate", "UpdateRequestStatusDate")
            tableMapping.ColumnMappings.Add("DepartName", "DepartName")
            tableMapping.ColumnMappings.Add("Barcode", "Barcode")
            tableMapping.ColumnMappings.Add("ItemName", "ItemName")
            tableMapping.ColumnMappings.Add("CateName", "CateName")
            tableMapping.ColumnMappings.Add("UserRequestName", "UserRequestName")
            tableMapping.ColumnMappings.Add("UserApproveName", "UserApproveName")
            tableMapping.ColumnMappings.Add("CurrentBalance", "CurrentBalance")
            tableMapping.ColumnMappings.Add("ReceivedDate", "ReceivedDate")
            tableMapping.ColumnMappings.Add("ItemUnitName", "ItemUnitName")
            tableMapping.ColumnMappings.Add("ContainerName", "ContainerName")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     RequestID, RequestOrderNumber, RequestFromDepartID, RequestDate, Reque"& _ 
                "stDescription, RequestToDepartID, ItemID, Quantity, ResponseQuantity, POStatusID"& _ 
                ", "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      UpdateRequestStatusDate, DepartName, Barcode, ItemName"& _ 
                ", CateName, UserRequestName, UserApproveName, CurrentBalance, ReceivedDate, Item"& _ 
                "UnitName, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ContainerName"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         VRptRequestHistory"& _ 
                "StatuTrace"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Barcode, CateName, ContainerName, CurrentBalance, DepartName, ItemID, Item"& _ 
                "Name, ItemUnitName, POStatusID, Quantity, ReceivedDate, RequestDate, RequestDesc"& _ 
                "ription, RequestFromDepartID, RequestID, RequestOrderNumber, RequestToDepartID, "& _ 
                "ResponseQuantity, UpdateRequestStatusDate, UserApproveName, UserRequestName FROM"& _ 
                " VRptRequestHistoryStatuTrace WHERE (RequestFromDepartID = @OwnerDepartID) AND ("& _ 
                "POStatusID = @POStatus) AND (CAST(CONVERT (VARCHAR(10), UpdateRequestStatusDate,"& _ 
                " 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@FDate AS DATETIME), 1)"& _ 
                " AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@TDate AS DATETIME), 1) AS Dat"& _ 
                "etime))"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OwnerDepartID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestFromDepartID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POStatus", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "POStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Barcode, CateName, ContainerName, CurrentBalance, DepartName, ItemID, Item"& _ 
                "Name, ItemUnitName, POStatusID, Quantity, ReceivedDate, RequestDate, RequestDesc"& _ 
                "ription, RequestFromDepartID, RequestID, RequestOrderNumber, RequestToDepartID, "& _ 
                "ResponseQuantity, UpdateRequestStatusDate, UserApproveName, UserRequestName FROM"& _ 
                " VRptRequestHistoryStatuTrace WHERE (RequestToDepartID = @OwnerDepartID) AND (PO"& _ 
                "StatusID = @POStatus) AND (CAST(CONVERT (VARCHAR(10), UpdateRequestStatusDate, 1"& _ 
                ") AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@FDate AS DATETIME), 1) A"& _ 
                "S Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@TDate AS DATETIME), 1) AS Datet"& _ 
                "ime))"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OwnerDepartID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestToDepartID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POStatus", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "POStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSRptRequestHistoryStatusTrace.VRptRequestHistoryStatuTraceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSRptRequestHistoryStatusTrace.VRptRequestHistoryStatuTraceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSRptRequestHistoryStatusTrace.VRptRequestHistoryStatuTraceDataTable = New DSRptRequestHistoryStatusTrace.VRptRequestHistoryStatuTraceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSRptRequestHistoryStatusTrace.VRptRequestHistoryStatuTraceDataTable, ByVal OwnerDepartID As Global.System.Nullable(Of Integer), ByVal POStatus As Global.System.Nullable(Of Integer), ByVal FDate As Date, ByVal TDate As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (OwnerDepartID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(OwnerDepartID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (POStatus.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(POStatus.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(FDate,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(TDate,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetHisRequestBYStatus(ByVal OwnerDepartID As Global.System.Nullable(Of Integer), ByVal POStatus As Global.System.Nullable(Of Integer), ByVal FDate As Date, ByVal TDate As Date) As DSRptRequestHistoryStatusTrace.VRptRequestHistoryStatuTraceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (OwnerDepartID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(OwnerDepartID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (POStatus.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(POStatus.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(FDate,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(TDate,Date)
            Dim dataTable As DSRptRequestHistoryStatusTrace.VRptRequestHistoryStatuTraceDataTable = New DSRptRequestHistoryStatusTrace.VRptRequestHistoryStatuTraceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSRptRequestHistoryStatusTrace.VRptRequestHistoryStatuTraceDataTable, ByVal OwnerDepartID As Global.System.Nullable(Of Integer), ByVal POStatus As Global.System.Nullable(Of Integer), ByVal FDate As Date, ByVal TDate As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (OwnerDepartID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(OwnerDepartID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (POStatus.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(POStatus.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(FDate,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(TDate,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetHisIncomingReqByStatus(ByVal OwnerDepartID As Global.System.Nullable(Of Integer), ByVal POStatus As Global.System.Nullable(Of Integer), ByVal FDate As Date, ByVal TDate As Date) As DSRptRequestHistoryStatusTrace.VRptRequestHistoryStatuTraceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (OwnerDepartID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(OwnerDepartID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (POStatus.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(POStatus.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(FDate,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(TDate,Date)
            Dim dataTable As DSRptRequestHistoryStatusTrace.VRptRequestHistoryStatuTraceDataTable = New DSRptRequestHistoryStatusTrace.VRptRequestHistoryStatuTraceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VRequestHistoryStatusTraceMasterTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VRequestHistoryStatusTraceMaster"
            tableMapping.ColumnMappings.Add("RequestID", "RequestID")
            tableMapping.ColumnMappings.Add("RequestOrderNumber", "RequestOrderNumber")
            tableMapping.ColumnMappings.Add("RequestFromDepartID", "RequestFromDepartID")
            tableMapping.ColumnMappings.Add("RequestToDepartID", "RequestToDepartID")
            tableMapping.ColumnMappings.Add("POStatusID", "POStatusID")
            tableMapping.ColumnMappings.Add("UpdateRequestStatusDate", "UpdateRequestStatusDate")
            tableMapping.ColumnMappings.Add("DepartName", "DepartName")
            tableMapping.ColumnMappings.Add("POStatus", "POStatus")
            tableMapping.ColumnMappings.Add("ReceivedDate", "ReceivedDate")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     RequestID, RequestOrderNumber, RequestFromDepartID, RequestToDepartID,"& _ 
                " POStatusID, UpdateRequestStatusDate, DepartName, POStatus, ReceivedDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM  "& _ 
                "       VRequestHistoryStatusTraceMaster"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT DepartName, POStatus, POStatusID, ReceivedDate, RequestFromDepartID, Reque"& _ 
                "stID, RequestOrderNumber, RequestToDepartID, UpdateRequestStatusDate FROM VReque"& _ 
                "stHistoryStatusTraceMaster WHERE (RequestFromDepartID = @OwnerDepartID) AND (POS"& _ 
                "tatusID = @POStatusID) AND (CAST(CONVERT (VARCHAR(10), UpdateRequestStatusDate, "& _ 
                "1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@FDate AS DATETIME), 1) "& _ 
                "AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@TDate AS DATETIME), 1) AS Date"& _ 
                "time))"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OwnerDepartID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestFromDepartID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POStatusID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "POStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSRptRequestHistoryStatusTrace.VRequestHistoryStatusTraceMasterDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSRptRequestHistoryStatusTrace.VRequestHistoryStatusTraceMasterDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSRptRequestHistoryStatusTrace.VRequestHistoryStatusTraceMasterDataTable = New DSRptRequestHistoryStatusTrace.VRequestHistoryStatusTraceMasterDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSRptRequestHistoryStatusTrace.VRequestHistoryStatusTraceMasterDataTable, ByVal OwnerDepartID As Global.System.Nullable(Of Integer), ByVal POStatusID As Global.System.Nullable(Of Integer), ByVal FDate As Date, ByVal TDate As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (OwnerDepartID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(OwnerDepartID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (POStatusID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(POStatusID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(FDate,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(TDate,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetHisRequestBYStatus(ByVal OwnerDepartID As Global.System.Nullable(Of Integer), ByVal POStatusID As Global.System.Nullable(Of Integer), ByVal FDate As Date, ByVal TDate As Date) As DSRptRequestHistoryStatusTrace.VRequestHistoryStatusTraceMasterDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (OwnerDepartID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(OwnerDepartID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (POStatusID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(POStatusID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(FDate,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(TDate,Date)
            Dim dataTable As DSRptRequestHistoryStatusTrace.VRequestHistoryStatusTraceMasterDataTable = New DSRptRequestHistoryStatusTrace.VRequestHistoryStatusTraceMasterDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VRequestHistoryStatusTraceDetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VRequestHistoryStatusTraceDetail"
            tableMapping.ColumnMappings.Add("ItemName", "ItemName")
            tableMapping.ColumnMappings.Add("CateName", "CateName")
            tableMapping.ColumnMappings.Add("Barcode", "Barcode")
            tableMapping.ColumnMappings.Add("ItemID", "ItemID")
            tableMapping.ColumnMappings.Add("RequestID", "RequestID")
            tableMapping.ColumnMappings.Add("Quantity", "Quantity")
            tableMapping.ColumnMappings.Add("ResponseQuantity", "ResponseQuantity")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ItemName, CateName, Barcode, ItemID, RequestID, Quantity, ResponseQuantity"& _ 
                " FROM dbo.VRequestHistoryStatusTraceDetail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ItemName, CateName, Barcode, ItemID, RequestID, Quantity, ResponseQuantity"& _ 
                " FROM dbo.VRequestHistoryStatusTraceDetail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"RequestID=@RequestID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "RequestID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSRptRequestHistoryStatusTrace.VRequestHistoryStatusTraceDetailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSRptRequestHistoryStatusTrace.VRequestHistoryStatusTraceDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSRptRequestHistoryStatusTrace.VRequestHistoryStatusTraceDetailDataTable = New DSRptRequestHistoryStatusTrace.VRequestHistoryStatusTraceDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSRptRequestHistoryStatusTrace.VRequestHistoryStatusTraceDetailDataTable, ByVal RequestID As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (RequestID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(RequestID.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByRequestID(ByVal RequestID As Global.System.Nullable(Of Decimal)) As DSRptRequestHistoryStatusTrace.VRequestHistoryStatusTraceDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (RequestID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(RequestID.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSRptRequestHistoryStatusTrace.VRequestHistoryStatusTraceDetailDataTable = New DSRptRequestHistoryStatusTrace.VRequestHistoryStatusTraceDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VIncomingRequestHistoryStatusTraceMasterTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VIncomingRequestHistoryStatusTraceMaster"
            tableMapping.ColumnMappings.Add("RequestID", "RequestID")
            tableMapping.ColumnMappings.Add("RequestOrderNumber", "RequestOrderNumber")
            tableMapping.ColumnMappings.Add("RequestFromDepartID", "RequestFromDepartID")
            tableMapping.ColumnMappings.Add("POStatusID", "POStatusID")
            tableMapping.ColumnMappings.Add("UpdateRequestStatusDate", "UpdateRequestStatusDate")
            tableMapping.ColumnMappings.Add("POStatus", "POStatus")
            tableMapping.ColumnMappings.Add("RequestToDepartID", "RequestToDepartID")
            tableMapping.ColumnMappings.Add("DepReqName", "DepReqName")
            tableMapping.ColumnMappings.Add("ReceivedDate", "ReceivedDate")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     RequestID, RequestOrderNumber, RequestFromDepartID, POStatusID, Update"& _ 
                "RequestStatusDate, POStatus, RequestToDepartID, DepReqName, ReceivedDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM  "& _ 
                "       VIncomingRequestHistoryStatusTraceMaster"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT DepReqName, POStatus, POStatusID, ReceivedDate, RequestFromDepartID, Reque"& _ 
                "stID, RequestOrderNumber, RequestToDepartID, UpdateRequestStatusDate FROM VIncom"& _ 
                "ingRequestHistoryStatusTraceMaster WHERE (RequestToDepartID = @OwnerDepartID) AN"& _ 
                "D (POStatusID = @POStatusID) AND (CAST(CONVERT (VARCHAR(10), UpdateRequestStatus"& _ 
                "Date, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@FDate AS DATETIME"& _ 
                "), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@TDate AS DATETIME), 1) A"& _ 
                "S Datetime))"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OwnerDepartID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestToDepartID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POStatusID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "POStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT DepReqName, POStatus, POStatusID, ReceivedDate, RequestFromDepartID, Reque"& _ 
                "stID, RequestOrderNumber, RequestToDepartID, UpdateRequestStatusDate FROM VIncom"& _ 
                "ingRequestHistoryStatusTraceMaster WHERE (RequestToDepartID = @OwnerDepartID) AN"& _ 
                "D (POStatusID = @POStatusID) AND (CAST(CONVERT (VARCHAR(10), UpdateRequestStatus"& _ 
                "Date, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@FDate AS DATETIME"& _ 
                "), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@TDate AS DATETIME), 1) A"& _ 
                "S Datetime)) AND (RequestFromDepartID = @RequestFromDepartID)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OwnerDepartID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestToDepartID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POStatusID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "POStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestFromDepartID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestFromDepartID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSRptRequestHistoryStatusTrace.VIncomingRequestHistoryStatusTraceMasterDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSRptRequestHistoryStatusTrace.VIncomingRequestHistoryStatusTraceMasterDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSRptRequestHistoryStatusTrace.VIncomingRequestHistoryStatusTraceMasterDataTable = New DSRptRequestHistoryStatusTrace.VIncomingRequestHistoryStatusTraceMasterDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSRptRequestHistoryStatusTrace.VIncomingRequestHistoryStatusTraceMasterDataTable, ByVal OwnerDepartID As Global.System.Nullable(Of Integer), ByVal POStatusID As Global.System.Nullable(Of Integer), ByVal FDate As Date, ByVal TDate As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (OwnerDepartID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(OwnerDepartID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (POStatusID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(POStatusID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(FDate,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(TDate,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetHisIncomingReq(ByVal OwnerDepartID As Global.System.Nullable(Of Integer), ByVal POStatusID As Global.System.Nullable(Of Integer), ByVal FDate As Date, ByVal TDate As Date) As DSRptRequestHistoryStatusTrace.VIncomingRequestHistoryStatusTraceMasterDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (OwnerDepartID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(OwnerDepartID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (POStatusID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(POStatusID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(FDate,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(TDate,Date)
            Dim dataTable As DSRptRequestHistoryStatusTrace.VIncomingRequestHistoryStatusTraceMasterDataTable = New DSRptRequestHistoryStatusTrace.VIncomingRequestHistoryStatusTraceMasterDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSRptRequestHistoryStatusTrace.VIncomingRequestHistoryStatusTraceMasterDataTable, ByVal OwnerDepartID As Global.System.Nullable(Of Integer), ByVal POStatusID As Global.System.Nullable(Of Integer), ByVal FDate As Date, ByVal TDate As Date, ByVal RequestFromDepartID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (OwnerDepartID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(OwnerDepartID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (POStatusID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(POStatusID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(FDate,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(TDate,Date)
            If (RequestFromDepartID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(RequestFromDepartID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetHisIncomingReqSpecificDepart(ByVal OwnerDepartID As Global.System.Nullable(Of Integer), ByVal POStatusID As Global.System.Nullable(Of Integer), ByVal FDate As Date, ByVal TDate As Date, ByVal RequestFromDepartID As Global.System.Nullable(Of Integer)) As DSRptRequestHistoryStatusTrace.VIncomingRequestHistoryStatusTraceMasterDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (OwnerDepartID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(OwnerDepartID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (POStatusID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(POStatusID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(FDate,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(TDate,Date)
            If (RequestFromDepartID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(RequestFromDepartID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSRptRequestHistoryStatusTrace.VIncomingRequestHistoryStatusTraceMasterDataTable = New DSRptRequestHistoryStatusTrace.VIncomingRequestHistoryStatusTraceMasterDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DSRptRequestHistoryStatusTrace, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DSRptRequestHistoryStatusTrace, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DSRptRequestHistoryStatusTrace, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DSRptRequestHistoryStatusTrace) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
