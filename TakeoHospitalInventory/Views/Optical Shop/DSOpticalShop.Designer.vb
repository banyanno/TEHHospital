'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8825
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSOpticalShop"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSOpticalShop
    Inherits Global.System.Data.DataSet
    
    Private tableVItemPriceOpticalShop As VItemPriceOpticalShopDataTable
    
    Private tableINCOME_TYPE As INCOME_TYPEDataTable
    
    Private tableDataTableReceiptMax As DataTableReceiptMaxDataTable
    
    Private tableVReceiptDetail As VReceiptDetailDataTable
    
    Private tableDONATION As DONATIONDataTable
    
    Private tableVMainReceiptDetail As VMainReceiptDetailDataTable
    
    Private tableV_OpticalShopCusStatistic As V_OpticalShopCusStatisticDataTable
    
    Private tableV_OpticalShopItemSaleOff As V_OpticalShopItemSaleOffDataTable
    
    Private tableRECEIPT_CUSTOMER As RECEIPT_CUSTOMERDataTable
    
    Private tableV_Receipt_Invoice As V_Receipt_InvoiceDataTable
    
    Private tableVMainReceiptNIL As VMainReceiptNILDataTable
    
    Private tableVReceiptNILDetail As VReceiptNILDetailDataTable
    
    Private tableV_OpticalShopPatientStatisticByIcomeType As V_OpticalShopPatientStatisticByIcomeTypeDataTable
    
    Private tableV_OpticalShopPaymentTypeByAgeStatistic As V_OpticalShopPaymentTypeByAgeStatisticDataTable
    
    Private tableV_ITEM_OPT_TEM As V_ITEM_OPT_TEMDataTable
    
    Private tableTemItemDetial As TemItemDetialDataTable
    
    Private tableNILTemItemDetail As NILTemItemDetailDataTable
    
    Private relationVMainReceiptNIL_VReceiptNILDetail As Global.System.Data.DataRelation
    
    Private relationVMainReceiptDetail_VReceiptDetail As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VItemPriceOpticalShop")) Is Nothing) Then
                MyBase.Tables.Add(New VItemPriceOpticalShopDataTable(ds.Tables("VItemPriceOpticalShop")))
            End If
            If (Not (ds.Tables("INCOME_TYPE")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_TYPEDataTable(ds.Tables("INCOME_TYPE")))
            End If
            If (Not (ds.Tables("DataTableReceiptMax")) Is Nothing) Then
                MyBase.Tables.Add(New DataTableReceiptMaxDataTable(ds.Tables("DataTableReceiptMax")))
            End If
            If (Not (ds.Tables("VReceiptDetail")) Is Nothing) Then
                MyBase.Tables.Add(New VReceiptDetailDataTable(ds.Tables("VReceiptDetail")))
            End If
            If (Not (ds.Tables("DONATION")) Is Nothing) Then
                MyBase.Tables.Add(New DONATIONDataTable(ds.Tables("DONATION")))
            End If
            If (Not (ds.Tables("VMainReceiptDetail")) Is Nothing) Then
                MyBase.Tables.Add(New VMainReceiptDetailDataTable(ds.Tables("VMainReceiptDetail")))
            End If
            If (Not (ds.Tables("V_OpticalShopCusStatistic")) Is Nothing) Then
                MyBase.Tables.Add(New V_OpticalShopCusStatisticDataTable(ds.Tables("V_OpticalShopCusStatistic")))
            End If
            If (Not (ds.Tables("V_OpticalShopItemSaleOff")) Is Nothing) Then
                MyBase.Tables.Add(New V_OpticalShopItemSaleOffDataTable(ds.Tables("V_OpticalShopItemSaleOff")))
            End If
            If (Not (ds.Tables("RECEIPT_CUSTOMER")) Is Nothing) Then
                MyBase.Tables.Add(New RECEIPT_CUSTOMERDataTable(ds.Tables("RECEIPT_CUSTOMER")))
            End If
            If (Not (ds.Tables("V_Receipt_Invoice")) Is Nothing) Then
                MyBase.Tables.Add(New V_Receipt_InvoiceDataTable(ds.Tables("V_Receipt_Invoice")))
            End If
            If (Not (ds.Tables("VMainReceiptNIL")) Is Nothing) Then
                MyBase.Tables.Add(New VMainReceiptNILDataTable(ds.Tables("VMainReceiptNIL")))
            End If
            If (Not (ds.Tables("VReceiptNILDetail")) Is Nothing) Then
                MyBase.Tables.Add(New VReceiptNILDetailDataTable(ds.Tables("VReceiptNILDetail")))
            End If
            If (Not (ds.Tables("V_OpticalShopPatientStatisticByIcomeType")) Is Nothing) Then
                MyBase.Tables.Add(New V_OpticalShopPatientStatisticByIcomeTypeDataTable(ds.Tables("V_OpticalShopPatientStatisticByIcomeType")))
            End If
            If (Not (ds.Tables("V_OpticalShopPaymentTypeByAgeStatistic")) Is Nothing) Then
                MyBase.Tables.Add(New V_OpticalShopPaymentTypeByAgeStatisticDataTable(ds.Tables("V_OpticalShopPaymentTypeByAgeStatistic")))
            End If
            If (Not (ds.Tables("V_ITEM_OPT_TEM")) Is Nothing) Then
                MyBase.Tables.Add(New V_ITEM_OPT_TEMDataTable(ds.Tables("V_ITEM_OPT_TEM")))
            End If
            If (Not (ds.Tables("TemItemDetial")) Is Nothing) Then
                MyBase.Tables.Add(New TemItemDetialDataTable(ds.Tables("TemItemDetial")))
            End If
            If (Not (ds.Tables("NILTemItemDetail")) Is Nothing) Then
                MyBase.Tables.Add(New NILTemItemDetailDataTable(ds.Tables("NILTemItemDetail")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VItemPriceOpticalShop() As VItemPriceOpticalShopDataTable
        Get
            Return Me.tableVItemPriceOpticalShop
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_TYPE() As INCOME_TYPEDataTable
        Get
            Return Me.tableINCOME_TYPE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataTableReceiptMax() As DataTableReceiptMaxDataTable
        Get
            Return Me.tableDataTableReceiptMax
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VReceiptDetail() As VReceiptDetailDataTable
        Get
            Return Me.tableVReceiptDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DONATION() As DONATIONDataTable
        Get
            Return Me.tableDONATION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VMainReceiptDetail() As VMainReceiptDetailDataTable
        Get
            Return Me.tableVMainReceiptDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_OpticalShopCusStatistic() As V_OpticalShopCusStatisticDataTable
        Get
            Return Me.tableV_OpticalShopCusStatistic
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_OpticalShopItemSaleOff() As V_OpticalShopItemSaleOffDataTable
        Get
            Return Me.tableV_OpticalShopItemSaleOff
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RECEIPT_CUSTOMER() As RECEIPT_CUSTOMERDataTable
        Get
            Return Me.tableRECEIPT_CUSTOMER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_Receipt_Invoice() As V_Receipt_InvoiceDataTable
        Get
            Return Me.tableV_Receipt_Invoice
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VMainReceiptNIL() As VMainReceiptNILDataTable
        Get
            Return Me.tableVMainReceiptNIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VReceiptNILDetail() As VReceiptNILDetailDataTable
        Get
            Return Me.tableVReceiptNILDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_OpticalShopPatientStatisticByIcomeType() As V_OpticalShopPatientStatisticByIcomeTypeDataTable
        Get
            Return Me.tableV_OpticalShopPatientStatisticByIcomeType
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_OpticalShopPaymentTypeByAgeStatistic() As V_OpticalShopPaymentTypeByAgeStatisticDataTable
        Get
            Return Me.tableV_OpticalShopPaymentTypeByAgeStatistic
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_ITEM_OPT_TEM() As V_ITEM_OPT_TEMDataTable
        Get
            Return Me.tableV_ITEM_OPT_TEM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemItemDetial() As TemItemDetialDataTable
        Get
            Return Me.tableTemItemDetial
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NILTemItemDetail() As NILTemItemDetailDataTable
        Get
            Return Me.tableNILTemItemDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSOpticalShop = CType(MyBase.Clone,DSOpticalShop)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VItemPriceOpticalShop")) Is Nothing) Then
                MyBase.Tables.Add(New VItemPriceOpticalShopDataTable(ds.Tables("VItemPriceOpticalShop")))
            End If
            If (Not (ds.Tables("INCOME_TYPE")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_TYPEDataTable(ds.Tables("INCOME_TYPE")))
            End If
            If (Not (ds.Tables("DataTableReceiptMax")) Is Nothing) Then
                MyBase.Tables.Add(New DataTableReceiptMaxDataTable(ds.Tables("DataTableReceiptMax")))
            End If
            If (Not (ds.Tables("VReceiptDetail")) Is Nothing) Then
                MyBase.Tables.Add(New VReceiptDetailDataTable(ds.Tables("VReceiptDetail")))
            End If
            If (Not (ds.Tables("DONATION")) Is Nothing) Then
                MyBase.Tables.Add(New DONATIONDataTable(ds.Tables("DONATION")))
            End If
            If (Not (ds.Tables("VMainReceiptDetail")) Is Nothing) Then
                MyBase.Tables.Add(New VMainReceiptDetailDataTable(ds.Tables("VMainReceiptDetail")))
            End If
            If (Not (ds.Tables("V_OpticalShopCusStatistic")) Is Nothing) Then
                MyBase.Tables.Add(New V_OpticalShopCusStatisticDataTable(ds.Tables("V_OpticalShopCusStatistic")))
            End If
            If (Not (ds.Tables("V_OpticalShopItemSaleOff")) Is Nothing) Then
                MyBase.Tables.Add(New V_OpticalShopItemSaleOffDataTable(ds.Tables("V_OpticalShopItemSaleOff")))
            End If
            If (Not (ds.Tables("RECEIPT_CUSTOMER")) Is Nothing) Then
                MyBase.Tables.Add(New RECEIPT_CUSTOMERDataTable(ds.Tables("RECEIPT_CUSTOMER")))
            End If
            If (Not (ds.Tables("V_Receipt_Invoice")) Is Nothing) Then
                MyBase.Tables.Add(New V_Receipt_InvoiceDataTable(ds.Tables("V_Receipt_Invoice")))
            End If
            If (Not (ds.Tables("VMainReceiptNIL")) Is Nothing) Then
                MyBase.Tables.Add(New VMainReceiptNILDataTable(ds.Tables("VMainReceiptNIL")))
            End If
            If (Not (ds.Tables("VReceiptNILDetail")) Is Nothing) Then
                MyBase.Tables.Add(New VReceiptNILDetailDataTable(ds.Tables("VReceiptNILDetail")))
            End If
            If (Not (ds.Tables("V_OpticalShopPatientStatisticByIcomeType")) Is Nothing) Then
                MyBase.Tables.Add(New V_OpticalShopPatientStatisticByIcomeTypeDataTable(ds.Tables("V_OpticalShopPatientStatisticByIcomeType")))
            End If
            If (Not (ds.Tables("V_OpticalShopPaymentTypeByAgeStatistic")) Is Nothing) Then
                MyBase.Tables.Add(New V_OpticalShopPaymentTypeByAgeStatisticDataTable(ds.Tables("V_OpticalShopPaymentTypeByAgeStatistic")))
            End If
            If (Not (ds.Tables("V_ITEM_OPT_TEM")) Is Nothing) Then
                MyBase.Tables.Add(New V_ITEM_OPT_TEMDataTable(ds.Tables("V_ITEM_OPT_TEM")))
            End If
            If (Not (ds.Tables("TemItemDetial")) Is Nothing) Then
                MyBase.Tables.Add(New TemItemDetialDataTable(ds.Tables("TemItemDetial")))
            End If
            If (Not (ds.Tables("NILTemItemDetail")) Is Nothing) Then
                MyBase.Tables.Add(New NILTemItemDetailDataTable(ds.Tables("NILTemItemDetail")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVItemPriceOpticalShop = CType(MyBase.Tables("VItemPriceOpticalShop"),VItemPriceOpticalShopDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVItemPriceOpticalShop) Is Nothing) Then
                Me.tableVItemPriceOpticalShop.InitVars
            End If
        End If
        Me.tableINCOME_TYPE = CType(MyBase.Tables("INCOME_TYPE"),INCOME_TYPEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_TYPE) Is Nothing) Then
                Me.tableINCOME_TYPE.InitVars
            End If
        End If
        Me.tableDataTableReceiptMax = CType(MyBase.Tables("DataTableReceiptMax"),DataTableReceiptMaxDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataTableReceiptMax) Is Nothing) Then
                Me.tableDataTableReceiptMax.InitVars
            End If
        End If
        Me.tableVReceiptDetail = CType(MyBase.Tables("VReceiptDetail"),VReceiptDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVReceiptDetail) Is Nothing) Then
                Me.tableVReceiptDetail.InitVars
            End If
        End If
        Me.tableDONATION = CType(MyBase.Tables("DONATION"),DONATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDONATION) Is Nothing) Then
                Me.tableDONATION.InitVars
            End If
        End If
        Me.tableVMainReceiptDetail = CType(MyBase.Tables("VMainReceiptDetail"),VMainReceiptDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVMainReceiptDetail) Is Nothing) Then
                Me.tableVMainReceiptDetail.InitVars
            End If
        End If
        Me.tableV_OpticalShopCusStatistic = CType(MyBase.Tables("V_OpticalShopCusStatistic"),V_OpticalShopCusStatisticDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_OpticalShopCusStatistic) Is Nothing) Then
                Me.tableV_OpticalShopCusStatistic.InitVars
            End If
        End If
        Me.tableV_OpticalShopItemSaleOff = CType(MyBase.Tables("V_OpticalShopItemSaleOff"),V_OpticalShopItemSaleOffDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_OpticalShopItemSaleOff) Is Nothing) Then
                Me.tableV_OpticalShopItemSaleOff.InitVars
            End If
        End If
        Me.tableRECEIPT_CUSTOMER = CType(MyBase.Tables("RECEIPT_CUSTOMER"),RECEIPT_CUSTOMERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRECEIPT_CUSTOMER) Is Nothing) Then
                Me.tableRECEIPT_CUSTOMER.InitVars
            End If
        End If
        Me.tableV_Receipt_Invoice = CType(MyBase.Tables("V_Receipt_Invoice"),V_Receipt_InvoiceDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_Receipt_Invoice) Is Nothing) Then
                Me.tableV_Receipt_Invoice.InitVars
            End If
        End If
        Me.tableVMainReceiptNIL = CType(MyBase.Tables("VMainReceiptNIL"),VMainReceiptNILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVMainReceiptNIL) Is Nothing) Then
                Me.tableVMainReceiptNIL.InitVars
            End If
        End If
        Me.tableVReceiptNILDetail = CType(MyBase.Tables("VReceiptNILDetail"),VReceiptNILDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVReceiptNILDetail) Is Nothing) Then
                Me.tableVReceiptNILDetail.InitVars
            End If
        End If
        Me.tableV_OpticalShopPatientStatisticByIcomeType = CType(MyBase.Tables("V_OpticalShopPatientStatisticByIcomeType"),V_OpticalShopPatientStatisticByIcomeTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_OpticalShopPatientStatisticByIcomeType) Is Nothing) Then
                Me.tableV_OpticalShopPatientStatisticByIcomeType.InitVars
            End If
        End If
        Me.tableV_OpticalShopPaymentTypeByAgeStatistic = CType(MyBase.Tables("V_OpticalShopPaymentTypeByAgeStatistic"),V_OpticalShopPaymentTypeByAgeStatisticDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_OpticalShopPaymentTypeByAgeStatistic) Is Nothing) Then
                Me.tableV_OpticalShopPaymentTypeByAgeStatistic.InitVars
            End If
        End If
        Me.tableV_ITEM_OPT_TEM = CType(MyBase.Tables("V_ITEM_OPT_TEM"),V_ITEM_OPT_TEMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_ITEM_OPT_TEM) Is Nothing) Then
                Me.tableV_ITEM_OPT_TEM.InitVars
            End If
        End If
        Me.tableTemItemDetial = CType(MyBase.Tables("TemItemDetial"),TemItemDetialDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemItemDetial) Is Nothing) Then
                Me.tableTemItemDetial.InitVars
            End If
        End If
        Me.tableNILTemItemDetail = CType(MyBase.Tables("NILTemItemDetail"),NILTemItemDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNILTemItemDetail) Is Nothing) Then
                Me.tableNILTemItemDetail.InitVars
            End If
        End If
        Me.relationVMainReceiptNIL_VReceiptNILDetail = Me.Relations("VMainReceiptNIL_VReceiptNILDetail")
        Me.relationVMainReceiptDetail_VReceiptDetail = Me.Relations("VMainReceiptDetail_VReceiptDetail")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSOpticalShop"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSOpticalShop.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVItemPriceOpticalShop = New VItemPriceOpticalShopDataTable
        MyBase.Tables.Add(Me.tableVItemPriceOpticalShop)
        Me.tableINCOME_TYPE = New INCOME_TYPEDataTable
        MyBase.Tables.Add(Me.tableINCOME_TYPE)
        Me.tableDataTableReceiptMax = New DataTableReceiptMaxDataTable
        MyBase.Tables.Add(Me.tableDataTableReceiptMax)
        Me.tableVReceiptDetail = New VReceiptDetailDataTable
        MyBase.Tables.Add(Me.tableVReceiptDetail)
        Me.tableDONATION = New DONATIONDataTable
        MyBase.Tables.Add(Me.tableDONATION)
        Me.tableVMainReceiptDetail = New VMainReceiptDetailDataTable
        MyBase.Tables.Add(Me.tableVMainReceiptDetail)
        Me.tableV_OpticalShopCusStatistic = New V_OpticalShopCusStatisticDataTable
        MyBase.Tables.Add(Me.tableV_OpticalShopCusStatistic)
        Me.tableV_OpticalShopItemSaleOff = New V_OpticalShopItemSaleOffDataTable
        MyBase.Tables.Add(Me.tableV_OpticalShopItemSaleOff)
        Me.tableRECEIPT_CUSTOMER = New RECEIPT_CUSTOMERDataTable
        MyBase.Tables.Add(Me.tableRECEIPT_CUSTOMER)
        Me.tableV_Receipt_Invoice = New V_Receipt_InvoiceDataTable
        MyBase.Tables.Add(Me.tableV_Receipt_Invoice)
        Me.tableVMainReceiptNIL = New VMainReceiptNILDataTable
        MyBase.Tables.Add(Me.tableVMainReceiptNIL)
        Me.tableVReceiptNILDetail = New VReceiptNILDetailDataTable
        MyBase.Tables.Add(Me.tableVReceiptNILDetail)
        Me.tableV_OpticalShopPatientStatisticByIcomeType = New V_OpticalShopPatientStatisticByIcomeTypeDataTable
        MyBase.Tables.Add(Me.tableV_OpticalShopPatientStatisticByIcomeType)
        Me.tableV_OpticalShopPaymentTypeByAgeStatistic = New V_OpticalShopPaymentTypeByAgeStatisticDataTable
        MyBase.Tables.Add(Me.tableV_OpticalShopPaymentTypeByAgeStatistic)
        Me.tableV_ITEM_OPT_TEM = New V_ITEM_OPT_TEMDataTable
        MyBase.Tables.Add(Me.tableV_ITEM_OPT_TEM)
        Me.tableTemItemDetial = New TemItemDetialDataTable
        MyBase.Tables.Add(Me.tableTemItemDetial)
        Me.tableNILTemItemDetail = New NILTemItemDetailDataTable
        MyBase.Tables.Add(Me.tableNILTemItemDetail)
        Me.relationVMainReceiptNIL_VReceiptNILDetail = New Global.System.Data.DataRelation("VMainReceiptNIL_VReceiptNILDetail", New Global.System.Data.DataColumn() {Me.tableVMainReceiptNIL.ReceiptNILIdColumn}, New Global.System.Data.DataColumn() {Me.tableVReceiptNILDetail.ReceiptNILIdColumn}, false)
        Me.Relations.Add(Me.relationVMainReceiptNIL_VReceiptNILDetail)
        Me.relationVMainReceiptDetail_VReceiptDetail = New Global.System.Data.DataRelation("VMainReceiptDetail_VReceiptDetail", New Global.System.Data.DataColumn() {Me.tableVMainReceiptDetail.ReceiptIDColumn}, New Global.System.Data.DataColumn() {Me.tableVReceiptDetail.ReceiptNoColumn}, false)
        Me.Relations.Add(Me.relationVMainReceiptDetail_VReceiptDetail)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVItemPriceOpticalShop() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeINCOME_TYPE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataTableReceiptMax() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVReceiptDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDONATION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVMainReceiptDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_OpticalShopCusStatistic() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_OpticalShopItemSaleOff() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRECEIPT_CUSTOMER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_Receipt_Invoice() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVMainReceiptNIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVReceiptNILDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_OpticalShopPatientStatisticByIcomeType() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_OpticalShopPaymentTypeByAgeStatistic() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_ITEM_OPT_TEM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemItemDetial() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNILTemItemDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSOpticalShop = New DSOpticalShop
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VItemPriceOpticalShopRowChangeEventHandler(ByVal sender As Object, ByVal e As VItemPriceOpticalShopRowChangeEvent)
    
    Public Delegate Sub INCOME_TYPERowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_TYPERowChangeEvent)
    
    Public Delegate Sub DataTableReceiptMaxRowChangeEventHandler(ByVal sender As Object, ByVal e As DataTableReceiptMaxRowChangeEvent)
    
    Public Delegate Sub VReceiptDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As VReceiptDetailRowChangeEvent)
    
    Public Delegate Sub DONATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As DONATIONRowChangeEvent)
    
    Public Delegate Sub VMainReceiptDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As VMainReceiptDetailRowChangeEvent)
    
    Public Delegate Sub V_OpticalShopCusStatisticRowChangeEventHandler(ByVal sender As Object, ByVal e As V_OpticalShopCusStatisticRowChangeEvent)
    
    Public Delegate Sub V_OpticalShopItemSaleOffRowChangeEventHandler(ByVal sender As Object, ByVal e As V_OpticalShopItemSaleOffRowChangeEvent)
    
    Public Delegate Sub RECEIPT_CUSTOMERRowChangeEventHandler(ByVal sender As Object, ByVal e As RECEIPT_CUSTOMERRowChangeEvent)
    
    Public Delegate Sub V_Receipt_InvoiceRowChangeEventHandler(ByVal sender As Object, ByVal e As V_Receipt_InvoiceRowChangeEvent)
    
    Public Delegate Sub VMainReceiptNILRowChangeEventHandler(ByVal sender As Object, ByVal e As VMainReceiptNILRowChangeEvent)
    
    Public Delegate Sub VReceiptNILDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As VReceiptNILDetailRowChangeEvent)
    
    Public Delegate Sub V_OpticalShopPatientStatisticByIcomeTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As V_OpticalShopPatientStatisticByIcomeTypeRowChangeEvent)
    
    Public Delegate Sub V_OpticalShopPaymentTypeByAgeStatisticRowChangeEventHandler(ByVal sender As Object, ByVal e As V_OpticalShopPaymentTypeByAgeStatisticRowChangeEvent)
    
    Public Delegate Sub V_ITEM_OPT_TEMRowChangeEventHandler(ByVal sender As Object, ByVal e As V_ITEM_OPT_TEMRowChangeEvent)
    
    Public Delegate Sub TemItemDetialRowChangeEventHandler(ByVal sender As Object, ByVal e As TemItemDetialRowChangeEvent)
    
    Public Delegate Sub NILTemItemDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As NILTemItemDetailRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VItemPriceOpticalShopDataTable
        Inherits Global.System.Data.TypedTableBase(Of VItemPriceOpticalShopRow)
        
        Private columnItemID As Global.System.Data.DataColumn
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnIsUSD As Global.System.Data.DataColumn
        
        Private columnIsKHR As Global.System.Data.DataColumn
        
        Private columnIsCurPrice As Global.System.Data.DataColumn
        
        Private columnPicture As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VItemPriceOpticalShop"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsUSDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsUSD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsKHRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsKHR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsCurPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsCurPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PictureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPicture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VItemPriceOpticalShopRow
            Get
                Return CType(Me.Rows(index),VItemPriceOpticalShopRow)
            End Get
        End Property
        
        Public Event VItemPriceOpticalShopRowChanging As VItemPriceOpticalShopRowChangeEventHandler
        
        Public Event VItemPriceOpticalShopRowChanged As VItemPriceOpticalShopRowChangeEventHandler
        
        Public Event VItemPriceOpticalShopRowDeleting As VItemPriceOpticalShopRowChangeEventHandler
        
        Public Event VItemPriceOpticalShopRowDeleted As VItemPriceOpticalShopRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVItemPriceOpticalShopRow(ByVal row As VItemPriceOpticalShopRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVItemPriceOpticalShopRow(ByVal ItemID As Integer, ByVal Barcode As String, ByVal ItemName As String, ByVal Price As Decimal, ByVal IsUSD As Boolean, ByVal IsKHR As Boolean, ByVal IsCurPrice As Boolean, ByVal Picture() As Byte) As VItemPriceOpticalShopRow
            Dim rowVItemPriceOpticalShopRow As VItemPriceOpticalShopRow = CType(Me.NewRow,VItemPriceOpticalShopRow)
            Dim columnValuesArray() As Object = New Object() {ItemID, Barcode, ItemName, Price, IsUSD, IsKHR, IsCurPrice, Picture}
            rowVItemPriceOpticalShopRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVItemPriceOpticalShopRow)
            Return rowVItemPriceOpticalShopRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VItemPriceOpticalShopDataTable = CType(MyBase.Clone,VItemPriceOpticalShopDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VItemPriceOpticalShopDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnItemID = MyBase.Columns("ItemID")
            Me.columnBarcode = MyBase.Columns("Barcode")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnIsUSD = MyBase.Columns("IsUSD")
            Me.columnIsKHR = MyBase.Columns("IsKHR")
            Me.columnIsCurPrice = MyBase.Columns("IsCurPrice")
            Me.columnPicture = MyBase.Columns("Picture")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnItemID = New Global.System.Data.DataColumn("ItemID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemID)
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnIsUSD = New Global.System.Data.DataColumn("IsUSD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsUSD)
            Me.columnIsKHR = New Global.System.Data.DataColumn("IsKHR", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsKHR)
            Me.columnIsCurPrice = New Global.System.Data.DataColumn("IsCurPrice", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsCurPrice)
            Me.columnPicture = New Global.System.Data.DataColumn("Picture", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPicture)
            Me.columnItemID.AllowDBNull = false
            Me.columnBarcode.MaxLength = 50
            Me.columnItemName.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVItemPriceOpticalShopRow() As VItemPriceOpticalShopRow
            Return CType(Me.NewRow,VItemPriceOpticalShopRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VItemPriceOpticalShopRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VItemPriceOpticalShopRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VItemPriceOpticalShopRowChangedEvent) Is Nothing) Then
                RaiseEvent VItemPriceOpticalShopRowChanged(Me, New VItemPriceOpticalShopRowChangeEvent(CType(e.Row,VItemPriceOpticalShopRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VItemPriceOpticalShopRowChangingEvent) Is Nothing) Then
                RaiseEvent VItemPriceOpticalShopRowChanging(Me, New VItemPriceOpticalShopRowChangeEvent(CType(e.Row,VItemPriceOpticalShopRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VItemPriceOpticalShopRowDeletedEvent) Is Nothing) Then
                RaiseEvent VItemPriceOpticalShopRowDeleted(Me, New VItemPriceOpticalShopRowChangeEvent(CType(e.Row,VItemPriceOpticalShopRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VItemPriceOpticalShopRowDeletingEvent) Is Nothing) Then
                RaiseEvent VItemPriceOpticalShopRowDeleting(Me, New VItemPriceOpticalShopRowChangeEvent(CType(e.Row,VItemPriceOpticalShopRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVItemPriceOpticalShopRow(ByVal row As VItemPriceOpticalShopRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VItemPriceOpticalShopDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_TYPEDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_TYPERow)
        
        Private columnICID As Global.System.Data.DataColumn
        
        Private columnICType As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_TYPE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_TYPERow
            Get
                Return CType(Me.Rows(index),INCOME_TYPERow)
            End Get
        End Property
        
        Public Event INCOME_TYPERowChanging As INCOME_TYPERowChangeEventHandler
        
        Public Event INCOME_TYPERowChanged As INCOME_TYPERowChangeEventHandler
        
        Public Event INCOME_TYPERowDeleting As INCOME_TYPERowChangeEventHandler
        
        Public Event INCOME_TYPERowDeleted As INCOME_TYPERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddINCOME_TYPERow(ByVal row As INCOME_TYPERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddINCOME_TYPERow(ByVal ICType As String, ByVal Description As String) As INCOME_TYPERow
            Dim rowINCOME_TYPERow As INCOME_TYPERow = CType(Me.NewRow,INCOME_TYPERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ICType, Description}
            rowINCOME_TYPERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_TYPERow)
            Return rowINCOME_TYPERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByICID(ByVal ICID As Decimal) As INCOME_TYPERow
            Return CType(Me.Rows.Find(New Object() {ICID}),INCOME_TYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_TYPEDataTable = CType(MyBase.Clone,INCOME_TYPEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_TYPEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnICID = MyBase.Columns("ICID")
            Me.columnICType = MyBase.Columns("ICType")
            Me.columnDescription = MyBase.Columns("Description")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnICID = New Global.System.Data.DataColumn("ICID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICID)
            Me.columnICType = New Global.System.Data.DataColumn("ICType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICType)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnICID}, true))
            Me.columnICID.AutoIncrement = true
            Me.columnICID.AutoIncrementSeed = -1
            Me.columnICID.AutoIncrementStep = -1
            Me.columnICID.AllowDBNull = false
            Me.columnICID.ReadOnly = true
            Me.columnICID.Unique = true
            Me.columnICType.MaxLength = 50
            Me.columnDescription.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewINCOME_TYPERow() As INCOME_TYPERow
            Return CType(Me.NewRow,INCOME_TYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_TYPERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_TYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_TYPERowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_TYPERowChanged(Me, New INCOME_TYPERowChangeEvent(CType(e.Row,INCOME_TYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_TYPERowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_TYPERowChanging(Me, New INCOME_TYPERowChangeEvent(CType(e.Row,INCOME_TYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_TYPERowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_TYPERowDeleted(Me, New INCOME_TYPERowChangeEvent(CType(e.Row,INCOME_TYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_TYPERowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_TYPERowDeleting(Me, New INCOME_TYPERowChangeEvent(CType(e.Row,INCOME_TYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveINCOME_TYPERow(ByVal row As INCOME_TYPERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_TYPEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataTableReceiptMaxDataTable
        Inherits Global.System.Data.TypedTableBase(Of DataTableReceiptMaxRow)
        
        Private columnReceiptMaxAuto As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataTableReceiptMax"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptMaxAutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptMaxAuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataTableReceiptMaxRow
            Get
                Return CType(Me.Rows(index),DataTableReceiptMaxRow)
            End Get
        End Property
        
        Public Event DataTableReceiptMaxRowChanging As DataTableReceiptMaxRowChangeEventHandler
        
        Public Event DataTableReceiptMaxRowChanged As DataTableReceiptMaxRowChangeEventHandler
        
        Public Event DataTableReceiptMaxRowDeleting As DataTableReceiptMaxRowChangeEventHandler
        
        Public Event DataTableReceiptMaxRowDeleted As DataTableReceiptMaxRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataTableReceiptMaxRow(ByVal row As DataTableReceiptMaxRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataTableReceiptMaxRow(ByVal ReceiptMaxAuto As Decimal) As DataTableReceiptMaxRow
            Dim rowDataTableReceiptMaxRow As DataTableReceiptMaxRow = CType(Me.NewRow,DataTableReceiptMaxRow)
            Dim columnValuesArray() As Object = New Object() {ReceiptMaxAuto}
            rowDataTableReceiptMaxRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataTableReceiptMaxRow)
            Return rowDataTableReceiptMaxRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataTableReceiptMaxDataTable = CType(MyBase.Clone,DataTableReceiptMaxDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataTableReceiptMaxDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnReceiptMaxAuto = MyBase.Columns("ReceiptMaxAuto")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnReceiptMaxAuto = New Global.System.Data.DataColumn("ReceiptMaxAuto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptMaxAuto)
            Me.columnReceiptMaxAuto.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataTableReceiptMaxRow() As DataTableReceiptMaxRow
            Return CType(Me.NewRow,DataTableReceiptMaxRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataTableReceiptMaxRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataTableReceiptMaxRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataTableReceiptMaxRowChangedEvent) Is Nothing) Then
                RaiseEvent DataTableReceiptMaxRowChanged(Me, New DataTableReceiptMaxRowChangeEvent(CType(e.Row,DataTableReceiptMaxRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataTableReceiptMaxRowChangingEvent) Is Nothing) Then
                RaiseEvent DataTableReceiptMaxRowChanging(Me, New DataTableReceiptMaxRowChangeEvent(CType(e.Row,DataTableReceiptMaxRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataTableReceiptMaxRowDeletedEvent) Is Nothing) Then
                RaiseEvent DataTableReceiptMaxRowDeleted(Me, New DataTableReceiptMaxRowChangeEvent(CType(e.Row,DataTableReceiptMaxRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataTableReceiptMaxRowDeletingEvent) Is Nothing) Then
                RaiseEvent DataTableReceiptMaxRowDeleting(Me, New DataTableReceiptMaxRowChangeEvent(CType(e.Row,DataTableReceiptMaxRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataTableReceiptMaxRow(ByVal row As DataTableReceiptMaxRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataTableReceiptMaxDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VReceiptDetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of VReceiptDetailRow)
        
        Private columnReceiptDID As Global.System.Data.DataColumn
        
        Private columnItemID As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnItemQTY As Global.System.Data.DataColumn
        
        Private columnSubTotalReal As Global.System.Data.DataColumn
        
        Private columnSubTotalDolar As Global.System.Data.DataColumn
        
        Private columnIncomeID As Global.System.Data.DataColumn
        
        Private columnReceiptDate As Global.System.Data.DataColumn
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        Private columnItemPrice As Global.System.Data.DataColumn
        
        Private columnReceiptNo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VReceiptDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptDIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptDID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemQTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotalReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotalDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IncomeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIncomeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VReceiptDetailRow
            Get
                Return CType(Me.Rows(index),VReceiptDetailRow)
            End Get
        End Property
        
        Public Event VReceiptDetailRowChanging As VReceiptDetailRowChangeEventHandler
        
        Public Event VReceiptDetailRowChanged As VReceiptDetailRowChangeEventHandler
        
        Public Event VReceiptDetailRowDeleting As VReceiptDetailRowChangeEventHandler
        
        Public Event VReceiptDetailRowDeleted As VReceiptDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVReceiptDetailRow(ByVal row As VReceiptDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVReceiptDetailRow(ByVal ReceiptDID As Decimal, ByVal ItemID As String, ByVal ItemName As String, ByVal ItemQTY As Decimal, ByVal SubTotalReal As Double, ByVal SubTotalDolar As Double, ByVal IncomeID As Decimal, ByVal ReceiptDate As Date, ByVal Barcode As String, ByVal ItemPrice As Double, ByVal parentVMainReceiptDetailRowByVMainReceiptDetail_VReceiptDetail As VMainReceiptDetailRow) As VReceiptDetailRow
            Dim rowVReceiptDetailRow As VReceiptDetailRow = CType(Me.NewRow,VReceiptDetailRow)
            Dim columnValuesArray() As Object = New Object() {ReceiptDID, ItemID, ItemName, ItemQTY, SubTotalReal, SubTotalDolar, IncomeID, ReceiptDate, Barcode, ItemPrice, Nothing}
            If (Not (parentVMainReceiptDetailRowByVMainReceiptDetail_VReceiptDetail) Is Nothing) Then
                columnValuesArray(10) = parentVMainReceiptDetailRowByVMainReceiptDetail_VReceiptDetail(0)
            End If
            rowVReceiptDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVReceiptDetailRow)
            Return rowVReceiptDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VReceiptDetailDataTable = CType(MyBase.Clone,VReceiptDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VReceiptDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnReceiptDID = MyBase.Columns("ReceiptDID")
            Me.columnItemID = MyBase.Columns("ItemID")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnItemQTY = MyBase.Columns("ItemQTY")
            Me.columnSubTotalReal = MyBase.Columns("SubTotalReal")
            Me.columnSubTotalDolar = MyBase.Columns("SubTotalDolar")
            Me.columnIncomeID = MyBase.Columns("IncomeID")
            Me.columnReceiptDate = MyBase.Columns("ReceiptDate")
            Me.columnBarcode = MyBase.Columns("Barcode")
            Me.columnItemPrice = MyBase.Columns("ItemPrice")
            Me.columnReceiptNo = MyBase.Columns("ReceiptNo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnReceiptDID = New Global.System.Data.DataColumn("ReceiptDID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptDID)
            Me.columnItemID = New Global.System.Data.DataColumn("ItemID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemID)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnItemQTY = New Global.System.Data.DataColumn("ItemQTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemQTY)
            Me.columnSubTotalReal = New Global.System.Data.DataColumn("SubTotalReal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotalReal)
            Me.columnSubTotalDolar = New Global.System.Data.DataColumn("SubTotalDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotalDolar)
            Me.columnIncomeID = New Global.System.Data.DataColumn("IncomeID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIncomeID)
            Me.columnReceiptDate = New Global.System.Data.DataColumn("ReceiptDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptDate)
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.columnItemPrice = New Global.System.Data.DataColumn("ItemPrice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemPrice)
            Me.columnReceiptNo = New Global.System.Data.DataColumn("ReceiptNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptNo)
            Me.columnReceiptDID.AllowDBNull = false
            Me.columnItemID.MaxLength = 50
            Me.columnItemName.MaxLength = 150
            Me.columnBarcode.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVReceiptDetailRow() As VReceiptDetailRow
            Return CType(Me.NewRow,VReceiptDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VReceiptDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VReceiptDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VReceiptDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent VReceiptDetailRowChanged(Me, New VReceiptDetailRowChangeEvent(CType(e.Row,VReceiptDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VReceiptDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent VReceiptDetailRowChanging(Me, New VReceiptDetailRowChangeEvent(CType(e.Row,VReceiptDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VReceiptDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent VReceiptDetailRowDeleted(Me, New VReceiptDetailRowChangeEvent(CType(e.Row,VReceiptDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VReceiptDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent VReceiptDetailRowDeleting(Me, New VReceiptDetailRowChangeEvent(CType(e.Row,VReceiptDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVReceiptDetailRow(ByVal row As VReceiptDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VReceiptDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DONATIONDataTable
        Inherits Global.System.Data.TypedTableBase(Of DONATIONRow)
        
        Private columnDonationID As Global.System.Data.DataColumn
        
        Private columnDonationName As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DONATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DonationIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDonationID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DonationNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDonationName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DONATIONRow
            Get
                Return CType(Me.Rows(index),DONATIONRow)
            End Get
        End Property
        
        Public Event DONATIONRowChanging As DONATIONRowChangeEventHandler
        
        Public Event DONATIONRowChanged As DONATIONRowChangeEventHandler
        
        Public Event DONATIONRowDeleting As DONATIONRowChangeEventHandler
        
        Public Event DONATIONRowDeleted As DONATIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDONATIONRow(ByVal row As DONATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDONATIONRow(ByVal DonationName As String, ByVal Description As String) As DONATIONRow
            Dim rowDONATIONRow As DONATIONRow = CType(Me.NewRow,DONATIONRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, DonationName, Description}
            rowDONATIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDONATIONRow)
            Return rowDONATIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDonationID(ByVal DonationID As Decimal) As DONATIONRow
            Return CType(Me.Rows.Find(New Object() {DonationID}),DONATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DONATIONDataTable = CType(MyBase.Clone,DONATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DONATIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDonationID = MyBase.Columns("DonationID")
            Me.columnDonationName = MyBase.Columns("DonationName")
            Me.columnDescription = MyBase.Columns("Description")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDonationID = New Global.System.Data.DataColumn("DonationID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDonationID)
            Me.columnDonationName = New Global.System.Data.DataColumn("DonationName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDonationName)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDonationID}, true))
            Me.columnDonationID.AutoIncrement = true
            Me.columnDonationID.AutoIncrementSeed = -1
            Me.columnDonationID.AutoIncrementStep = -1
            Me.columnDonationID.AllowDBNull = false
            Me.columnDonationID.ReadOnly = true
            Me.columnDonationID.Unique = true
            Me.columnDonationName.MaxLength = 50
            Me.columnDescription.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDONATIONRow() As DONATIONRow
            Return CType(Me.NewRow,DONATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DONATIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DONATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DONATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent DONATIONRowChanged(Me, New DONATIONRowChangeEvent(CType(e.Row,DONATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DONATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent DONATIONRowChanging(Me, New DONATIONRowChangeEvent(CType(e.Row,DONATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DONATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent DONATIONRowDeleted(Me, New DONATIONRowChangeEvent(CType(e.Row,DONATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DONATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent DONATIONRowDeleting(Me, New DONATIONRowChangeEvent(CType(e.Row,DONATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDONATIONRow(ByVal row As DONATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DONATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VMainReceiptDetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of VMainReceiptDetailRow)
        
        Private columnReceiptID As Global.System.Data.DataColumn
        
        Private columnReceiptDate As Global.System.Data.DataColumn
        
        Private columnCustomerNo As Global.System.Data.DataColumn
        
        Private columnMedicReal As Global.System.Data.DataColumn
        
        Private columnMedicDolar As Global.System.Data.DataColumn
        
        Private columnEyeGlassesReal As Global.System.Data.DataColumn
        
        Private columnEyeGlassesDolar As Global.System.Data.DataColumn
        
        Private columnTotalReal As Global.System.Data.DataColumn
        
        Private columnTotalDolar As Global.System.Data.DataColumn
        
        Private columnAmountInWords As Global.System.Data.DataColumn
        
        Private columnAmountFigureReal As Global.System.Data.DataColumn
        
        Private columnAmountFigureDolar As Global.System.Data.DataColumn
        
        Private columnIsCurrency As Global.System.Data.DataColumn
        
        Private columnIsDonation As Global.System.Data.DataColumn
        
        Private columnDonationID As Global.System.Data.DataColumn
        
        Private columnPayBySelf As Global.System.Data.DataColumn
        
        Private columnPayByDonation As Global.System.Data.DataColumn
        
        Private columnIsPaid As Global.System.Data.DataColumn
        
        Private columnReceiptNote As Global.System.Data.DataColumn
        
        Private columnUserID As Global.System.Data.DataColumn
        
        Private columnUserName As Global.System.Data.DataColumn
        
        Private columnCusName As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnOccupation As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnReadyModR As Global.System.Data.DataColumn
        
        Private columnSpectacleR As Global.System.Data.DataColumn
        
        Private columnOtherR As Global.System.Data.DataColumn
        
        Private columnReturnReal As Global.System.Data.DataColumn
        
        Private columnReturnDolar As Global.System.Data.DataColumn
        
        Private columnFundRaisingR As Global.System.Data.DataColumn
        
        Private columnSpectacleDolar As Global.System.Data.DataColumn
        
        Private columnReadyModDolar As Global.System.Data.DataColumn
        
        Private columnFundRaisingDolar As Global.System.Data.DataColumn
        
        Private columnOtherDolar As Global.System.Data.DataColumn
        
        Private columnIncomType As Global.System.Data.DataColumn
        
        Private columnDonationName As Global.System.Data.DataColumn
        
        Private columnGlasses As Global.System.Data.DataColumn
        
        Private columnDonateAmount As Global.System.Data.DataColumn
        
        Private columnSupportedAmtR As Global.System.Data.DataColumn
        
        Private columnSupportedAmtDolar As Global.System.Data.DataColumn
        
        Private columnReceiptType As Global.System.Data.DataColumn
        
        Private columnPaidR As Global.System.Data.DataColumn
        
        Private columnPaidDollar As Global.System.Data.DataColumn
        
        Private columnCusNameEng As Global.System.Data.DataColumn
        
        Private columnIsOldPatient As Global.System.Data.DataColumn
        
        Private columnFullAmount As Global.System.Data.DataColumn
        
        Private columnNilAmount As Global.System.Data.DataColumn
        
        Private columnSocialAmount As Global.System.Data.DataColumn
        
        Private columnPaymentCur As Global.System.Data.DataColumn
        
        Private columnPaymentType As Global.System.Data.DataColumn
        
        Private columnComment As Global.System.Data.DataColumn
        
        Private columnExpr1 As Global.System.Data.DataColumn
        
        Private columnReceiptNo As Global.System.Data.DataColumn
        
        Private columnCustID As Global.System.Data.DataColumn
        
        Private columnTotalSocial As Global.System.Data.DataColumn
        
        Private columnSubReceiptType As Global.System.Data.DataColumn
        
        Private columnTIME_CREATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VMainReceiptDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MedicRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMedicReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MedicDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMedicDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EyeGlassesRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEyeGlassesReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EyeGlassesDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEyeGlassesDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountInWordsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmountInWords
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountFigureRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmountFigureReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountFigureDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmountFigureDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsCurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDonationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDonation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DonationIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDonationID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayBySelfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayBySelf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayByDonationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayByDonation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptNoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptNote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CusNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCusName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReadyModRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReadyModR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SpectacleRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpectacleR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOtherR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReturnRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReturnReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReturnDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReturnDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FundRaisingRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFundRaisingR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SpectacleDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpectacleDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReadyModDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReadyModDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FundRaisingDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFundRaisingDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOtherDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IncomTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIncomType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DonationNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDonationName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GlassesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGlasses
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DonateAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDonateAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupportedAmtRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupportedAmtR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupportedAmtDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupportedAmtDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaidR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidDollarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaidDollar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CusNameEngColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCusNameEng
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsOldPatientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsOldPatient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FullAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFullAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NilAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNilAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SocialAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSocialAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentCurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentCur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubReceiptTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubReceiptType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIME_CREATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIME_CREATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VMainReceiptDetailRow
            Get
                Return CType(Me.Rows(index),VMainReceiptDetailRow)
            End Get
        End Property
        
        Public Event VMainReceiptDetailRowChanging As VMainReceiptDetailRowChangeEventHandler
        
        Public Event VMainReceiptDetailRowChanged As VMainReceiptDetailRowChangeEventHandler
        
        Public Event VMainReceiptDetailRowDeleting As VMainReceiptDetailRowChangeEventHandler
        
        Public Event VMainReceiptDetailRowDeleted As VMainReceiptDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVMainReceiptDetailRow(ByVal row As VMainReceiptDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVMainReceiptDetailRow( _
                    ByVal ReceiptID As Decimal,  _
                    ByVal ReceiptDate As Date,  _
                    ByVal CustomerNo As Decimal,  _
                    ByVal MedicReal As Double,  _
                    ByVal MedicDolar As Double,  _
                    ByVal EyeGlassesReal As Double,  _
                    ByVal EyeGlassesDolar As Double,  _
                    ByVal TotalReal As Double,  _
                    ByVal TotalDolar As Double,  _
                    ByVal AmountInWords As String,  _
                    ByVal AmountFigureReal As Double,  _
                    ByVal AmountFigureDolar As Double,  _
                    ByVal IsCurrency As Boolean,  _
                    ByVal IsDonation As Boolean,  _
                    ByVal DonationID As Decimal,  _
                    ByVal PayBySelf As Double,  _
                    ByVal PayByDonation As Double,  _
                    ByVal IsPaid As Decimal,  _
                    ByVal ReceiptNote As String,  _
                    ByVal UserID As Decimal,  _
                    ByVal UserName As String,  _
                    ByVal CusName As String,  _
                    ByVal Sex As String,  _
                    ByVal Age As Decimal,  _
                    ByVal Occupation As String,  _
                    ByVal Address As String,  _
                    ByVal ReadyModR As Double,  _
                    ByVal SpectacleR As Double,  _
                    ByVal OtherR As Double,  _
                    ByVal ReturnReal As Double,  _
                    ByVal ReturnDolar As Double,  _
                    ByVal FundRaisingR As Double,  _
                    ByVal SpectacleDolar As Double,  _
                    ByVal ReadyModDolar As Double,  _
                    ByVal FundRaisingDolar As Double,  _
                    ByVal OtherDolar As Double,  _
                    ByVal IncomType As String,  _
                    ByVal DonationName As String,  _
                    ByVal Glasses As Integer,  _
                    ByVal DonateAmount As Double,  _
                    ByVal SupportedAmtR As Double,  _
                    ByVal SupportedAmtDolar As Double,  _
                    ByVal ReceiptType As String,  _
                    ByVal PaidR As Double,  _
                    ByVal PaidDollar As Double,  _
                    ByVal CusNameEng As String,  _
                    ByVal IsOldPatient As Boolean,  _
                    ByVal FullAmount As Double,  _
                    ByVal NilAmount As Double,  _
                    ByVal SocialAmount As Double,  _
                    ByVal PaymentCur As String,  _
                    ByVal PaymentType As Integer,  _
                    ByVal Comment As String,  _
                    ByVal Expr1 As Decimal,  _
                    ByVal ReceiptNo As String,  _
                    ByVal CustID As Decimal,  _
                    ByVal TotalSocial As Decimal,  _
                    ByVal SubReceiptType As String,  _
                    ByVal TIME_CREATE As String) As VMainReceiptDetailRow
            Dim rowVMainReceiptDetailRow As VMainReceiptDetailRow = CType(Me.NewRow,VMainReceiptDetailRow)
            Dim columnValuesArray() As Object = New Object() {ReceiptID, ReceiptDate, CustomerNo, MedicReal, MedicDolar, EyeGlassesReal, EyeGlassesDolar, TotalReal, TotalDolar, AmountInWords, AmountFigureReal, AmountFigureDolar, IsCurrency, IsDonation, DonationID, PayBySelf, PayByDonation, IsPaid, ReceiptNote, UserID, UserName, CusName, Sex, Age, Occupation, Address, ReadyModR, SpectacleR, OtherR, ReturnReal, ReturnDolar, FundRaisingR, SpectacleDolar, ReadyModDolar, FundRaisingDolar, OtherDolar, IncomType, DonationName, Glasses, DonateAmount, SupportedAmtR, SupportedAmtDolar, ReceiptType, PaidR, PaidDollar, CusNameEng, IsOldPatient, FullAmount, NilAmount, SocialAmount, PaymentCur, PaymentType, Comment, Expr1, ReceiptNo, CustID, TotalSocial, SubReceiptType, TIME_CREATE}
            rowVMainReceiptDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVMainReceiptDetailRow)
            Return rowVMainReceiptDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VMainReceiptDetailDataTable = CType(MyBase.Clone,VMainReceiptDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VMainReceiptDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnReceiptID = MyBase.Columns("ReceiptID")
            Me.columnReceiptDate = MyBase.Columns("ReceiptDate")
            Me.columnCustomerNo = MyBase.Columns("CustomerNo")
            Me.columnMedicReal = MyBase.Columns("MedicReal")
            Me.columnMedicDolar = MyBase.Columns("MedicDolar")
            Me.columnEyeGlassesReal = MyBase.Columns("EyeGlassesReal")
            Me.columnEyeGlassesDolar = MyBase.Columns("EyeGlassesDolar")
            Me.columnTotalReal = MyBase.Columns("TotalReal")
            Me.columnTotalDolar = MyBase.Columns("TotalDolar")
            Me.columnAmountInWords = MyBase.Columns("AmountInWords")
            Me.columnAmountFigureReal = MyBase.Columns("AmountFigureReal")
            Me.columnAmountFigureDolar = MyBase.Columns("AmountFigureDolar")
            Me.columnIsCurrency = MyBase.Columns("IsCurrency")
            Me.columnIsDonation = MyBase.Columns("IsDonation")
            Me.columnDonationID = MyBase.Columns("DonationID")
            Me.columnPayBySelf = MyBase.Columns("PayBySelf")
            Me.columnPayByDonation = MyBase.Columns("PayByDonation")
            Me.columnIsPaid = MyBase.Columns("IsPaid")
            Me.columnReceiptNote = MyBase.Columns("ReceiptNote")
            Me.columnUserID = MyBase.Columns("UserID")
            Me.columnUserName = MyBase.Columns("UserName")
            Me.columnCusName = MyBase.Columns("CusName")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnOccupation = MyBase.Columns("Occupation")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnReadyModR = MyBase.Columns("ReadyModR")
            Me.columnSpectacleR = MyBase.Columns("SpectacleR")
            Me.columnOtherR = MyBase.Columns("OtherR")
            Me.columnReturnReal = MyBase.Columns("ReturnReal")
            Me.columnReturnDolar = MyBase.Columns("ReturnDolar")
            Me.columnFundRaisingR = MyBase.Columns("FundRaisingR")
            Me.columnSpectacleDolar = MyBase.Columns("SpectacleDolar")
            Me.columnReadyModDolar = MyBase.Columns("ReadyModDolar")
            Me.columnFundRaisingDolar = MyBase.Columns("FundRaisingDolar")
            Me.columnOtherDolar = MyBase.Columns("OtherDolar")
            Me.columnIncomType = MyBase.Columns("IncomType")
            Me.columnDonationName = MyBase.Columns("DonationName")
            Me.columnGlasses = MyBase.Columns("Glasses")
            Me.columnDonateAmount = MyBase.Columns("DonateAmount")
            Me.columnSupportedAmtR = MyBase.Columns("SupportedAmtR")
            Me.columnSupportedAmtDolar = MyBase.Columns("SupportedAmtDolar")
            Me.columnReceiptType = MyBase.Columns("ReceiptType")
            Me.columnPaidR = MyBase.Columns("PaidR")
            Me.columnPaidDollar = MyBase.Columns("PaidDollar")
            Me.columnCusNameEng = MyBase.Columns("CusNameEng")
            Me.columnIsOldPatient = MyBase.Columns("IsOldPatient")
            Me.columnFullAmount = MyBase.Columns("FullAmount")
            Me.columnNilAmount = MyBase.Columns("NilAmount")
            Me.columnSocialAmount = MyBase.Columns("SocialAmount")
            Me.columnPaymentCur = MyBase.Columns("PaymentCur")
            Me.columnPaymentType = MyBase.Columns("PaymentType")
            Me.columnComment = MyBase.Columns("Comment")
            Me.columnExpr1 = MyBase.Columns("Expr1")
            Me.columnReceiptNo = MyBase.Columns("ReceiptNo")
            Me.columnCustID = MyBase.Columns("CustID")
            Me.columnTotalSocial = MyBase.Columns("TotalSocial")
            Me.columnSubReceiptType = MyBase.Columns("SubReceiptType")
            Me.columnTIME_CREATE = MyBase.Columns("TIME_CREATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnReceiptID = New Global.System.Data.DataColumn("ReceiptID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptID)
            Me.columnReceiptDate = New Global.System.Data.DataColumn("ReceiptDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptDate)
            Me.columnCustomerNo = New Global.System.Data.DataColumn("CustomerNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerNo)
            Me.columnMedicReal = New Global.System.Data.DataColumn("MedicReal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMedicReal)
            Me.columnMedicDolar = New Global.System.Data.DataColumn("MedicDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMedicDolar)
            Me.columnEyeGlassesReal = New Global.System.Data.DataColumn("EyeGlassesReal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEyeGlassesReal)
            Me.columnEyeGlassesDolar = New Global.System.Data.DataColumn("EyeGlassesDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEyeGlassesDolar)
            Me.columnTotalReal = New Global.System.Data.DataColumn("TotalReal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalReal)
            Me.columnTotalDolar = New Global.System.Data.DataColumn("TotalDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalDolar)
            Me.columnAmountInWords = New Global.System.Data.DataColumn("AmountInWords", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmountInWords)
            Me.columnAmountFigureReal = New Global.System.Data.DataColumn("AmountFigureReal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmountFigureReal)
            Me.columnAmountFigureDolar = New Global.System.Data.DataColumn("AmountFigureDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmountFigureDolar)
            Me.columnIsCurrency = New Global.System.Data.DataColumn("IsCurrency", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsCurrency)
            Me.columnIsDonation = New Global.System.Data.DataColumn("IsDonation", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDonation)
            Me.columnDonationID = New Global.System.Data.DataColumn("DonationID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDonationID)
            Me.columnPayBySelf = New Global.System.Data.DataColumn("PayBySelf", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayBySelf)
            Me.columnPayByDonation = New Global.System.Data.DataColumn("PayByDonation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayByDonation)
            Me.columnIsPaid = New Global.System.Data.DataColumn("IsPaid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPaid)
            Me.columnReceiptNote = New Global.System.Data.DataColumn("ReceiptNote", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptNote)
            Me.columnUserID = New Global.System.Data.DataColumn("UserID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserID)
            Me.columnUserName = New Global.System.Data.DataColumn("UserName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserName)
            Me.columnCusName = New Global.System.Data.DataColumn("CusName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCusName)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnOccupation = New Global.System.Data.DataColumn("Occupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOccupation)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnReadyModR = New Global.System.Data.DataColumn("ReadyModR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReadyModR)
            Me.columnSpectacleR = New Global.System.Data.DataColumn("SpectacleR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpectacleR)
            Me.columnOtherR = New Global.System.Data.DataColumn("OtherR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOtherR)
            Me.columnReturnReal = New Global.System.Data.DataColumn("ReturnReal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReturnReal)
            Me.columnReturnDolar = New Global.System.Data.DataColumn("ReturnDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReturnDolar)
            Me.columnFundRaisingR = New Global.System.Data.DataColumn("FundRaisingR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFundRaisingR)
            Me.columnSpectacleDolar = New Global.System.Data.DataColumn("SpectacleDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpectacleDolar)
            Me.columnReadyModDolar = New Global.System.Data.DataColumn("ReadyModDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReadyModDolar)
            Me.columnFundRaisingDolar = New Global.System.Data.DataColumn("FundRaisingDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFundRaisingDolar)
            Me.columnOtherDolar = New Global.System.Data.DataColumn("OtherDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOtherDolar)
            Me.columnIncomType = New Global.System.Data.DataColumn("IncomType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIncomType)
            Me.columnDonationName = New Global.System.Data.DataColumn("DonationName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDonationName)
            Me.columnGlasses = New Global.System.Data.DataColumn("Glasses", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGlasses)
            Me.columnDonateAmount = New Global.System.Data.DataColumn("DonateAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDonateAmount)
            Me.columnSupportedAmtR = New Global.System.Data.DataColumn("SupportedAmtR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupportedAmtR)
            Me.columnSupportedAmtDolar = New Global.System.Data.DataColumn("SupportedAmtDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupportedAmtDolar)
            Me.columnReceiptType = New Global.System.Data.DataColumn("ReceiptType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptType)
            Me.columnPaidR = New Global.System.Data.DataColumn("PaidR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaidR)
            Me.columnPaidDollar = New Global.System.Data.DataColumn("PaidDollar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaidDollar)
            Me.columnCusNameEng = New Global.System.Data.DataColumn("CusNameEng", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCusNameEng)
            Me.columnIsOldPatient = New Global.System.Data.DataColumn("IsOldPatient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsOldPatient)
            Me.columnFullAmount = New Global.System.Data.DataColumn("FullAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFullAmount)
            Me.columnNilAmount = New Global.System.Data.DataColumn("NilAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNilAmount)
            Me.columnSocialAmount = New Global.System.Data.DataColumn("SocialAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSocialAmount)
            Me.columnPaymentCur = New Global.System.Data.DataColumn("PaymentCur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentCur)
            Me.columnPaymentType = New Global.System.Data.DataColumn("PaymentType", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentType)
            Me.columnComment = New Global.System.Data.DataColumn("Comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComment)
            Me.columnExpr1 = New Global.System.Data.DataColumn("Expr1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr1)
            Me.columnReceiptNo = New Global.System.Data.DataColumn("ReceiptNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptNo)
            Me.columnCustID = New Global.System.Data.DataColumn("CustID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustID)
            Me.columnTotalSocial = New Global.System.Data.DataColumn("TotalSocial", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalSocial)
            Me.columnSubReceiptType = New Global.System.Data.DataColumn("SubReceiptType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubReceiptType)
            Me.columnTIME_CREATE = New Global.System.Data.DataColumn("TIME_CREATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIME_CREATE)
            Me.columnReceiptID.AllowDBNull = false
            Me.columnAmountInWords.MaxLength = 200
            Me.columnReceiptNote.MaxLength = 250
            Me.columnUserName.MaxLength = 50
            Me.columnCusName.MaxLength = 50
            Me.columnSex.MaxLength = 1
            Me.columnOccupation.MaxLength = 100
            Me.columnAddress.MaxLength = 250
            Me.columnIncomType.MaxLength = 1
            Me.columnDonationName.MaxLength = 50
            Me.columnReceiptType.MaxLength = 100
            Me.columnCusNameEng.MaxLength = 100
            Me.columnPaymentCur.MaxLength = 50
            Me.columnComment.MaxLength = 500
            Me.columnReceiptNo.MaxLength = 50
            Me.columnSubReceiptType.MaxLength = 100
            Me.columnTIME_CREATE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVMainReceiptDetailRow() As VMainReceiptDetailRow
            Return CType(Me.NewRow,VMainReceiptDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VMainReceiptDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VMainReceiptDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VMainReceiptDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent VMainReceiptDetailRowChanged(Me, New VMainReceiptDetailRowChangeEvent(CType(e.Row,VMainReceiptDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VMainReceiptDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent VMainReceiptDetailRowChanging(Me, New VMainReceiptDetailRowChangeEvent(CType(e.Row,VMainReceiptDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VMainReceiptDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent VMainReceiptDetailRowDeleted(Me, New VMainReceiptDetailRowChangeEvent(CType(e.Row,VMainReceiptDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VMainReceiptDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent VMainReceiptDetailRowDeleting(Me, New VMainReceiptDetailRowChangeEvent(CType(e.Row,VMainReceiptDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVMainReceiptDetailRow(ByVal row As VMainReceiptDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VMainReceiptDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_OpticalShopCusStatisticDataTable
        Inherits Global.System.Data.TypedTableBase(Of V_OpticalShopCusStatisticRow)
        
        Private columnReceiptType As Global.System.Data.DataColumn
        
        Private columnF As Global.System.Data.DataColumn
        
        Private columnM As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnIsPaid As Global.System.Data.DataColumn
        
        Private columnagerange As Global.System.Data.DataColumn
        
        Private columnReceiptDate As Global.System.Data.DataColumn
        
        Private columnSubReceiptType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_OpticalShopCusStatistic"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property agerangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnagerange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubReceiptTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubReceiptType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_OpticalShopCusStatisticRow
            Get
                Return CType(Me.Rows(index),V_OpticalShopCusStatisticRow)
            End Get
        End Property
        
        Public Event V_OpticalShopCusStatisticRowChanging As V_OpticalShopCusStatisticRowChangeEventHandler
        
        Public Event V_OpticalShopCusStatisticRowChanged As V_OpticalShopCusStatisticRowChangeEventHandler
        
        Public Event V_OpticalShopCusStatisticRowDeleting As V_OpticalShopCusStatisticRowChangeEventHandler
        
        Public Event V_OpticalShopCusStatisticRowDeleted As V_OpticalShopCusStatisticRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_OpticalShopCusStatisticRow(ByVal row As V_OpticalShopCusStatisticRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_OpticalShopCusStatisticRow(ByVal ReceiptType As String, ByVal F As Integer, ByVal M As Integer, ByVal Age As Decimal, ByVal Sex As String, ByVal IsPaid As Decimal, ByVal agerange As String, ByVal ReceiptDate As Date, ByVal SubReceiptType As String) As V_OpticalShopCusStatisticRow
            Dim rowV_OpticalShopCusStatisticRow As V_OpticalShopCusStatisticRow = CType(Me.NewRow,V_OpticalShopCusStatisticRow)
            Dim columnValuesArray() As Object = New Object() {ReceiptType, F, M, Age, Sex, IsPaid, agerange, ReceiptDate, SubReceiptType}
            rowV_OpticalShopCusStatisticRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowV_OpticalShopCusStatisticRow)
            Return rowV_OpticalShopCusStatisticRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As V_OpticalShopCusStatisticDataTable = CType(MyBase.Clone,V_OpticalShopCusStatisticDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New V_OpticalShopCusStatisticDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnReceiptType = MyBase.Columns("ReceiptType")
            Me.columnF = MyBase.Columns("F")
            Me.columnM = MyBase.Columns("M")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnIsPaid = MyBase.Columns("IsPaid")
            Me.columnagerange = MyBase.Columns("agerange")
            Me.columnReceiptDate = MyBase.Columns("ReceiptDate")
            Me.columnSubReceiptType = MyBase.Columns("SubReceiptType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnReceiptType = New Global.System.Data.DataColumn("ReceiptType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptType)
            Me.columnF = New Global.System.Data.DataColumn("F", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF)
            Me.columnM = New Global.System.Data.DataColumn("M", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnIsPaid = New Global.System.Data.DataColumn("IsPaid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPaid)
            Me.columnagerange = New Global.System.Data.DataColumn("agerange", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnagerange)
            Me.columnReceiptDate = New Global.System.Data.DataColumn("ReceiptDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptDate)
            Me.columnSubReceiptType = New Global.System.Data.DataColumn("SubReceiptType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubReceiptType)
            Me.columnReceiptType.MaxLength = 100
            Me.columnSex.MaxLength = 1
            Me.columnagerange.MaxLength = 5
            Me.columnReceiptDate.ReadOnly = true
            Me.columnSubReceiptType.ReadOnly = true
            Me.columnSubReceiptType.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_OpticalShopCusStatisticRow() As V_OpticalShopCusStatisticRow
            Return CType(Me.NewRow,V_OpticalShopCusStatisticRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New V_OpticalShopCusStatisticRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(V_OpticalShopCusStatisticRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_OpticalShopCusStatisticRowChangedEvent) Is Nothing) Then
                RaiseEvent V_OpticalShopCusStatisticRowChanged(Me, New V_OpticalShopCusStatisticRowChangeEvent(CType(e.Row,V_OpticalShopCusStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_OpticalShopCusStatisticRowChangingEvent) Is Nothing) Then
                RaiseEvent V_OpticalShopCusStatisticRowChanging(Me, New V_OpticalShopCusStatisticRowChangeEvent(CType(e.Row,V_OpticalShopCusStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_OpticalShopCusStatisticRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_OpticalShopCusStatisticRowDeleted(Me, New V_OpticalShopCusStatisticRowChangeEvent(CType(e.Row,V_OpticalShopCusStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_OpticalShopCusStatisticRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_OpticalShopCusStatisticRowDeleting(Me, New V_OpticalShopCusStatisticRowChangeEvent(CType(e.Row,V_OpticalShopCusStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_OpticalShopCusStatisticRow(ByVal row As V_OpticalShopCusStatisticRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_OpticalShopCusStatisticDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_OpticalShopItemSaleOffDataTable
        Inherits Global.System.Data.TypedTableBase(Of V_OpticalShopItemSaleOffRow)
        
        Private columnReceiptDate As Global.System.Data.DataColumn
        
        Private columnReceiptNo As Global.System.Data.DataColumn
        
        Private columnIsPaid As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnItemPrice As Global.System.Data.DataColumn
        
        Private columnItemQTY As Global.System.Data.DataColumn
        
        Private columnSubTotalReal As Global.System.Data.DataColumn
        
        Private columnSubTotalDolar As Global.System.Data.DataColumn
        
        Private columnCateName As Global.System.Data.DataColumn
        
        Private columnItemPrice1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_OpticalShopItemSaleOff"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemQTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotalReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotalDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CateNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCateName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemPrice1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemPrice1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_OpticalShopItemSaleOffRow
            Get
                Return CType(Me.Rows(index),V_OpticalShopItemSaleOffRow)
            End Get
        End Property
        
        Public Event V_OpticalShopItemSaleOffRowChanging As V_OpticalShopItemSaleOffRowChangeEventHandler
        
        Public Event V_OpticalShopItemSaleOffRowChanged As V_OpticalShopItemSaleOffRowChangeEventHandler
        
        Public Event V_OpticalShopItemSaleOffRowDeleting As V_OpticalShopItemSaleOffRowChangeEventHandler
        
        Public Event V_OpticalShopItemSaleOffRowDeleted As V_OpticalShopItemSaleOffRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_OpticalShopItemSaleOffRow(ByVal row As V_OpticalShopItemSaleOffRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_OpticalShopItemSaleOffRow(ByVal ReceiptDate As Date, ByVal ReceiptNo As String, ByVal IsPaid As Decimal, ByVal ItemName As String, ByVal ItemPrice As Decimal, ByVal ItemQTY As Decimal, ByVal SubTotalReal As Double, ByVal SubTotalDolar As Double, ByVal CateName As String, ByVal ItemPrice1 As Double) As V_OpticalShopItemSaleOffRow
            Dim rowV_OpticalShopItemSaleOffRow As V_OpticalShopItemSaleOffRow = CType(Me.NewRow,V_OpticalShopItemSaleOffRow)
            Dim columnValuesArray() As Object = New Object() {ReceiptDate, ReceiptNo, IsPaid, ItemName, ItemPrice, ItemQTY, SubTotalReal, SubTotalDolar, CateName, ItemPrice1}
            rowV_OpticalShopItemSaleOffRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowV_OpticalShopItemSaleOffRow)
            Return rowV_OpticalShopItemSaleOffRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As V_OpticalShopItemSaleOffDataTable = CType(MyBase.Clone,V_OpticalShopItemSaleOffDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New V_OpticalShopItemSaleOffDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnReceiptDate = MyBase.Columns("ReceiptDate")
            Me.columnReceiptNo = MyBase.Columns("ReceiptNo")
            Me.columnIsPaid = MyBase.Columns("IsPaid")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnItemPrice = MyBase.Columns("ItemPrice")
            Me.columnItemQTY = MyBase.Columns("ItemQTY")
            Me.columnSubTotalReal = MyBase.Columns("SubTotalReal")
            Me.columnSubTotalDolar = MyBase.Columns("SubTotalDolar")
            Me.columnCateName = MyBase.Columns("CateName")
            Me.columnItemPrice1 = MyBase.Columns("ItemPrice1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnReceiptDate = New Global.System.Data.DataColumn("ReceiptDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptDate)
            Me.columnReceiptNo = New Global.System.Data.DataColumn("ReceiptNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptNo)
            Me.columnIsPaid = New Global.System.Data.DataColumn("IsPaid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPaid)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnItemPrice = New Global.System.Data.DataColumn("ItemPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemPrice)
            Me.columnItemQTY = New Global.System.Data.DataColumn("ItemQTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemQTY)
            Me.columnSubTotalReal = New Global.System.Data.DataColumn("SubTotalReal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotalReal)
            Me.columnSubTotalDolar = New Global.System.Data.DataColumn("SubTotalDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotalDolar)
            Me.columnCateName = New Global.System.Data.DataColumn("CateName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCateName)
            Me.columnItemPrice1 = New Global.System.Data.DataColumn("ItemPrice1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemPrice1)
            Me.columnReceiptNo.MaxLength = 50
            Me.columnItemName.MaxLength = 150
            Me.columnCateName.MaxLength = 150
            Me.columnItemPrice1.Caption = "ItemPrice"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_OpticalShopItemSaleOffRow() As V_OpticalShopItemSaleOffRow
            Return CType(Me.NewRow,V_OpticalShopItemSaleOffRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New V_OpticalShopItemSaleOffRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(V_OpticalShopItemSaleOffRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_OpticalShopItemSaleOffRowChangedEvent) Is Nothing) Then
                RaiseEvent V_OpticalShopItemSaleOffRowChanged(Me, New V_OpticalShopItemSaleOffRowChangeEvent(CType(e.Row,V_OpticalShopItemSaleOffRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_OpticalShopItemSaleOffRowChangingEvent) Is Nothing) Then
                RaiseEvent V_OpticalShopItemSaleOffRowChanging(Me, New V_OpticalShopItemSaleOffRowChangeEvent(CType(e.Row,V_OpticalShopItemSaleOffRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_OpticalShopItemSaleOffRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_OpticalShopItemSaleOffRowDeleted(Me, New V_OpticalShopItemSaleOffRowChangeEvent(CType(e.Row,V_OpticalShopItemSaleOffRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_OpticalShopItemSaleOffRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_OpticalShopItemSaleOffRowDeleting(Me, New V_OpticalShopItemSaleOffRowChangeEvent(CType(e.Row,V_OpticalShopItemSaleOffRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_OpticalShopItemSaleOffRow(ByVal row As V_OpticalShopItemSaleOffRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_OpticalShopItemSaleOffDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RECEIPT_CUSTOMERDataTable
        Inherits Global.System.Data.TypedTableBase(Of RECEIPT_CUSTOMERRow)
        
        Private columnCustID As Global.System.Data.DataColumn
        
        Private columnCustomerNo As Global.System.Data.DataColumn
        
        Private columnCusName As Global.System.Data.DataColumn
        
        Private columnFemale As Global.System.Data.DataColumn
        
        Private columnMale As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnOccupation As Global.System.Data.DataColumn
        
        Private columnOccNo As Global.System.Data.DataColumn
        
        Private columnProvince As Global.System.Data.DataColumn
        
        Private columnDistrict As Global.System.Data.DataColumn
        
        Private columnCommune As Global.System.Data.DataColumn
        
        Private columnVillage As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnIsPatient As Global.System.Data.DataColumn
        
        Private columnCusNameEng As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RECEIPT_CUSTOMER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CusNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCusName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FemaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OccNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOccNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommuneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommune
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VillageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVillage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPatientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPatient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CusNameEngColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCusNameEng
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RECEIPT_CUSTOMERRow
            Get
                Return CType(Me.Rows(index),RECEIPT_CUSTOMERRow)
            End Get
        End Property
        
        Public Event RECEIPT_CUSTOMERRowChanging As RECEIPT_CUSTOMERRowChangeEventHandler
        
        Public Event RECEIPT_CUSTOMERRowChanged As RECEIPT_CUSTOMERRowChangeEventHandler
        
        Public Event RECEIPT_CUSTOMERRowDeleting As RECEIPT_CUSTOMERRowChangeEventHandler
        
        Public Event RECEIPT_CUSTOMERRowDeleted As RECEIPT_CUSTOMERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRECEIPT_CUSTOMERRow(ByVal row As RECEIPT_CUSTOMERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRECEIPT_CUSTOMERRow(ByVal CustomerNo As Decimal, ByVal CusName As String, ByVal Female As String, ByVal Male As String, ByVal Sex As String, ByVal Age As Decimal, ByVal Occupation As String, ByVal OccNo As Decimal, ByVal Province As Decimal, ByVal District As Decimal, ByVal Commune As Decimal, ByVal Village As Decimal, ByVal Address As String, ByVal IsPatient As Boolean, ByVal CusNameEng As String) As RECEIPT_CUSTOMERRow
            Dim rowRECEIPT_CUSTOMERRow As RECEIPT_CUSTOMERRow = CType(Me.NewRow,RECEIPT_CUSTOMERRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CustomerNo, CusName, Female, Male, Sex, Age, Occupation, OccNo, Province, District, Commune, Village, Address, IsPatient, CusNameEng}
            rowRECEIPT_CUSTOMERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRECEIPT_CUSTOMERRow)
            Return rowRECEIPT_CUSTOMERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RECEIPT_CUSTOMERDataTable = CType(MyBase.Clone,RECEIPT_CUSTOMERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RECEIPT_CUSTOMERDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCustID = MyBase.Columns("CustID")
            Me.columnCustomerNo = MyBase.Columns("CustomerNo")
            Me.columnCusName = MyBase.Columns("CusName")
            Me.columnFemale = MyBase.Columns("Female")
            Me.columnMale = MyBase.Columns("Male")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnOccupation = MyBase.Columns("Occupation")
            Me.columnOccNo = MyBase.Columns("OccNo")
            Me.columnProvince = MyBase.Columns("Province")
            Me.columnDistrict = MyBase.Columns("District")
            Me.columnCommune = MyBase.Columns("Commune")
            Me.columnVillage = MyBase.Columns("Village")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnIsPatient = MyBase.Columns("IsPatient")
            Me.columnCusNameEng = MyBase.Columns("CusNameEng")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCustID = New Global.System.Data.DataColumn("CustID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustID)
            Me.columnCustomerNo = New Global.System.Data.DataColumn("CustomerNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerNo)
            Me.columnCusName = New Global.System.Data.DataColumn("CusName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCusName)
            Me.columnFemale = New Global.System.Data.DataColumn("Female", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemale)
            Me.columnMale = New Global.System.Data.DataColumn("Male", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMale)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnOccupation = New Global.System.Data.DataColumn("Occupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOccupation)
            Me.columnOccNo = New Global.System.Data.DataColumn("OccNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOccNo)
            Me.columnProvince = New Global.System.Data.DataColumn("Province", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvince)
            Me.columnDistrict = New Global.System.Data.DataColumn("District", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistrict)
            Me.columnCommune = New Global.System.Data.DataColumn("Commune", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommune)
            Me.columnVillage = New Global.System.Data.DataColumn("Village", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVillage)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnIsPatient = New Global.System.Data.DataColumn("IsPatient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPatient)
            Me.columnCusNameEng = New Global.System.Data.DataColumn("CusNameEng", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCusNameEng)
            Me.columnCustID.AutoIncrement = true
            Me.columnCustID.AutoIncrementSeed = -1
            Me.columnCustID.AutoIncrementStep = -1
            Me.columnCustID.AllowDBNull = false
            Me.columnCustID.ReadOnly = true
            Me.columnCusName.MaxLength = 50
            Me.columnFemale.MaxLength = 1
            Me.columnMale.MaxLength = 1
            Me.columnSex.MaxLength = 1
            Me.columnOccupation.MaxLength = 100
            Me.columnAddress.MaxLength = 250
            Me.columnCusNameEng.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRECEIPT_CUSTOMERRow() As RECEIPT_CUSTOMERRow
            Return CType(Me.NewRow,RECEIPT_CUSTOMERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RECEIPT_CUSTOMERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RECEIPT_CUSTOMERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RECEIPT_CUSTOMERRowChangedEvent) Is Nothing) Then
                RaiseEvent RECEIPT_CUSTOMERRowChanged(Me, New RECEIPT_CUSTOMERRowChangeEvent(CType(e.Row,RECEIPT_CUSTOMERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RECEIPT_CUSTOMERRowChangingEvent) Is Nothing) Then
                RaiseEvent RECEIPT_CUSTOMERRowChanging(Me, New RECEIPT_CUSTOMERRowChangeEvent(CType(e.Row,RECEIPT_CUSTOMERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RECEIPT_CUSTOMERRowDeletedEvent) Is Nothing) Then
                RaiseEvent RECEIPT_CUSTOMERRowDeleted(Me, New RECEIPT_CUSTOMERRowChangeEvent(CType(e.Row,RECEIPT_CUSTOMERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RECEIPT_CUSTOMERRowDeletingEvent) Is Nothing) Then
                RaiseEvent RECEIPT_CUSTOMERRowDeleting(Me, New RECEIPT_CUSTOMERRowChangeEvent(CType(e.Row,RECEIPT_CUSTOMERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRECEIPT_CUSTOMERRow(ByVal row As RECEIPT_CUSTOMERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RECEIPT_CUSTOMERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_Receipt_InvoiceDataTable
        Inherits Global.System.Data.TypedTableBase(Of V_Receipt_InvoiceRow)
        
        Private columnReceiptID As Global.System.Data.DataColumn
        
        Private columnReceiptDate As Global.System.Data.DataColumn
        
        Private columnCustomerNo As Global.System.Data.DataColumn
        
        Private columnMedicReal As Global.System.Data.DataColumn
        
        Private columnMedicDolar As Global.System.Data.DataColumn
        
        Private columnEyeGlassesReal As Global.System.Data.DataColumn
        
        Private columnEyeGlassesDolar As Global.System.Data.DataColumn
        
        Private columnReadyModDolar As Global.System.Data.DataColumn
        
        Private columnReadyModR As Global.System.Data.DataColumn
        
        Private columnSpectacleDolar As Global.System.Data.DataColumn
        
        Private columnSpectacleR As Global.System.Data.DataColumn
        
        Private columnFundRaisingDolar As Global.System.Data.DataColumn
        
        Private columnFundRaisingR As Global.System.Data.DataColumn
        
        Private columnOtherDolar As Global.System.Data.DataColumn
        
        Private columnOtherR As Global.System.Data.DataColumn
        
        Private columnTotalReal As Global.System.Data.DataColumn
        
        Private columnTotalDolar As Global.System.Data.DataColumn
        
        Private columnAmountInWords As Global.System.Data.DataColumn
        
        Private columnAmountFigureReal As Global.System.Data.DataColumn
        
        Private columnAmountFigureDolar As Global.System.Data.DataColumn
        
        Private columnReturnReal As Global.System.Data.DataColumn
        
        Private columnReturnDolar As Global.System.Data.DataColumn
        
        Private columnIsCurrency As Global.System.Data.DataColumn
        
        Private columnIsDonation As Global.System.Data.DataColumn
        
        Private columnDonationID As Global.System.Data.DataColumn
        
        Private columnPayBySelf As Global.System.Data.DataColumn
        
        Private columnPayByDonation As Global.System.Data.DataColumn
        
        Private columnIsPaid As Global.System.Data.DataColumn
        
        Private columnReceiptNote As Global.System.Data.DataColumn
        
        Private columnUserID As Global.System.Data.DataColumn
        
        Private columnUserName As Global.System.Data.DataColumn
        
        Private columnIncomType As Global.System.Data.DataColumn
        
        Private columnGlasses As Global.System.Data.DataColumn
        
        Private columnDonateAmount As Global.System.Data.DataColumn
        
        Private columnSupportedAmtDolar As Global.System.Data.DataColumn
        
        Private columnSupportedAmtR As Global.System.Data.DataColumn
        
        Private columnReceiptType As Global.System.Data.DataColumn
        
        Private columnPaidR As Global.System.Data.DataColumn
        
        Private columnPaidDollar As Global.System.Data.DataColumn
        
        Private columnIsOldPatient As Global.System.Data.DataColumn
        
        Private columnPaymentType As Global.System.Data.DataColumn
        
        Private columnFullAmount As Global.System.Data.DataColumn
        
        Private columnNilAmount As Global.System.Data.DataColumn
        
        Private columnSocialAmount As Global.System.Data.DataColumn
        
        Private columnPaymentCur As Global.System.Data.DataColumn
        
        Private columnComment As Global.System.Data.DataColumn
        
        Private columnItemID As Global.System.Data.DataColumn
        
        Private columnItemPrice As Global.System.Data.DataColumn
        
        Private columnItemQTY As Global.System.Data.DataColumn
        
        Private columnSubTotalReal As Global.System.Data.DataColumn
        
        Private columnSubTotalDolar As Global.System.Data.DataColumn
        
        Private columnIncomeID As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        Private columnCusName As Global.System.Data.DataColumn
        
        Private columnFemale As Global.System.Data.DataColumn
        
        Private columnMale As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnOccupation As Global.System.Data.DataColumn
        
        Private columnOccNo As Global.System.Data.DataColumn
        
        Private columnProvince As Global.System.Data.DataColumn
        
        Private columnDistrict As Global.System.Data.DataColumn
        
        Private columnCommune As Global.System.Data.DataColumn
        
        Private columnVillage As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnIsPatient As Global.System.Data.DataColumn
        
        Private columnCusNameEng As Global.System.Data.DataColumn
        
        Private columnDonationName As Global.System.Data.DataColumn
        
        Private columnExpr1 As Global.System.Data.DataColumn
        
        Private columnReceiptNo As Global.System.Data.DataColumn
        
        Private columnTotalSocial As Global.System.Data.DataColumn
        
        Private columnTIME_CREATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_Receipt_Invoice"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MedicRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMedicReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MedicDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMedicDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EyeGlassesRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEyeGlassesReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EyeGlassesDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEyeGlassesDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReadyModDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReadyModDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReadyModRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReadyModR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SpectacleDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpectacleDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SpectacleRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpectacleR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FundRaisingDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFundRaisingDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FundRaisingRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFundRaisingR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOtherDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOtherR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountInWordsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmountInWords
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountFigureRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmountFigureReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountFigureDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmountFigureDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReturnRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReturnReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReturnDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReturnDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsCurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDonationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDonation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DonationIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDonationID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayBySelfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayBySelf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayByDonationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayByDonation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptNoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptNote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IncomTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIncomType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GlassesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGlasses
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DonateAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDonateAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupportedAmtDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupportedAmtDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupportedAmtRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupportedAmtR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaidR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidDollarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaidDollar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsOldPatientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsOldPatient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FullAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFullAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NilAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNilAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SocialAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSocialAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentCurColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentCur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemQTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotalReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotalDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IncomeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIncomeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CusNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCusName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FemaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OccNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOccNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommuneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommune
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VillageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVillage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPatientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPatient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CusNameEngColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCusNameEng
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DonationNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDonationName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIME_CREATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIME_CREATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_Receipt_InvoiceRow
            Get
                Return CType(Me.Rows(index),V_Receipt_InvoiceRow)
            End Get
        End Property
        
        Public Event V_Receipt_InvoiceRowChanging As V_Receipt_InvoiceRowChangeEventHandler
        
        Public Event V_Receipt_InvoiceRowChanged As V_Receipt_InvoiceRowChangeEventHandler
        
        Public Event V_Receipt_InvoiceRowDeleting As V_Receipt_InvoiceRowChangeEventHandler
        
        Public Event V_Receipt_InvoiceRowDeleted As V_Receipt_InvoiceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_Receipt_InvoiceRow(ByVal row As V_Receipt_InvoiceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_Receipt_InvoiceRow( _
                    ByVal ReceiptID As Decimal,  _
                    ByVal ReceiptDate As Date,  _
                    ByVal CustomerNo As Decimal,  _
                    ByVal MedicReal As Double,  _
                    ByVal MedicDolar As Double,  _
                    ByVal EyeGlassesReal As Double,  _
                    ByVal EyeGlassesDolar As Double,  _
                    ByVal ReadyModDolar As Double,  _
                    ByVal ReadyModR As Double,  _
                    ByVal SpectacleDolar As Double,  _
                    ByVal SpectacleR As Double,  _
                    ByVal FundRaisingDolar As Double,  _
                    ByVal FundRaisingR As Double,  _
                    ByVal OtherDolar As Double,  _
                    ByVal OtherR As Double,  _
                    ByVal TotalReal As Double,  _
                    ByVal TotalDolar As Double,  _
                    ByVal AmountInWords As String,  _
                    ByVal AmountFigureReal As Double,  _
                    ByVal AmountFigureDolar As Double,  _
                    ByVal ReturnReal As Double,  _
                    ByVal ReturnDolar As Double,  _
                    ByVal IsCurrency As Boolean,  _
                    ByVal IsDonation As Boolean,  _
                    ByVal DonationID As Decimal,  _
                    ByVal PayBySelf As Double,  _
                    ByVal PayByDonation As Double,  _
                    ByVal IsPaid As Decimal,  _
                    ByVal ReceiptNote As String,  _
                    ByVal UserID As Decimal,  _
                    ByVal UserName As String,  _
                    ByVal IncomType As String,  _
                    ByVal Glasses As Integer,  _
                    ByVal DonateAmount As Double,  _
                    ByVal SupportedAmtDolar As Double,  _
                    ByVal SupportedAmtR As Double,  _
                    ByVal ReceiptType As String,  _
                    ByVal PaidR As Double,  _
                    ByVal PaidDollar As Double,  _
                    ByVal IsOldPatient As Boolean,  _
                    ByVal PaymentType As Integer,  _
                    ByVal FullAmount As Double,  _
                    ByVal NilAmount As Double,  _
                    ByVal SocialAmount As Double,  _
                    ByVal PaymentCur As String,  _
                    ByVal Comment As String,  _
                    ByVal ItemID As String,  _
                    ByVal ItemPrice As Double,  _
                    ByVal ItemQTY As Decimal,  _
                    ByVal SubTotalReal As Double,  _
                    ByVal SubTotalDolar As Double,  _
                    ByVal IncomeID As Decimal,  _
                    ByVal ItemName As String,  _
                    ByVal Barcode As String,  _
                    ByVal CusName As String,  _
                    ByVal Female As String,  _
                    ByVal Male As String,  _
                    ByVal Sex As String,  _
                    ByVal Age As Decimal,  _
                    ByVal Occupation As String,  _
                    ByVal OccNo As Decimal,  _
                    ByVal Province As Decimal,  _
                    ByVal District As Decimal,  _
                    ByVal Commune As Decimal,  _
                    ByVal Village As Decimal,  _
                    ByVal Address As String,  _
                    ByVal IsPatient As Boolean,  _
                    ByVal CusNameEng As String,  _
                    ByVal DonationName As String,  _
                    ByVal Expr1 As Decimal,  _
                    ByVal ReceiptNo As String,  _
                    ByVal TotalSocial As Double,  _
                    ByVal TIME_CREATE As String) As V_Receipt_InvoiceRow
            Dim rowV_Receipt_InvoiceRow As V_Receipt_InvoiceRow = CType(Me.NewRow,V_Receipt_InvoiceRow)
            Dim columnValuesArray() As Object = New Object() {ReceiptID, ReceiptDate, CustomerNo, MedicReal, MedicDolar, EyeGlassesReal, EyeGlassesDolar, ReadyModDolar, ReadyModR, SpectacleDolar, SpectacleR, FundRaisingDolar, FundRaisingR, OtherDolar, OtherR, TotalReal, TotalDolar, AmountInWords, AmountFigureReal, AmountFigureDolar, ReturnReal, ReturnDolar, IsCurrency, IsDonation, DonationID, PayBySelf, PayByDonation, IsPaid, ReceiptNote, UserID, UserName, IncomType, Glasses, DonateAmount, SupportedAmtDolar, SupportedAmtR, ReceiptType, PaidR, PaidDollar, IsOldPatient, PaymentType, FullAmount, NilAmount, SocialAmount, PaymentCur, Comment, ItemID, ItemPrice, ItemQTY, SubTotalReal, SubTotalDolar, IncomeID, ItemName, Barcode, CusName, Female, Male, Sex, Age, Occupation, OccNo, Province, District, Commune, Village, Address, IsPatient, CusNameEng, DonationName, Expr1, ReceiptNo, TotalSocial, TIME_CREATE}
            rowV_Receipt_InvoiceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowV_Receipt_InvoiceRow)
            Return rowV_Receipt_InvoiceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As V_Receipt_InvoiceDataTable = CType(MyBase.Clone,V_Receipt_InvoiceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New V_Receipt_InvoiceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnReceiptID = MyBase.Columns("ReceiptID")
            Me.columnReceiptDate = MyBase.Columns("ReceiptDate")
            Me.columnCustomerNo = MyBase.Columns("CustomerNo")
            Me.columnMedicReal = MyBase.Columns("MedicReal")
            Me.columnMedicDolar = MyBase.Columns("MedicDolar")
            Me.columnEyeGlassesReal = MyBase.Columns("EyeGlassesReal")
            Me.columnEyeGlassesDolar = MyBase.Columns("EyeGlassesDolar")
            Me.columnReadyModDolar = MyBase.Columns("ReadyModDolar")
            Me.columnReadyModR = MyBase.Columns("ReadyModR")
            Me.columnSpectacleDolar = MyBase.Columns("SpectacleDolar")
            Me.columnSpectacleR = MyBase.Columns("SpectacleR")
            Me.columnFundRaisingDolar = MyBase.Columns("FundRaisingDolar")
            Me.columnFundRaisingR = MyBase.Columns("FundRaisingR")
            Me.columnOtherDolar = MyBase.Columns("OtherDolar")
            Me.columnOtherR = MyBase.Columns("OtherR")
            Me.columnTotalReal = MyBase.Columns("TotalReal")
            Me.columnTotalDolar = MyBase.Columns("TotalDolar")
            Me.columnAmountInWords = MyBase.Columns("AmountInWords")
            Me.columnAmountFigureReal = MyBase.Columns("AmountFigureReal")
            Me.columnAmountFigureDolar = MyBase.Columns("AmountFigureDolar")
            Me.columnReturnReal = MyBase.Columns("ReturnReal")
            Me.columnReturnDolar = MyBase.Columns("ReturnDolar")
            Me.columnIsCurrency = MyBase.Columns("IsCurrency")
            Me.columnIsDonation = MyBase.Columns("IsDonation")
            Me.columnDonationID = MyBase.Columns("DonationID")
            Me.columnPayBySelf = MyBase.Columns("PayBySelf")
            Me.columnPayByDonation = MyBase.Columns("PayByDonation")
            Me.columnIsPaid = MyBase.Columns("IsPaid")
            Me.columnReceiptNote = MyBase.Columns("ReceiptNote")
            Me.columnUserID = MyBase.Columns("UserID")
            Me.columnUserName = MyBase.Columns("UserName")
            Me.columnIncomType = MyBase.Columns("IncomType")
            Me.columnGlasses = MyBase.Columns("Glasses")
            Me.columnDonateAmount = MyBase.Columns("DonateAmount")
            Me.columnSupportedAmtDolar = MyBase.Columns("SupportedAmtDolar")
            Me.columnSupportedAmtR = MyBase.Columns("SupportedAmtR")
            Me.columnReceiptType = MyBase.Columns("ReceiptType")
            Me.columnPaidR = MyBase.Columns("PaidR")
            Me.columnPaidDollar = MyBase.Columns("PaidDollar")
            Me.columnIsOldPatient = MyBase.Columns("IsOldPatient")
            Me.columnPaymentType = MyBase.Columns("PaymentType")
            Me.columnFullAmount = MyBase.Columns("FullAmount")
            Me.columnNilAmount = MyBase.Columns("NilAmount")
            Me.columnSocialAmount = MyBase.Columns("SocialAmount")
            Me.columnPaymentCur = MyBase.Columns("PaymentCur")
            Me.columnComment = MyBase.Columns("Comment")
            Me.columnItemID = MyBase.Columns("ItemID")
            Me.columnItemPrice = MyBase.Columns("ItemPrice")
            Me.columnItemQTY = MyBase.Columns("ItemQTY")
            Me.columnSubTotalReal = MyBase.Columns("SubTotalReal")
            Me.columnSubTotalDolar = MyBase.Columns("SubTotalDolar")
            Me.columnIncomeID = MyBase.Columns("IncomeID")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnBarcode = MyBase.Columns("Barcode")
            Me.columnCusName = MyBase.Columns("CusName")
            Me.columnFemale = MyBase.Columns("Female")
            Me.columnMale = MyBase.Columns("Male")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnOccupation = MyBase.Columns("Occupation")
            Me.columnOccNo = MyBase.Columns("OccNo")
            Me.columnProvince = MyBase.Columns("Province")
            Me.columnDistrict = MyBase.Columns("District")
            Me.columnCommune = MyBase.Columns("Commune")
            Me.columnVillage = MyBase.Columns("Village")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnIsPatient = MyBase.Columns("IsPatient")
            Me.columnCusNameEng = MyBase.Columns("CusNameEng")
            Me.columnDonationName = MyBase.Columns("DonationName")
            Me.columnExpr1 = MyBase.Columns("Expr1")
            Me.columnReceiptNo = MyBase.Columns("ReceiptNo")
            Me.columnTotalSocial = MyBase.Columns("TotalSocial")
            Me.columnTIME_CREATE = MyBase.Columns("TIME_CREATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnReceiptID = New Global.System.Data.DataColumn("ReceiptID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptID)
            Me.columnReceiptDate = New Global.System.Data.DataColumn("ReceiptDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptDate)
            Me.columnCustomerNo = New Global.System.Data.DataColumn("CustomerNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerNo)
            Me.columnMedicReal = New Global.System.Data.DataColumn("MedicReal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMedicReal)
            Me.columnMedicDolar = New Global.System.Data.DataColumn("MedicDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMedicDolar)
            Me.columnEyeGlassesReal = New Global.System.Data.DataColumn("EyeGlassesReal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEyeGlassesReal)
            Me.columnEyeGlassesDolar = New Global.System.Data.DataColumn("EyeGlassesDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEyeGlassesDolar)
            Me.columnReadyModDolar = New Global.System.Data.DataColumn("ReadyModDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReadyModDolar)
            Me.columnReadyModR = New Global.System.Data.DataColumn("ReadyModR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReadyModR)
            Me.columnSpectacleDolar = New Global.System.Data.DataColumn("SpectacleDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpectacleDolar)
            Me.columnSpectacleR = New Global.System.Data.DataColumn("SpectacleR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpectacleR)
            Me.columnFundRaisingDolar = New Global.System.Data.DataColumn("FundRaisingDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFundRaisingDolar)
            Me.columnFundRaisingR = New Global.System.Data.DataColumn("FundRaisingR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFundRaisingR)
            Me.columnOtherDolar = New Global.System.Data.DataColumn("OtherDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOtherDolar)
            Me.columnOtherR = New Global.System.Data.DataColumn("OtherR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOtherR)
            Me.columnTotalReal = New Global.System.Data.DataColumn("TotalReal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalReal)
            Me.columnTotalDolar = New Global.System.Data.DataColumn("TotalDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalDolar)
            Me.columnAmountInWords = New Global.System.Data.DataColumn("AmountInWords", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmountInWords)
            Me.columnAmountFigureReal = New Global.System.Data.DataColumn("AmountFigureReal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmountFigureReal)
            Me.columnAmountFigureDolar = New Global.System.Data.DataColumn("AmountFigureDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmountFigureDolar)
            Me.columnReturnReal = New Global.System.Data.DataColumn("ReturnReal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReturnReal)
            Me.columnReturnDolar = New Global.System.Data.DataColumn("ReturnDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReturnDolar)
            Me.columnIsCurrency = New Global.System.Data.DataColumn("IsCurrency", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsCurrency)
            Me.columnIsDonation = New Global.System.Data.DataColumn("IsDonation", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDonation)
            Me.columnDonationID = New Global.System.Data.DataColumn("DonationID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDonationID)
            Me.columnPayBySelf = New Global.System.Data.DataColumn("PayBySelf", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayBySelf)
            Me.columnPayByDonation = New Global.System.Data.DataColumn("PayByDonation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayByDonation)
            Me.columnIsPaid = New Global.System.Data.DataColumn("IsPaid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPaid)
            Me.columnReceiptNote = New Global.System.Data.DataColumn("ReceiptNote", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptNote)
            Me.columnUserID = New Global.System.Data.DataColumn("UserID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserID)
            Me.columnUserName = New Global.System.Data.DataColumn("UserName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserName)
            Me.columnIncomType = New Global.System.Data.DataColumn("IncomType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIncomType)
            Me.columnGlasses = New Global.System.Data.DataColumn("Glasses", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGlasses)
            Me.columnDonateAmount = New Global.System.Data.DataColumn("DonateAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDonateAmount)
            Me.columnSupportedAmtDolar = New Global.System.Data.DataColumn("SupportedAmtDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupportedAmtDolar)
            Me.columnSupportedAmtR = New Global.System.Data.DataColumn("SupportedAmtR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupportedAmtR)
            Me.columnReceiptType = New Global.System.Data.DataColumn("ReceiptType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptType)
            Me.columnPaidR = New Global.System.Data.DataColumn("PaidR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaidR)
            Me.columnPaidDollar = New Global.System.Data.DataColumn("PaidDollar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaidDollar)
            Me.columnIsOldPatient = New Global.System.Data.DataColumn("IsOldPatient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsOldPatient)
            Me.columnPaymentType = New Global.System.Data.DataColumn("PaymentType", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentType)
            Me.columnFullAmount = New Global.System.Data.DataColumn("FullAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFullAmount)
            Me.columnNilAmount = New Global.System.Data.DataColumn("NilAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNilAmount)
            Me.columnSocialAmount = New Global.System.Data.DataColumn("SocialAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSocialAmount)
            Me.columnPaymentCur = New Global.System.Data.DataColumn("PaymentCur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentCur)
            Me.columnComment = New Global.System.Data.DataColumn("Comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComment)
            Me.columnItemID = New Global.System.Data.DataColumn("ItemID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemID)
            Me.columnItemPrice = New Global.System.Data.DataColumn("ItemPrice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemPrice)
            Me.columnItemQTY = New Global.System.Data.DataColumn("ItemQTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemQTY)
            Me.columnSubTotalReal = New Global.System.Data.DataColumn("SubTotalReal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotalReal)
            Me.columnSubTotalDolar = New Global.System.Data.DataColumn("SubTotalDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotalDolar)
            Me.columnIncomeID = New Global.System.Data.DataColumn("IncomeID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIncomeID)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.columnCusName = New Global.System.Data.DataColumn("CusName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCusName)
            Me.columnFemale = New Global.System.Data.DataColumn("Female", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemale)
            Me.columnMale = New Global.System.Data.DataColumn("Male", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMale)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnOccupation = New Global.System.Data.DataColumn("Occupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOccupation)
            Me.columnOccNo = New Global.System.Data.DataColumn("OccNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOccNo)
            Me.columnProvince = New Global.System.Data.DataColumn("Province", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvince)
            Me.columnDistrict = New Global.System.Data.DataColumn("District", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistrict)
            Me.columnCommune = New Global.System.Data.DataColumn("Commune", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommune)
            Me.columnVillage = New Global.System.Data.DataColumn("Village", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVillage)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnIsPatient = New Global.System.Data.DataColumn("IsPatient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPatient)
            Me.columnCusNameEng = New Global.System.Data.DataColumn("CusNameEng", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCusNameEng)
            Me.columnDonationName = New Global.System.Data.DataColumn("DonationName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDonationName)
            Me.columnExpr1 = New Global.System.Data.DataColumn("Expr1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr1)
            Me.columnReceiptNo = New Global.System.Data.DataColumn("ReceiptNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptNo)
            Me.columnTotalSocial = New Global.System.Data.DataColumn("TotalSocial", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalSocial)
            Me.columnTIME_CREATE = New Global.System.Data.DataColumn("TIME_CREATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIME_CREATE)
            Me.columnReceiptID.AllowDBNull = false
            Me.columnAmountInWords.MaxLength = 200
            Me.columnReceiptNote.MaxLength = 250
            Me.columnUserName.MaxLength = 50
            Me.columnIncomType.MaxLength = 1
            Me.columnReceiptType.MaxLength = 100
            Me.columnPaymentCur.MaxLength = 50
            Me.columnComment.MaxLength = 500
            Me.columnItemID.MaxLength = 50
            Me.columnItemName.MaxLength = 150
            Me.columnBarcode.MaxLength = 50
            Me.columnCusName.MaxLength = 50
            Me.columnFemale.MaxLength = 1
            Me.columnMale.MaxLength = 1
            Me.columnSex.MaxLength = 1
            Me.columnOccupation.MaxLength = 100
            Me.columnAddress.MaxLength = 250
            Me.columnCusNameEng.MaxLength = 100
            Me.columnDonationName.MaxLength = 50
            Me.columnReceiptNo.MaxLength = 50
            Me.columnTIME_CREATE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_Receipt_InvoiceRow() As V_Receipt_InvoiceRow
            Return CType(Me.NewRow,V_Receipt_InvoiceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New V_Receipt_InvoiceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(V_Receipt_InvoiceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_Receipt_InvoiceRowChangedEvent) Is Nothing) Then
                RaiseEvent V_Receipt_InvoiceRowChanged(Me, New V_Receipt_InvoiceRowChangeEvent(CType(e.Row,V_Receipt_InvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_Receipt_InvoiceRowChangingEvent) Is Nothing) Then
                RaiseEvent V_Receipt_InvoiceRowChanging(Me, New V_Receipt_InvoiceRowChangeEvent(CType(e.Row,V_Receipt_InvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_Receipt_InvoiceRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_Receipt_InvoiceRowDeleted(Me, New V_Receipt_InvoiceRowChangeEvent(CType(e.Row,V_Receipt_InvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_Receipt_InvoiceRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_Receipt_InvoiceRowDeleting(Me, New V_Receipt_InvoiceRowChangeEvent(CType(e.Row,V_Receipt_InvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_Receipt_InvoiceRow(ByVal row As V_Receipt_InvoiceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_Receipt_InvoiceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VMainReceiptNILDataTable
        Inherits Global.System.Data.TypedTableBase(Of VMainReceiptNILRow)
        
        Private columnReceiptNILId As Global.System.Data.DataColumn
        
        Private columnReceiptNILDate As Global.System.Data.DataColumn
        
        Private columnPatientNo As Global.System.Data.DataColumn
        
        Private columnUserID As Global.System.Data.DataColumn
        
        Private columnUserName As Global.System.Data.DataColumn
        
        Private columnGlasses As Global.System.Data.DataColumn
        
        Private columnOlePatientNo As Global.System.Data.DataColumn
        
        Private columnCreateDate As Global.System.Data.DataColumn
        
        Private columnProvince As Global.System.Data.DataColumn
        
        Private columnDistrict As Global.System.Data.DataColumn
        
        Private columnCommune As Global.System.Data.DataColumn
        
        Private columnNameEng As Global.System.Data.DataColumn
        
        Private columnNameKhmer As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnMale As Global.System.Data.DataColumn
        
        Private columnFemale As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnOccupation As Global.System.Data.DataColumn
        
        Private columnTelephone As Global.System.Data.DataColumn
        
        Private columnNeighborly As Global.System.Data.DataColumn
        
        Private columnYears As Global.System.Data.DataColumn
        
        Private columnAchieve As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VMainReceiptNIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptNILIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptNILId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptNILDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptNILDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GlassesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGlasses
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OlePatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOlePatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommuneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommune
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameEngColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameEng
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameKhmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameKhmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FemaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelephoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelephone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NeighborlyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNeighborly
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYears
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AchieveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAchieve
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VMainReceiptNILRow
            Get
                Return CType(Me.Rows(index),VMainReceiptNILRow)
            End Get
        End Property
        
        Public Event VMainReceiptNILRowChanging As VMainReceiptNILRowChangeEventHandler
        
        Public Event VMainReceiptNILRowChanged As VMainReceiptNILRowChangeEventHandler
        
        Public Event VMainReceiptNILRowDeleting As VMainReceiptNILRowChangeEventHandler
        
        Public Event VMainReceiptNILRowDeleted As VMainReceiptNILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVMainReceiptNILRow(ByVal row As VMainReceiptNILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVMainReceiptNILRow( _
                    ByVal ReceiptNILId As Decimal,  _
                    ByVal ReceiptNILDate As Date,  _
                    ByVal PatientNo As Decimal,  _
                    ByVal UserID As Decimal,  _
                    ByVal UserName As String,  _
                    ByVal Glasses As Integer,  _
                    ByVal OlePatientNo As Decimal,  _
                    ByVal CreateDate As Date,  _
                    ByVal Province As String,  _
                    ByVal District As String,  _
                    ByVal Commune As String,  _
                    ByVal NameEng As String,  _
                    ByVal NameKhmer As String,  _
                    ByVal Age As Decimal,  _
                    ByVal Male As String,  _
                    ByVal Female As String,  _
                    ByVal Sex As String,  _
                    ByVal Address As String,  _
                    ByVal Occupation As String,  _
                    ByVal Telephone As String,  _
                    ByVal Neighborly As String,  _
                    ByVal Years As Integer,  _
                    ByVal Achieve As Boolean) As VMainReceiptNILRow
            Dim rowVMainReceiptNILRow As VMainReceiptNILRow = CType(Me.NewRow,VMainReceiptNILRow)
            Dim columnValuesArray() As Object = New Object() {ReceiptNILId, ReceiptNILDate, PatientNo, UserID, UserName, Glasses, OlePatientNo, CreateDate, Province, District, Commune, NameEng, NameKhmer, Age, Male, Female, Sex, Address, Occupation, Telephone, Neighborly, Years, Achieve}
            rowVMainReceiptNILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVMainReceiptNILRow)
            Return rowVMainReceiptNILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByReceiptNILId(ByVal ReceiptNILId As Decimal) As VMainReceiptNILRow
            Return CType(Me.Rows.Find(New Object() {ReceiptNILId}),VMainReceiptNILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VMainReceiptNILDataTable = CType(MyBase.Clone,VMainReceiptNILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VMainReceiptNILDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnReceiptNILId = MyBase.Columns("ReceiptNILId")
            Me.columnReceiptNILDate = MyBase.Columns("ReceiptNILDate")
            Me.columnPatientNo = MyBase.Columns("PatientNo")
            Me.columnUserID = MyBase.Columns("UserID")
            Me.columnUserName = MyBase.Columns("UserName")
            Me.columnGlasses = MyBase.Columns("Glasses")
            Me.columnOlePatientNo = MyBase.Columns("OlePatientNo")
            Me.columnCreateDate = MyBase.Columns("CreateDate")
            Me.columnProvince = MyBase.Columns("Province")
            Me.columnDistrict = MyBase.Columns("District")
            Me.columnCommune = MyBase.Columns("Commune")
            Me.columnNameEng = MyBase.Columns("NameEng")
            Me.columnNameKhmer = MyBase.Columns("NameKhmer")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnMale = MyBase.Columns("Male")
            Me.columnFemale = MyBase.Columns("Female")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnOccupation = MyBase.Columns("Occupation")
            Me.columnTelephone = MyBase.Columns("Telephone")
            Me.columnNeighborly = MyBase.Columns("Neighborly")
            Me.columnYears = MyBase.Columns("Years")
            Me.columnAchieve = MyBase.Columns("Achieve")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnReceiptNILId = New Global.System.Data.DataColumn("ReceiptNILId", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptNILId)
            Me.columnReceiptNILDate = New Global.System.Data.DataColumn("ReceiptNILDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptNILDate)
            Me.columnPatientNo = New Global.System.Data.DataColumn("PatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientNo)
            Me.columnUserID = New Global.System.Data.DataColumn("UserID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserID)
            Me.columnUserName = New Global.System.Data.DataColumn("UserName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserName)
            Me.columnGlasses = New Global.System.Data.DataColumn("Glasses", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGlasses)
            Me.columnOlePatientNo = New Global.System.Data.DataColumn("OlePatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOlePatientNo)
            Me.columnCreateDate = New Global.System.Data.DataColumn("CreateDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDate)
            Me.columnProvince = New Global.System.Data.DataColumn("Province", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvince)
            Me.columnDistrict = New Global.System.Data.DataColumn("District", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistrict)
            Me.columnCommune = New Global.System.Data.DataColumn("Commune", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommune)
            Me.columnNameEng = New Global.System.Data.DataColumn("NameEng", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameEng)
            Me.columnNameKhmer = New Global.System.Data.DataColumn("NameKhmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameKhmer)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnMale = New Global.System.Data.DataColumn("Male", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMale)
            Me.columnFemale = New Global.System.Data.DataColumn("Female", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemale)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnOccupation = New Global.System.Data.DataColumn("Occupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOccupation)
            Me.columnTelephone = New Global.System.Data.DataColumn("Telephone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelephone)
            Me.columnNeighborly = New Global.System.Data.DataColumn("Neighborly", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNeighborly)
            Me.columnYears = New Global.System.Data.DataColumn("Years", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYears)
            Me.columnAchieve = New Global.System.Data.DataColumn("Achieve", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAchieve)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnReceiptNILId}, true))
            Me.columnReceiptNILId.AllowDBNull = false
            Me.columnReceiptNILId.Unique = true
            Me.columnUserName.MaxLength = 50
            Me.columnProvince.MaxLength = 50
            Me.columnDistrict.MaxLength = 50
            Me.columnCommune.MaxLength = 50
            Me.columnNameEng.MaxLength = 50
            Me.columnNameKhmer.MaxLength = 50
            Me.columnMale.MaxLength = 1
            Me.columnFemale.MaxLength = 1
            Me.columnSex.MaxLength = 1
            Me.columnAddress.MaxLength = 1000
            Me.columnOccupation.MaxLength = 50
            Me.columnTelephone.MaxLength = 50
            Me.columnNeighborly.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVMainReceiptNILRow() As VMainReceiptNILRow
            Return CType(Me.NewRow,VMainReceiptNILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VMainReceiptNILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VMainReceiptNILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VMainReceiptNILRowChangedEvent) Is Nothing) Then
                RaiseEvent VMainReceiptNILRowChanged(Me, New VMainReceiptNILRowChangeEvent(CType(e.Row,VMainReceiptNILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VMainReceiptNILRowChangingEvent) Is Nothing) Then
                RaiseEvent VMainReceiptNILRowChanging(Me, New VMainReceiptNILRowChangeEvent(CType(e.Row,VMainReceiptNILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VMainReceiptNILRowDeletedEvent) Is Nothing) Then
                RaiseEvent VMainReceiptNILRowDeleted(Me, New VMainReceiptNILRowChangeEvent(CType(e.Row,VMainReceiptNILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VMainReceiptNILRowDeletingEvent) Is Nothing) Then
                RaiseEvent VMainReceiptNILRowDeleting(Me, New VMainReceiptNILRowChangeEvent(CType(e.Row,VMainReceiptNILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVMainReceiptNILRow(ByVal row As VMainReceiptNILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VMainReceiptNILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VReceiptNILDetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of VReceiptNILDetailRow)
        
        Private columnReceiptNILDId As Global.System.Data.DataColumn
        
        Private columnReceiptNILId As Global.System.Data.DataColumn
        
        Private columnItemID As Global.System.Data.DataColumn
        
        Private columnItemPrice As Global.System.Data.DataColumn
        
        Private columnItemQTY As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VReceiptNILDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptNILDIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptNILDId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptNILIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptNILId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemQTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VReceiptNILDetailRow
            Get
                Return CType(Me.Rows(index),VReceiptNILDetailRow)
            End Get
        End Property
        
        Public Event VReceiptNILDetailRowChanging As VReceiptNILDetailRowChangeEventHandler
        
        Public Event VReceiptNILDetailRowChanged As VReceiptNILDetailRowChangeEventHandler
        
        Public Event VReceiptNILDetailRowDeleting As VReceiptNILDetailRowChangeEventHandler
        
        Public Event VReceiptNILDetailRowDeleted As VReceiptNILDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVReceiptNILDetailRow(ByVal row As VReceiptNILDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVReceiptNILDetailRow(ByVal ReceiptNILDId As Decimal, ByVal parentVMainReceiptNILRowByVMainReceiptNIL_VReceiptNILDetail As VMainReceiptNILRow, ByVal ItemID As Integer, ByVal ItemPrice As Double, ByVal ItemQTY As Decimal, ByVal ItemName As String, ByVal Barcode As String) As VReceiptNILDetailRow
            Dim rowVReceiptNILDetailRow As VReceiptNILDetailRow = CType(Me.NewRow,VReceiptNILDetailRow)
            Dim columnValuesArray() As Object = New Object() {ReceiptNILDId, Nothing, ItemID, ItemPrice, ItemQTY, ItemName, Barcode}
            If (Not (parentVMainReceiptNILRowByVMainReceiptNIL_VReceiptNILDetail) Is Nothing) Then
                columnValuesArray(1) = parentVMainReceiptNILRowByVMainReceiptNIL_VReceiptNILDetail(0)
            End If
            rowVReceiptNILDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVReceiptNILDetailRow)
            Return rowVReceiptNILDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByReceiptNILDId(ByVal ReceiptNILDId As Decimal) As VReceiptNILDetailRow
            Return CType(Me.Rows.Find(New Object() {ReceiptNILDId}),VReceiptNILDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VReceiptNILDetailDataTable = CType(MyBase.Clone,VReceiptNILDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VReceiptNILDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnReceiptNILDId = MyBase.Columns("ReceiptNILDId")
            Me.columnReceiptNILId = MyBase.Columns("ReceiptNILId")
            Me.columnItemID = MyBase.Columns("ItemID")
            Me.columnItemPrice = MyBase.Columns("ItemPrice")
            Me.columnItemQTY = MyBase.Columns("ItemQTY")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnBarcode = MyBase.Columns("Barcode")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnReceiptNILDId = New Global.System.Data.DataColumn("ReceiptNILDId", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptNILDId)
            Me.columnReceiptNILId = New Global.System.Data.DataColumn("ReceiptNILId", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptNILId)
            Me.columnItemID = New Global.System.Data.DataColumn("ItemID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemID)
            Me.columnItemPrice = New Global.System.Data.DataColumn("ItemPrice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemPrice)
            Me.columnItemQTY = New Global.System.Data.DataColumn("ItemQTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemQTY)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnReceiptNILDId}, true))
            Me.columnReceiptNILDId.AllowDBNull = false
            Me.columnReceiptNILDId.Unique = true
            Me.columnItemName.MaxLength = 150
            Me.columnBarcode.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVReceiptNILDetailRow() As VReceiptNILDetailRow
            Return CType(Me.NewRow,VReceiptNILDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VReceiptNILDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VReceiptNILDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VReceiptNILDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent VReceiptNILDetailRowChanged(Me, New VReceiptNILDetailRowChangeEvent(CType(e.Row,VReceiptNILDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VReceiptNILDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent VReceiptNILDetailRowChanging(Me, New VReceiptNILDetailRowChangeEvent(CType(e.Row,VReceiptNILDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VReceiptNILDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent VReceiptNILDetailRowDeleted(Me, New VReceiptNILDetailRowChangeEvent(CType(e.Row,VReceiptNILDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VReceiptNILDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent VReceiptNILDetailRowDeleting(Me, New VReceiptNILDetailRowChangeEvent(CType(e.Row,VReceiptNILDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVReceiptNILDetailRow(ByVal row As VReceiptNILDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VReceiptNILDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_OpticalShopPatientStatisticByIcomeTypeDataTable
        Inherits Global.System.Data.TypedTableBase(Of V_OpticalShopPatientStatisticByIcomeTypeRow)
        
        Private columnIsOldPatient As Global.System.Data.DataColumn
        
        Private columnIncomType As Global.System.Data.DataColumn
        
        Private columnReceiptType As Global.System.Data.DataColumn
        
        Private columnF As Global.System.Data.DataColumn
        
        Private columnM As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnIsPaid As Global.System.Data.DataColumn
        
        Private columnagerange As Global.System.Data.DataColumn
        
        Private columnReceiptDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_OpticalShopPatientStatisticByIcomeType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsOldPatientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsOldPatient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IncomTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIncomType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property agerangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnagerange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_OpticalShopPatientStatisticByIcomeTypeRow
            Get
                Return CType(Me.Rows(index),V_OpticalShopPatientStatisticByIcomeTypeRow)
            End Get
        End Property
        
        Public Event V_OpticalShopPatientStatisticByIcomeTypeRowChanging As V_OpticalShopPatientStatisticByIcomeTypeRowChangeEventHandler
        
        Public Event V_OpticalShopPatientStatisticByIcomeTypeRowChanged As V_OpticalShopPatientStatisticByIcomeTypeRowChangeEventHandler
        
        Public Event V_OpticalShopPatientStatisticByIcomeTypeRowDeleting As V_OpticalShopPatientStatisticByIcomeTypeRowChangeEventHandler
        
        Public Event V_OpticalShopPatientStatisticByIcomeTypeRowDeleted As V_OpticalShopPatientStatisticByIcomeTypeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_OpticalShopPatientStatisticByIcomeTypeRow(ByVal row As V_OpticalShopPatientStatisticByIcomeTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_OpticalShopPatientStatisticByIcomeTypeRow(ByVal IsOldPatient As Boolean, ByVal IncomType As String, ByVal ReceiptType As String, ByVal F As Integer, ByVal M As Integer, ByVal Age As Decimal, ByVal Sex As String, ByVal IsPaid As Decimal, ByVal agerange As String, ByVal ReceiptDate As Date) As V_OpticalShopPatientStatisticByIcomeTypeRow
            Dim rowV_OpticalShopPatientStatisticByIcomeTypeRow As V_OpticalShopPatientStatisticByIcomeTypeRow = CType(Me.NewRow,V_OpticalShopPatientStatisticByIcomeTypeRow)
            Dim columnValuesArray() As Object = New Object() {IsOldPatient, IncomType, ReceiptType, F, M, Age, Sex, IsPaid, agerange, ReceiptDate}
            rowV_OpticalShopPatientStatisticByIcomeTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowV_OpticalShopPatientStatisticByIcomeTypeRow)
            Return rowV_OpticalShopPatientStatisticByIcomeTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As V_OpticalShopPatientStatisticByIcomeTypeDataTable = CType(MyBase.Clone,V_OpticalShopPatientStatisticByIcomeTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New V_OpticalShopPatientStatisticByIcomeTypeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIsOldPatient = MyBase.Columns("IsOldPatient")
            Me.columnIncomType = MyBase.Columns("IncomType")
            Me.columnReceiptType = MyBase.Columns("ReceiptType")
            Me.columnF = MyBase.Columns("F")
            Me.columnM = MyBase.Columns("M")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnIsPaid = MyBase.Columns("IsPaid")
            Me.columnagerange = MyBase.Columns("agerange")
            Me.columnReceiptDate = MyBase.Columns("ReceiptDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIsOldPatient = New Global.System.Data.DataColumn("IsOldPatient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsOldPatient)
            Me.columnIncomType = New Global.System.Data.DataColumn("IncomType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIncomType)
            Me.columnReceiptType = New Global.System.Data.DataColumn("ReceiptType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptType)
            Me.columnF = New Global.System.Data.DataColumn("F", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF)
            Me.columnM = New Global.System.Data.DataColumn("M", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnIsPaid = New Global.System.Data.DataColumn("IsPaid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPaid)
            Me.columnagerange = New Global.System.Data.DataColumn("agerange", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnagerange)
            Me.columnReceiptDate = New Global.System.Data.DataColumn("ReceiptDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptDate)
            Me.columnIncomType.MaxLength = 1
            Me.columnReceiptType.MaxLength = 100
            Me.columnSex.MaxLength = 1
            Me.columnagerange.AllowDBNull = false
            Me.columnagerange.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_OpticalShopPatientStatisticByIcomeTypeRow() As V_OpticalShopPatientStatisticByIcomeTypeRow
            Return CType(Me.NewRow,V_OpticalShopPatientStatisticByIcomeTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New V_OpticalShopPatientStatisticByIcomeTypeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(V_OpticalShopPatientStatisticByIcomeTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_OpticalShopPatientStatisticByIcomeTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent V_OpticalShopPatientStatisticByIcomeTypeRowChanged(Me, New V_OpticalShopPatientStatisticByIcomeTypeRowChangeEvent(CType(e.Row,V_OpticalShopPatientStatisticByIcomeTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_OpticalShopPatientStatisticByIcomeTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent V_OpticalShopPatientStatisticByIcomeTypeRowChanging(Me, New V_OpticalShopPatientStatisticByIcomeTypeRowChangeEvent(CType(e.Row,V_OpticalShopPatientStatisticByIcomeTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_OpticalShopPatientStatisticByIcomeTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_OpticalShopPatientStatisticByIcomeTypeRowDeleted(Me, New V_OpticalShopPatientStatisticByIcomeTypeRowChangeEvent(CType(e.Row,V_OpticalShopPatientStatisticByIcomeTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_OpticalShopPatientStatisticByIcomeTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_OpticalShopPatientStatisticByIcomeTypeRowDeleting(Me, New V_OpticalShopPatientStatisticByIcomeTypeRowChangeEvent(CType(e.Row,V_OpticalShopPatientStatisticByIcomeTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_OpticalShopPatientStatisticByIcomeTypeRow(ByVal row As V_OpticalShopPatientStatisticByIcomeTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_OpticalShopPatientStatisticByIcomeTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_OpticalShopPaymentTypeByAgeStatisticDataTable
        Inherits Global.System.Data.TypedTableBase(Of V_OpticalShopPaymentTypeByAgeStatisticRow)
        
        Private columnPaymentType As Global.System.Data.DataColumn
        
        Private columnIsOldPatient As Global.System.Data.DataColumn
        
        Private columnIncomType As Global.System.Data.DataColumn
        
        Private columnReceiptType As Global.System.Data.DataColumn
        
        Private columnF As Global.System.Data.DataColumn
        
        Private columnM As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnIsPaid As Global.System.Data.DataColumn
        
        Private columnagerange As Global.System.Data.DataColumn
        
        Private columnReceiptDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_OpticalShopPaymentTypeByAgeStatistic"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsOldPatientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsOldPatient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IncomTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIncomType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property agerangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnagerange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_OpticalShopPaymentTypeByAgeStatisticRow
            Get
                Return CType(Me.Rows(index),V_OpticalShopPaymentTypeByAgeStatisticRow)
            End Get
        End Property
        
        Public Event V_OpticalShopPaymentTypeByAgeStatisticRowChanging As V_OpticalShopPaymentTypeByAgeStatisticRowChangeEventHandler
        
        Public Event V_OpticalShopPaymentTypeByAgeStatisticRowChanged As V_OpticalShopPaymentTypeByAgeStatisticRowChangeEventHandler
        
        Public Event V_OpticalShopPaymentTypeByAgeStatisticRowDeleting As V_OpticalShopPaymentTypeByAgeStatisticRowChangeEventHandler
        
        Public Event V_OpticalShopPaymentTypeByAgeStatisticRowDeleted As V_OpticalShopPaymentTypeByAgeStatisticRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_OpticalShopPaymentTypeByAgeStatisticRow(ByVal row As V_OpticalShopPaymentTypeByAgeStatisticRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_OpticalShopPaymentTypeByAgeStatisticRow(ByVal PaymentType As Integer, ByVal IsOldPatient As Boolean, ByVal IncomType As String, ByVal ReceiptType As String, ByVal F As Integer, ByVal M As Integer, ByVal Age As Decimal, ByVal Sex As String, ByVal IsPaid As Decimal, ByVal agerange As String, ByVal ReceiptDate As Date) As V_OpticalShopPaymentTypeByAgeStatisticRow
            Dim rowV_OpticalShopPaymentTypeByAgeStatisticRow As V_OpticalShopPaymentTypeByAgeStatisticRow = CType(Me.NewRow,V_OpticalShopPaymentTypeByAgeStatisticRow)
            Dim columnValuesArray() As Object = New Object() {PaymentType, IsOldPatient, IncomType, ReceiptType, F, M, Age, Sex, IsPaid, agerange, ReceiptDate}
            rowV_OpticalShopPaymentTypeByAgeStatisticRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowV_OpticalShopPaymentTypeByAgeStatisticRow)
            Return rowV_OpticalShopPaymentTypeByAgeStatisticRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As V_OpticalShopPaymentTypeByAgeStatisticDataTable = CType(MyBase.Clone,V_OpticalShopPaymentTypeByAgeStatisticDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New V_OpticalShopPaymentTypeByAgeStatisticDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPaymentType = MyBase.Columns("PaymentType")
            Me.columnIsOldPatient = MyBase.Columns("IsOldPatient")
            Me.columnIncomType = MyBase.Columns("IncomType")
            Me.columnReceiptType = MyBase.Columns("ReceiptType")
            Me.columnF = MyBase.Columns("F")
            Me.columnM = MyBase.Columns("M")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnIsPaid = MyBase.Columns("IsPaid")
            Me.columnagerange = MyBase.Columns("agerange")
            Me.columnReceiptDate = MyBase.Columns("ReceiptDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPaymentType = New Global.System.Data.DataColumn("PaymentType", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentType)
            Me.columnIsOldPatient = New Global.System.Data.DataColumn("IsOldPatient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsOldPatient)
            Me.columnIncomType = New Global.System.Data.DataColumn("IncomType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIncomType)
            Me.columnReceiptType = New Global.System.Data.DataColumn("ReceiptType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptType)
            Me.columnF = New Global.System.Data.DataColumn("F", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF)
            Me.columnM = New Global.System.Data.DataColumn("M", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnIsPaid = New Global.System.Data.DataColumn("IsPaid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPaid)
            Me.columnagerange = New Global.System.Data.DataColumn("agerange", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnagerange)
            Me.columnReceiptDate = New Global.System.Data.DataColumn("ReceiptDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptDate)
            Me.columnIncomType.MaxLength = 1
            Me.columnReceiptType.MaxLength = 100
            Me.columnSex.MaxLength = 1
            Me.columnagerange.AllowDBNull = false
            Me.columnagerange.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_OpticalShopPaymentTypeByAgeStatisticRow() As V_OpticalShopPaymentTypeByAgeStatisticRow
            Return CType(Me.NewRow,V_OpticalShopPaymentTypeByAgeStatisticRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New V_OpticalShopPaymentTypeByAgeStatisticRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(V_OpticalShopPaymentTypeByAgeStatisticRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_OpticalShopPaymentTypeByAgeStatisticRowChangedEvent) Is Nothing) Then
                RaiseEvent V_OpticalShopPaymentTypeByAgeStatisticRowChanged(Me, New V_OpticalShopPaymentTypeByAgeStatisticRowChangeEvent(CType(e.Row,V_OpticalShopPaymentTypeByAgeStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_OpticalShopPaymentTypeByAgeStatisticRowChangingEvent) Is Nothing) Then
                RaiseEvent V_OpticalShopPaymentTypeByAgeStatisticRowChanging(Me, New V_OpticalShopPaymentTypeByAgeStatisticRowChangeEvent(CType(e.Row,V_OpticalShopPaymentTypeByAgeStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_OpticalShopPaymentTypeByAgeStatisticRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_OpticalShopPaymentTypeByAgeStatisticRowDeleted(Me, New V_OpticalShopPaymentTypeByAgeStatisticRowChangeEvent(CType(e.Row,V_OpticalShopPaymentTypeByAgeStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_OpticalShopPaymentTypeByAgeStatisticRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_OpticalShopPaymentTypeByAgeStatisticRowDeleting(Me, New V_OpticalShopPaymentTypeByAgeStatisticRowChangeEvent(CType(e.Row,V_OpticalShopPaymentTypeByAgeStatisticRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_OpticalShopPaymentTypeByAgeStatisticRow(ByVal row As V_OpticalShopPaymentTypeByAgeStatisticRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_OpticalShopPaymentTypeByAgeStatisticDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_ITEM_OPT_TEMDataTable
        Inherits Global.System.Data.TypedTableBase(Of V_ITEM_OPT_TEMRow)
        
        Private columnReceiptNo As Global.System.Data.DataColumn
        
        Private columnExpr1 As Global.System.Data.DataColumn
        
        Private columnItemID As Global.System.Data.DataColumn
        
        Private columnItemPrice As Global.System.Data.DataColumn
        
        Private columnItemQTY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_ITEM_OPT_TEM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemQTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_ITEM_OPT_TEMRow
            Get
                Return CType(Me.Rows(index),V_ITEM_OPT_TEMRow)
            End Get
        End Property
        
        Public Event V_ITEM_OPT_TEMRowChanging As V_ITEM_OPT_TEMRowChangeEventHandler
        
        Public Event V_ITEM_OPT_TEMRowChanged As V_ITEM_OPT_TEMRowChangeEventHandler
        
        Public Event V_ITEM_OPT_TEMRowDeleting As V_ITEM_OPT_TEMRowChangeEventHandler
        
        Public Event V_ITEM_OPT_TEMRowDeleted As V_ITEM_OPT_TEMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_ITEM_OPT_TEMRow(ByVal row As V_ITEM_OPT_TEMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_ITEM_OPT_TEMRow(ByVal ReceiptNo As String, ByVal Expr1 As String, ByVal ItemID As String, ByVal ItemPrice As Double, ByVal ItemQTY As Decimal) As V_ITEM_OPT_TEMRow
            Dim rowV_ITEM_OPT_TEMRow As V_ITEM_OPT_TEMRow = CType(Me.NewRow,V_ITEM_OPT_TEMRow)
            Dim columnValuesArray() As Object = New Object() {ReceiptNo, Expr1, ItemID, ItemPrice, ItemQTY}
            rowV_ITEM_OPT_TEMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowV_ITEM_OPT_TEMRow)
            Return rowV_ITEM_OPT_TEMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As V_ITEM_OPT_TEMDataTable = CType(MyBase.Clone,V_ITEM_OPT_TEMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New V_ITEM_OPT_TEMDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnReceiptNo = MyBase.Columns("ReceiptNo")
            Me.columnExpr1 = MyBase.Columns("Expr1")
            Me.columnItemID = MyBase.Columns("ItemID")
            Me.columnItemPrice = MyBase.Columns("ItemPrice")
            Me.columnItemQTY = MyBase.Columns("ItemQTY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnReceiptNo = New Global.System.Data.DataColumn("ReceiptNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptNo)
            Me.columnExpr1 = New Global.System.Data.DataColumn("Expr1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr1)
            Me.columnItemID = New Global.System.Data.DataColumn("ItemID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemID)
            Me.columnItemPrice = New Global.System.Data.DataColumn("ItemPrice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemPrice)
            Me.columnItemQTY = New Global.System.Data.DataColumn("ItemQTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemQTY)
            Me.columnReceiptNo.MaxLength = 50
            Me.columnExpr1.MaxLength = 50
            Me.columnItemID.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_ITEM_OPT_TEMRow() As V_ITEM_OPT_TEMRow
            Return CType(Me.NewRow,V_ITEM_OPT_TEMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New V_ITEM_OPT_TEMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(V_ITEM_OPT_TEMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_ITEM_OPT_TEMRowChangedEvent) Is Nothing) Then
                RaiseEvent V_ITEM_OPT_TEMRowChanged(Me, New V_ITEM_OPT_TEMRowChangeEvent(CType(e.Row,V_ITEM_OPT_TEMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_ITEM_OPT_TEMRowChangingEvent) Is Nothing) Then
                RaiseEvent V_ITEM_OPT_TEMRowChanging(Me, New V_ITEM_OPT_TEMRowChangeEvent(CType(e.Row,V_ITEM_OPT_TEMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_ITEM_OPT_TEMRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_ITEM_OPT_TEMRowDeleted(Me, New V_ITEM_OPT_TEMRowChangeEvent(CType(e.Row,V_ITEM_OPT_TEMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_ITEM_OPT_TEMRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_ITEM_OPT_TEMRowDeleting(Me, New V_ITEM_OPT_TEMRowChangeEvent(CType(e.Row,V_ITEM_OPT_TEMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_ITEM_OPT_TEMRow(ByVal row As V_ITEM_OPT_TEMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_ITEM_OPT_TEMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemItemDetialDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemItemDetialRow)
        
        Private columnColumnItemID As Global.System.Data.DataColumn
        
        Private columnColumnBarcode As Global.System.Data.DataColumn
        
        Private columnColumnName As Global.System.Data.DataColumn
        
        Private columnColumnPrice As Global.System.Data.DataColumn
        
        Private columnColumnQTY As Global.System.Data.DataColumn
        
        Private columnPicture As Global.System.Data.DataColumn
        
        Private columnSubTotalReal As Global.System.Data.DataColumn
        
        Private columnSubTotalDolar As Global.System.Data.DataColumn
        
        Private columnItemCost As Global.System.Data.DataColumn
        
        Private columnEXCHANGE_RATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemItemDetial"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnItemIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnItemID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnBarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnQTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PictureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPicture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotalReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotalDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXCHANGE_RATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCHANGE_RATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemItemDetialRow
            Get
                Return CType(Me.Rows(index),TemItemDetialRow)
            End Get
        End Property
        
        Public Event TemItemDetialRowChanging As TemItemDetialRowChangeEventHandler
        
        Public Event TemItemDetialRowChanged As TemItemDetialRowChangeEventHandler
        
        Public Event TemItemDetialRowDeleting As TemItemDetialRowChangeEventHandler
        
        Public Event TemItemDetialRowDeleted As TemItemDetialRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemItemDetialRow(ByVal row As TemItemDetialRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemItemDetialRow(ByVal ColumnItemID As Short, ByVal ColumnBarcode As String, ByVal ColumnName As String, ByVal ColumnPrice As Double, ByVal ColumnQTY As Integer, ByVal Picture() As Byte, ByVal SubTotalReal As Double, ByVal SubTotalDolar As Double, ByVal ItemCost As Double, ByVal EXCHANGE_RATE As Double) As TemItemDetialRow
            Dim rowTemItemDetialRow As TemItemDetialRow = CType(Me.NewRow,TemItemDetialRow)
            Dim columnValuesArray() As Object = New Object() {ColumnItemID, ColumnBarcode, ColumnName, ColumnPrice, ColumnQTY, Picture, SubTotalReal, SubTotalDolar, ItemCost, EXCHANGE_RATE}
            rowTemItemDetialRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemItemDetialRow)
            Return rowTemItemDetialRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByColumnItemID(ByVal ColumnItemID As Short) As TemItemDetialRow
            Return CType(Me.Rows.Find(New Object() {ColumnItemID}),TemItemDetialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemItemDetialDataTable = CType(MyBase.Clone,TemItemDetialDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemItemDetialDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnColumnItemID = MyBase.Columns("ColumnItemID")
            Me.columnColumnBarcode = MyBase.Columns("ColumnBarcode")
            Me.columnColumnName = MyBase.Columns("ColumnName")
            Me.columnColumnPrice = MyBase.Columns("ColumnPrice")
            Me.columnColumnQTY = MyBase.Columns("ColumnQTY")
            Me.columnPicture = MyBase.Columns("Picture")
            Me.columnSubTotalReal = MyBase.Columns("SubTotalReal")
            Me.columnSubTotalDolar = MyBase.Columns("SubTotalDolar")
            Me.columnItemCost = MyBase.Columns("ItemCost")
            Me.columnEXCHANGE_RATE = MyBase.Columns("EXCHANGE_RATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnColumnItemID = New Global.System.Data.DataColumn("ColumnItemID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnItemID)
            Me.columnColumnBarcode = New Global.System.Data.DataColumn("ColumnBarcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnBarcode)
            Me.columnColumnName = New Global.System.Data.DataColumn("ColumnName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnName)
            Me.columnColumnPrice = New Global.System.Data.DataColumn("ColumnPrice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnPrice)
            Me.columnColumnQTY = New Global.System.Data.DataColumn("ColumnQTY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnQTY)
            Me.columnPicture = New Global.System.Data.DataColumn("Picture", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPicture)
            Me.columnSubTotalReal = New Global.System.Data.DataColumn("SubTotalReal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotalReal)
            Me.columnSubTotalDolar = New Global.System.Data.DataColumn("SubTotalDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotalDolar)
            Me.columnItemCost = New Global.System.Data.DataColumn("ItemCost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCost)
            Me.columnEXCHANGE_RATE = New Global.System.Data.DataColumn("EXCHANGE_RATE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCHANGE_RATE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnColumnItemID}, true))
            Me.columnColumnItemID.AllowDBNull = false
            Me.columnColumnItemID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemItemDetialRow() As TemItemDetialRow
            Return CType(Me.NewRow,TemItemDetialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemItemDetialRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemItemDetialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemItemDetialRowChangedEvent) Is Nothing) Then
                RaiseEvent TemItemDetialRowChanged(Me, New TemItemDetialRowChangeEvent(CType(e.Row,TemItemDetialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemItemDetialRowChangingEvent) Is Nothing) Then
                RaiseEvent TemItemDetialRowChanging(Me, New TemItemDetialRowChangeEvent(CType(e.Row,TemItemDetialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemItemDetialRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemItemDetialRowDeleted(Me, New TemItemDetialRowChangeEvent(CType(e.Row,TemItemDetialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemItemDetialRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemItemDetialRowDeleting(Me, New TemItemDetialRowChangeEvent(CType(e.Row,TemItemDetialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemItemDetialRow(ByVal row As TemItemDetialRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemItemDetialDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NILTemItemDetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of NILTemItemDetailRow)
        
        Private columnItemID As Global.System.Data.DataColumn
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnPicture As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NILTemItemDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PictureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPicture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NILTemItemDetailRow
            Get
                Return CType(Me.Rows(index),NILTemItemDetailRow)
            End Get
        End Property
        
        Public Event NILTemItemDetailRowChanging As NILTemItemDetailRowChangeEventHandler
        
        Public Event NILTemItemDetailRowChanged As NILTemItemDetailRowChangeEventHandler
        
        Public Event NILTemItemDetailRowDeleting As NILTemItemDetailRowChangeEventHandler
        
        Public Event NILTemItemDetailRowDeleted As NILTemItemDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNILTemItemDetailRow(ByVal row As NILTemItemDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNILTemItemDetailRow(ByVal ItemID As Integer, ByVal Barcode As String, ByVal ItemName As String, ByVal Price As Double, ByVal Quantity As Decimal, ByVal Picture() As Byte) As NILTemItemDetailRow
            Dim rowNILTemItemDetailRow As NILTemItemDetailRow = CType(Me.NewRow,NILTemItemDetailRow)
            Dim columnValuesArray() As Object = New Object() {ItemID, Barcode, ItemName, Price, Quantity, Picture}
            rowNILTemItemDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNILTemItemDetailRow)
            Return rowNILTemItemDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NILTemItemDetailDataTable = CType(MyBase.Clone,NILTemItemDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NILTemItemDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnItemID = MyBase.Columns("ItemID")
            Me.columnBarcode = MyBase.Columns("Barcode")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnPicture = MyBase.Columns("Picture")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnItemID = New Global.System.Data.DataColumn("ItemID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemID)
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnPicture = New Global.System.Data.DataColumn("Picture", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPicture)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("ItemID", New Global.System.Data.DataColumn() {Me.columnItemID}, false))
            Me.columnItemID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNILTemItemDetailRow() As NILTemItemDetailRow
            Return CType(Me.NewRow,NILTemItemDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NILTemItemDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NILTemItemDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NILTemItemDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent NILTemItemDetailRowChanged(Me, New NILTemItemDetailRowChangeEvent(CType(e.Row,NILTemItemDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NILTemItemDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent NILTemItemDetailRowChanging(Me, New NILTemItemDetailRowChangeEvent(CType(e.Row,NILTemItemDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NILTemItemDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent NILTemItemDetailRowDeleted(Me, New NILTemItemDetailRowChangeEvent(CType(e.Row,NILTemItemDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NILTemItemDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent NILTemItemDetailRowDeleting(Me, New NILTemItemDetailRowChangeEvent(CType(e.Row,NILTemItemDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNILTemItemDetailRow(ByVal row As NILTemItemDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOpticalShop = New DSOpticalShop
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NILTemItemDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VItemPriceOpticalShopRow
        Inherits Global.System.Data.DataRow
        
        Private tableVItemPriceOpticalShop As VItemPriceOpticalShopDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVItemPriceOpticalShop = CType(Me.Table,VItemPriceOpticalShopDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemID() As Integer
            Get
                Return CType(Me(Me.tableVItemPriceOpticalShop.ItemIDColumn),Integer)
            End Get
            Set
                Me(Me.tableVItemPriceOpticalShop.ItemIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableVItemPriceOpticalShop.BarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'VItemPriceOpticalShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVItemPriceOpticalShop.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVItemPriceOpticalShop.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'VItemPriceOpticalShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVItemPriceOpticalShop.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVItemPriceOpticalShop.PriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'VItemPriceOpticalShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVItemPriceOpticalShop.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsUSD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVItemPriceOpticalShop.IsUSDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsUSD' in table 'VItemPriceOpticalShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVItemPriceOpticalShop.IsUSDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsKHR() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVItemPriceOpticalShop.IsKHRColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsKHR' in table 'VItemPriceOpticalShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVItemPriceOpticalShop.IsKHRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsCurPrice() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVItemPriceOpticalShop.IsCurPriceColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsCurPrice' in table 'VItemPriceOpticalShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVItemPriceOpticalShop.IsCurPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Picture() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableVItemPriceOpticalShop.PictureColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Picture' in table 'VItemPriceOpticalShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVItemPriceOpticalShop.PictureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableVItemPriceOpticalShop.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tableVItemPriceOpticalShop.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableVItemPriceOpticalShop.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableVItemPriceOpticalShop.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tableVItemPriceOpticalShop.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tableVItemPriceOpticalShop.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsUSDNull() As Boolean
            Return Me.IsNull(Me.tableVItemPriceOpticalShop.IsUSDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsUSDNull()
            Me(Me.tableVItemPriceOpticalShop.IsUSDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsKHRNull() As Boolean
            Return Me.IsNull(Me.tableVItemPriceOpticalShop.IsKHRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsKHRNull()
            Me(Me.tableVItemPriceOpticalShop.IsKHRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsCurPriceNull() As Boolean
            Return Me.IsNull(Me.tableVItemPriceOpticalShop.IsCurPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsCurPriceNull()
            Me(Me.tableVItemPriceOpticalShop.IsCurPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPictureNull() As Boolean
            Return Me.IsNull(Me.tableVItemPriceOpticalShop.PictureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPictureNull()
            Me(Me.tableVItemPriceOpticalShop.PictureColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class INCOME_TYPERow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_TYPE As INCOME_TYPEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_TYPE = CType(Me.Table,INCOME_TYPEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICID() As Decimal
            Get
                Return CType(Me(Me.tableINCOME_TYPE.ICIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableINCOME_TYPE.ICIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICType() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_TYPE.ICTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ICType' in table 'INCOME_TYPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_TYPE.ICTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_TYPE.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'INCOME_TYPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_TYPE.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICTypeNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_TYPE.ICTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICTypeNull()
            Me(Me.tableINCOME_TYPE.ICTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_TYPE.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableINCOME_TYPE.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataTableReceiptMaxRow
        Inherits Global.System.Data.DataRow
        
        Private tableDataTableReceiptMax As DataTableReceiptMaxDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataTableReceiptMax = CType(Me.Table,DataTableReceiptMaxDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptMaxAuto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTableReceiptMax.ReceiptMaxAutoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptMaxAuto' in table 'DataTableReceiptMax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTableReceiptMax.ReceiptMaxAutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptMaxAutoNull() As Boolean
            Return Me.IsNull(Me.tableDataTableReceiptMax.ReceiptMaxAutoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptMaxAutoNull()
            Me(Me.tableDataTableReceiptMax.ReceiptMaxAutoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VReceiptDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableVReceiptDetail As VReceiptDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVReceiptDetail = CType(Me.Table,VReceiptDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptDID() As Decimal
            Get
                Return CType(Me(Me.tableVReceiptDetail.ReceiptDIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableVReceiptDetail.ReceiptDIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemID() As String
            Get
                Try 
                    Return CType(Me(Me.tableVReceiptDetail.ItemIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemID' in table 'VReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVReceiptDetail.ItemIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVReceiptDetail.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'VReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVReceiptDetail.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemQTY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVReceiptDetail.ItemQTYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemQTY' in table 'VReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVReceiptDetail.ItemQTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotalReal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVReceiptDetail.SubTotalRealColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTotalReal' in table 'VReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVReceiptDetail.SubTotalRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotalDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVReceiptDetail.SubTotalDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTotalDolar' in table 'VReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVReceiptDetail.SubTotalDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IncomeID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVReceiptDetail.IncomeIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IncomeID' in table 'VReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVReceiptDetail.IncomeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVReceiptDetail.ReceiptDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptDate' in table 'VReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVReceiptDetail.ReceiptDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableVReceiptDetail.BarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'VReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVReceiptDetail.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemPrice() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVReceiptDetail.ItemPriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemPrice' in table 'VReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVReceiptDetail.ItemPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVReceiptDetail.ReceiptNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptNo' in table 'VReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVReceiptDetail.ReceiptNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VMainReceiptDetailRow() As VMainReceiptDetailRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("VMainReceiptDetail_VReceiptDetail")),VMainReceiptDetailRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("VMainReceiptDetail_VReceiptDetail"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemIDNull() As Boolean
            Return Me.IsNull(Me.tableVReceiptDetail.ItemIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemIDNull()
            Me(Me.tableVReceiptDetail.ItemIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableVReceiptDetail.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableVReceiptDetail.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemQTYNull() As Boolean
            Return Me.IsNull(Me.tableVReceiptDetail.ItemQTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemQTYNull()
            Me(Me.tableVReceiptDetail.ItemQTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalRealNull() As Boolean
            Return Me.IsNull(Me.tableVReceiptDetail.SubTotalRealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalRealNull()
            Me(Me.tableVReceiptDetail.SubTotalRealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalDolarNull() As Boolean
            Return Me.IsNull(Me.tableVReceiptDetail.SubTotalDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalDolarNull()
            Me(Me.tableVReceiptDetail.SubTotalDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIncomeIDNull() As Boolean
            Return Me.IsNull(Me.tableVReceiptDetail.IncomeIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIncomeIDNull()
            Me(Me.tableVReceiptDetail.IncomeIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptDateNull() As Boolean
            Return Me.IsNull(Me.tableVReceiptDetail.ReceiptDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptDateNull()
            Me(Me.tableVReceiptDetail.ReceiptDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableVReceiptDetail.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tableVReceiptDetail.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemPriceNull() As Boolean
            Return Me.IsNull(Me.tableVReceiptDetail.ItemPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemPriceNull()
            Me(Me.tableVReceiptDetail.ItemPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptNoNull() As Boolean
            Return Me.IsNull(Me.tableVReceiptDetail.ReceiptNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptNoNull()
            Me(Me.tableVReceiptDetail.ReceiptNoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DONATIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableDONATION As DONATIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDONATION = CType(Me.Table,DONATIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DonationID() As Decimal
            Get
                Return CType(Me(Me.tableDONATION.DonationIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableDONATION.DonationIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DonationName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDONATION.DonationNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DonationName' in table 'DONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDONATION.DonationNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableDONATION.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'DONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDONATION.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDonationNameNull() As Boolean
            Return Me.IsNull(Me.tableDONATION.DonationNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDonationNameNull()
            Me(Me.tableDONATION.DonationNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableDONATION.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableDONATION.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VMainReceiptDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableVMainReceiptDetail As VMainReceiptDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVMainReceiptDetail = CType(Me.Table,VMainReceiptDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptID() As Decimal
            Get
                Return CType(Me(Me.tableVMainReceiptDetail.ReceiptIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.ReceiptIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.ReceiptDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptDate' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.ReceiptDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomerNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.CustomerNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerNo' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.CustomerNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MedicReal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.MedicRealColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MedicReal' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.MedicRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MedicDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.MedicDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MedicDolar' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.MedicDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EyeGlassesReal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.EyeGlassesRealColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EyeGlassesReal' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.EyeGlassesRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EyeGlassesDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.EyeGlassesDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EyeGlassesDolar' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.EyeGlassesDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalReal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.TotalRealColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalReal' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.TotalRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.TotalDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalDolar' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.TotalDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AmountInWords() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.AmountInWordsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmountInWords' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.AmountInWordsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AmountFigureReal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.AmountFigureRealColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmountFigureReal' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.AmountFigureRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AmountFigureDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.AmountFigureDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmountFigureDolar' in table 'VMainReceiptDetail' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.AmountFigureDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsCurrency() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.IsCurrencyColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsCurrency' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.IsCurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDonation() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.IsDonationColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsDonation' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.IsDonationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DonationID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.DonationIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DonationID' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.DonationIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PayBySelf() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.PayBySelfColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PayBySelf' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.PayBySelfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PayByDonation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.PayByDonationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PayByDonation' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.PayByDonationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPaid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.IsPaidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsPaid' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.IsPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptNote() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.ReceiptNoteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptNote' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.ReceiptNoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.UserIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UserID' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.UserNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UserName' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.UserNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CusName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.CusNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CusName' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.CusNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Occupation() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.OccupationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Occupation' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.OccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReadyModR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.ReadyModRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReadyModR' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.ReadyModRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SpectacleR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.SpectacleRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SpectacleR' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.SpectacleRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OtherR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.OtherRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OtherR' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.OtherRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReturnReal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.ReturnRealColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReturnReal' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.ReturnRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReturnDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.ReturnDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReturnDolar' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.ReturnDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FundRaisingR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.FundRaisingRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FundRaisingR' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.FundRaisingRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SpectacleDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.SpectacleDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SpectacleDolar' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.SpectacleDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReadyModDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.ReadyModDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReadyModDolar' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.ReadyModDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FundRaisingDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.FundRaisingDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FundRaisingDolar' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.FundRaisingDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OtherDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.OtherDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OtherDolar' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.OtherDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IncomType() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.IncomTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IncomType' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.IncomTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DonationName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.DonationNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DonationName' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.DonationNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Glasses() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.GlassesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Glasses' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.GlassesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DonateAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.DonateAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DonateAmount' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.DonateAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SupportedAmtR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.SupportedAmtRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SupportedAmtR' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.SupportedAmtRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SupportedAmtDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.SupportedAmtDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SupportedAmtDolar' in table 'VMainReceiptDetail' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.SupportedAmtDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptType() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.ReceiptTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptType' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.ReceiptTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaidR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.PaidRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaidR' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.PaidRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaidDollar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.PaidDollarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaidDollar' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.PaidDollarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CusNameEng() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.CusNameEngColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CusNameEng' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.CusNameEngColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsOldPatient() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.IsOldPatientColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsOldPatient' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.IsOldPatientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FullAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.FullAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FullAmount' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.FullAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NilAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.NilAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NilAmount' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.NilAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SocialAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.SocialAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SocialAmount' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.SocialAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentCur() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.PaymentCurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentCur' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.PaymentCurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentType() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.PaymentTypeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentType' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.PaymentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comment() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.CommentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comment' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.CommentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.Expr1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Expr1' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.Expr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.ReceiptNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptNo' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.ReceiptNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.CustIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustID' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.CustIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalSocial() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.TotalSocialColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalSocial' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.TotalSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubReceiptType() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.SubReceiptTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubReceiptType' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.SubReceiptTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIME_CREATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptDetail.TIME_CREATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIME_CREATE' in table 'VMainReceiptDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptDetail.TIME_CREATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptDateNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.ReceiptDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptDateNull()
            Me(Me.tableVMainReceiptDetail.ReceiptDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerNoNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.CustomerNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerNoNull()
            Me(Me.tableVMainReceiptDetail.CustomerNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMedicRealNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.MedicRealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMedicRealNull()
            Me(Me.tableVMainReceiptDetail.MedicRealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMedicDolarNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.MedicDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMedicDolarNull()
            Me(Me.tableVMainReceiptDetail.MedicDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEyeGlassesRealNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.EyeGlassesRealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEyeGlassesRealNull()
            Me(Me.tableVMainReceiptDetail.EyeGlassesRealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEyeGlassesDolarNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.EyeGlassesDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEyeGlassesDolarNull()
            Me(Me.tableVMainReceiptDetail.EyeGlassesDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalRealNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.TotalRealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalRealNull()
            Me(Me.tableVMainReceiptDetail.TotalRealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalDolarNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.TotalDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalDolarNull()
            Me(Me.tableVMainReceiptDetail.TotalDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountInWordsNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.AmountInWordsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountInWordsNull()
            Me(Me.tableVMainReceiptDetail.AmountInWordsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountFigureRealNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.AmountFigureRealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountFigureRealNull()
            Me(Me.tableVMainReceiptDetail.AmountFigureRealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountFigureDolarNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.AmountFigureDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountFigureDolarNull()
            Me(Me.tableVMainReceiptDetail.AmountFigureDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsCurrencyNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.IsCurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsCurrencyNull()
            Me(Me.tableVMainReceiptDetail.IsCurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsDonationNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.IsDonationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsDonationNull()
            Me(Me.tableVMainReceiptDetail.IsDonationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDonationIDNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.DonationIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDonationIDNull()
            Me(Me.tableVMainReceiptDetail.DonationIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPayBySelfNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.PayBySelfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPayBySelfNull()
            Me(Me.tableVMainReceiptDetail.PayBySelfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPayByDonationNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.PayByDonationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPayByDonationNull()
            Me(Me.tableVMainReceiptDetail.PayByDonationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsPaidNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.IsPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsPaidNull()
            Me(Me.tableVMainReceiptDetail.IsPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptNoteNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.ReceiptNoteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptNoteNull()
            Me(Me.tableVMainReceiptDetail.ReceiptNoteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUserIDNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.UserIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUserIDNull()
            Me(Me.tableVMainReceiptDetail.UserIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUserNameNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.UserNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUserNameNull()
            Me(Me.tableVMainReceiptDetail.UserNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCusNameNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.CusNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCusNameNull()
            Me(Me.tableVMainReceiptDetail.CusNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableVMainReceiptDetail.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableVMainReceiptDetail.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOccupationNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.OccupationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOccupationNull()
            Me(Me.tableVMainReceiptDetail.OccupationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableVMainReceiptDetail.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReadyModRNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.ReadyModRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReadyModRNull()
            Me(Me.tableVMainReceiptDetail.ReadyModRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSpectacleRNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.SpectacleRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSpectacleRNull()
            Me(Me.tableVMainReceiptDetail.SpectacleRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherRNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.OtherRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherRNull()
            Me(Me.tableVMainReceiptDetail.OtherRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReturnRealNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.ReturnRealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReturnRealNull()
            Me(Me.tableVMainReceiptDetail.ReturnRealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReturnDolarNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.ReturnDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReturnDolarNull()
            Me(Me.tableVMainReceiptDetail.ReturnDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFundRaisingRNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.FundRaisingRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFundRaisingRNull()
            Me(Me.tableVMainReceiptDetail.FundRaisingRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSpectacleDolarNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.SpectacleDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSpectacleDolarNull()
            Me(Me.tableVMainReceiptDetail.SpectacleDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReadyModDolarNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.ReadyModDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReadyModDolarNull()
            Me(Me.tableVMainReceiptDetail.ReadyModDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFundRaisingDolarNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.FundRaisingDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFundRaisingDolarNull()
            Me(Me.tableVMainReceiptDetail.FundRaisingDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherDolarNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.OtherDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherDolarNull()
            Me(Me.tableVMainReceiptDetail.OtherDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIncomTypeNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.IncomTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIncomTypeNull()
            Me(Me.tableVMainReceiptDetail.IncomTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDonationNameNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.DonationNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDonationNameNull()
            Me(Me.tableVMainReceiptDetail.DonationNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGlassesNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.GlassesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGlassesNull()
            Me(Me.tableVMainReceiptDetail.GlassesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDonateAmountNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.DonateAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDonateAmountNull()
            Me(Me.tableVMainReceiptDetail.DonateAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupportedAmtRNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.SupportedAmtRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupportedAmtRNull()
            Me(Me.tableVMainReceiptDetail.SupportedAmtRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupportedAmtDolarNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.SupportedAmtDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupportedAmtDolarNull()
            Me(Me.tableVMainReceiptDetail.SupportedAmtDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptTypeNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.ReceiptTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptTypeNull()
            Me(Me.tableVMainReceiptDetail.ReceiptTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidRNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.PaidRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidRNull()
            Me(Me.tableVMainReceiptDetail.PaidRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidDollarNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.PaidDollarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidDollarNull()
            Me(Me.tableVMainReceiptDetail.PaidDollarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCusNameEngNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.CusNameEngColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCusNameEngNull()
            Me(Me.tableVMainReceiptDetail.CusNameEngColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsOldPatientNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.IsOldPatientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsOldPatientNull()
            Me(Me.tableVMainReceiptDetail.IsOldPatientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFullAmountNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.FullAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFullAmountNull()
            Me(Me.tableVMainReceiptDetail.FullAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNilAmountNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.NilAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNilAmountNull()
            Me(Me.tableVMainReceiptDetail.NilAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSocialAmountNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.SocialAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSocialAmountNull()
            Me(Me.tableVMainReceiptDetail.SocialAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentCurNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.PaymentCurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentCurNull()
            Me(Me.tableVMainReceiptDetail.PaymentCurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentTypeNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.PaymentTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentTypeNull()
            Me(Me.tableVMainReceiptDetail.PaymentTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.CommentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentNull()
            Me(Me.tableVMainReceiptDetail.CommentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpr1Null() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.Expr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpr1Null()
            Me(Me.tableVMainReceiptDetail.Expr1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptNoNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.ReceiptNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptNoNull()
            Me(Me.tableVMainReceiptDetail.ReceiptNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustIDNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.CustIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustIDNull()
            Me(Me.tableVMainReceiptDetail.CustIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalSocialNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.TotalSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalSocialNull()
            Me(Me.tableVMainReceiptDetail.TotalSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubReceiptTypeNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.SubReceiptTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubReceiptTypeNull()
            Me(Me.tableVMainReceiptDetail.SubReceiptTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIME_CREATENull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptDetail.TIME_CREATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIME_CREATENull()
            Me(Me.tableVMainReceiptDetail.TIME_CREATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVReceiptDetailRows() As VReceiptDetailRow()
            If (Me.Table.ChildRelations("VMainReceiptDetail_VReceiptDetail") Is Nothing) Then
                Return New VReceiptDetailRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("VMainReceiptDetail_VReceiptDetail")),VReceiptDetailRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_OpticalShopCusStatisticRow
        Inherits Global.System.Data.DataRow
        
        Private tableV_OpticalShopCusStatistic As V_OpticalShopCusStatisticDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_OpticalShopCusStatistic = CType(Me.Table,V_OpticalShopCusStatisticDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptType() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopCusStatistic.ReceiptTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptType' in table 'V_OpticalShopCusStatistic' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopCusStatistic.ReceiptTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopCusStatistic.FColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F' in table 'V_OpticalShopCusStatistic' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopCusStatistic.FColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopCusStatistic.MColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M' in table 'V_OpticalShopCusStatistic' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopCusStatistic.MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopCusStatistic.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'V_OpticalShopCusStatistic' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopCusStatistic.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopCusStatistic.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'V_OpticalShopCusStatistic' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopCusStatistic.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPaid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopCusStatistic.IsPaidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsPaid' in table 'V_OpticalShopCusStatistic' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopCusStatistic.IsPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property agerange() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopCusStatistic.agerangeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'agerange' in table 'V_OpticalShopCusStatistic' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopCusStatistic.agerangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopCusStatistic.ReceiptDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptDate' in table 'V_OpticalShopCusStatistic' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopCusStatistic.ReceiptDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubReceiptType() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopCusStatistic.SubReceiptTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubReceiptType' in table 'V_OpticalShopCusStatistic' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopCusStatistic.SubReceiptTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptTypeNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopCusStatistic.ReceiptTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptTypeNull()
            Me(Me.tableV_OpticalShopCusStatistic.ReceiptTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopCusStatistic.FColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFNull()
            Me(Me.tableV_OpticalShopCusStatistic.FColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopCusStatistic.MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMNull()
            Me(Me.tableV_OpticalShopCusStatistic.MColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopCusStatistic.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableV_OpticalShopCusStatistic.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopCusStatistic.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableV_OpticalShopCusStatistic.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsPaidNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopCusStatistic.IsPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsPaidNull()
            Me(Me.tableV_OpticalShopCusStatistic.IsPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsagerangeNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopCusStatistic.agerangeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetagerangeNull()
            Me(Me.tableV_OpticalShopCusStatistic.agerangeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptDateNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopCusStatistic.ReceiptDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptDateNull()
            Me(Me.tableV_OpticalShopCusStatistic.ReceiptDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubReceiptTypeNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopCusStatistic.SubReceiptTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubReceiptTypeNull()
            Me(Me.tableV_OpticalShopCusStatistic.SubReceiptTypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_OpticalShopItemSaleOffRow
        Inherits Global.System.Data.DataRow
        
        Private tableV_OpticalShopItemSaleOff As V_OpticalShopItemSaleOffDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_OpticalShopItemSaleOff = CType(Me.Table,V_OpticalShopItemSaleOffDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopItemSaleOff.ReceiptDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptDate' in table 'V_OpticalShopItemSaleOff' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopItemSaleOff.ReceiptDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopItemSaleOff.ReceiptNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptNo' in table 'V_OpticalShopItemSaleOff' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopItemSaleOff.ReceiptNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPaid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopItemSaleOff.IsPaidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsPaid' in table 'V_OpticalShopItemSaleOff' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopItemSaleOff.IsPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopItemSaleOff.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'V_OpticalShopItemSaleOff' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopItemSaleOff.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemPrice() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopItemSaleOff.ItemPriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemPrice' in table 'V_OpticalShopItemSaleOff' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopItemSaleOff.ItemPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemQTY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopItemSaleOff.ItemQTYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemQTY' in table 'V_OpticalShopItemSaleOff' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopItemSaleOff.ItemQTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotalReal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopItemSaleOff.SubTotalRealColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTotalReal' in table 'V_OpticalShopItemSaleOff' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopItemSaleOff.SubTotalRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotalDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopItemSaleOff.SubTotalDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTotalDolar' in table 'V_OpticalShopItemSaleOff' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopItemSaleOff.SubTotalDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CateName() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopItemSaleOff.CateNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CateName' in table 'V_OpticalShopItemSaleOff' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopItemSaleOff.CateNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemPrice1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopItemSaleOff.ItemPrice1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemPrice1' in table 'V_OpticalShopItemSaleOff' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopItemSaleOff.ItemPrice1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptDateNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopItemSaleOff.ReceiptDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptDateNull()
            Me(Me.tableV_OpticalShopItemSaleOff.ReceiptDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptNoNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopItemSaleOff.ReceiptNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptNoNull()
            Me(Me.tableV_OpticalShopItemSaleOff.ReceiptNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsPaidNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopItemSaleOff.IsPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsPaidNull()
            Me(Me.tableV_OpticalShopItemSaleOff.IsPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopItemSaleOff.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableV_OpticalShopItemSaleOff.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemPriceNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopItemSaleOff.ItemPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemPriceNull()
            Me(Me.tableV_OpticalShopItemSaleOff.ItemPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemQTYNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopItemSaleOff.ItemQTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemQTYNull()
            Me(Me.tableV_OpticalShopItemSaleOff.ItemQTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalRealNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopItemSaleOff.SubTotalRealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalRealNull()
            Me(Me.tableV_OpticalShopItemSaleOff.SubTotalRealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalDolarNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopItemSaleOff.SubTotalDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalDolarNull()
            Me(Me.tableV_OpticalShopItemSaleOff.SubTotalDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCateNameNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopItemSaleOff.CateNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCateNameNull()
            Me(Me.tableV_OpticalShopItemSaleOff.CateNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemPrice1Null() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopItemSaleOff.ItemPrice1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemPrice1Null()
            Me(Me.tableV_OpticalShopItemSaleOff.ItemPrice1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RECEIPT_CUSTOMERRow
        Inherits Global.System.Data.DataRow
        
        Private tableRECEIPT_CUSTOMER As RECEIPT_CUSTOMERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRECEIPT_CUSTOMER = CType(Me.Table,RECEIPT_CUSTOMERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustID() As Decimal
            Get
                Return CType(Me(Me.tableRECEIPT_CUSTOMER.CustIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableRECEIPT_CUSTOMER.CustIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomerNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRECEIPT_CUSTOMER.CustomerNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerNo' in table 'RECEIPT_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIPT_CUSTOMER.CustomerNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CusName() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECEIPT_CUSTOMER.CusNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CusName' in table 'RECEIPT_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIPT_CUSTOMER.CusNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Female() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECEIPT_CUSTOMER.FemaleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Female' in table 'RECEIPT_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIPT_CUSTOMER.FemaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Male() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECEIPT_CUSTOMER.MaleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Male' in table 'RECEIPT_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIPT_CUSTOMER.MaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECEIPT_CUSTOMER.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'RECEIPT_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIPT_CUSTOMER.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRECEIPT_CUSTOMER.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'RECEIPT_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIPT_CUSTOMER.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Occupation() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECEIPT_CUSTOMER.OccupationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Occupation' in table 'RECEIPT_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIPT_CUSTOMER.OccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OccNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRECEIPT_CUSTOMER.OccNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OccNo' in table 'RECEIPT_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIPT_CUSTOMER.OccNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Province() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRECEIPT_CUSTOMER.ProvinceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Province' in table 'RECEIPT_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIPT_CUSTOMER.ProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property District() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRECEIPT_CUSTOMER.DistrictColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'District' in table 'RECEIPT_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIPT_CUSTOMER.DistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commune() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRECEIPT_CUSTOMER.CommuneColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Commune' in table 'RECEIPT_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIPT_CUSTOMER.CommuneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Village() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRECEIPT_CUSTOMER.VillageColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Village' in table 'RECEIPT_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIPT_CUSTOMER.VillageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECEIPT_CUSTOMER.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'RECEIPT_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIPT_CUSTOMER.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPatient() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECEIPT_CUSTOMER.IsPatientColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsPatient' in table 'RECEIPT_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIPT_CUSTOMER.IsPatientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CusNameEng() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECEIPT_CUSTOMER.CusNameEngColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CusNameEng' in table 'RECEIPT_CUSTOMER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECEIPT_CUSTOMER.CusNameEngColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerNoNull() As Boolean
            Return Me.IsNull(Me.tableRECEIPT_CUSTOMER.CustomerNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerNoNull()
            Me(Me.tableRECEIPT_CUSTOMER.CustomerNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCusNameNull() As Boolean
            Return Me.IsNull(Me.tableRECEIPT_CUSTOMER.CusNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCusNameNull()
            Me(Me.tableRECEIPT_CUSTOMER.CusNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFemaleNull() As Boolean
            Return Me.IsNull(Me.tableRECEIPT_CUSTOMER.FemaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFemaleNull()
            Me(Me.tableRECEIPT_CUSTOMER.FemaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaleNull() As Boolean
            Return Me.IsNull(Me.tableRECEIPT_CUSTOMER.MaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaleNull()
            Me(Me.tableRECEIPT_CUSTOMER.MaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableRECEIPT_CUSTOMER.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableRECEIPT_CUSTOMER.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableRECEIPT_CUSTOMER.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableRECEIPT_CUSTOMER.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOccupationNull() As Boolean
            Return Me.IsNull(Me.tableRECEIPT_CUSTOMER.OccupationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOccupationNull()
            Me(Me.tableRECEIPT_CUSTOMER.OccupationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOccNoNull() As Boolean
            Return Me.IsNull(Me.tableRECEIPT_CUSTOMER.OccNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOccNoNull()
            Me(Me.tableRECEIPT_CUSTOMER.OccNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProvinceNull() As Boolean
            Return Me.IsNull(Me.tableRECEIPT_CUSTOMER.ProvinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProvinceNull()
            Me(Me.tableRECEIPT_CUSTOMER.ProvinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistrictNull() As Boolean
            Return Me.IsNull(Me.tableRECEIPT_CUSTOMER.DistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistrictNull()
            Me(Me.tableRECEIPT_CUSTOMER.DistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommuneNull() As Boolean
            Return Me.IsNull(Me.tableRECEIPT_CUSTOMER.CommuneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommuneNull()
            Me(Me.tableRECEIPT_CUSTOMER.CommuneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVillageNull() As Boolean
            Return Me.IsNull(Me.tableRECEIPT_CUSTOMER.VillageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVillageNull()
            Me(Me.tableRECEIPT_CUSTOMER.VillageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableRECEIPT_CUSTOMER.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableRECEIPT_CUSTOMER.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsPatientNull() As Boolean
            Return Me.IsNull(Me.tableRECEIPT_CUSTOMER.IsPatientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsPatientNull()
            Me(Me.tableRECEIPT_CUSTOMER.IsPatientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCusNameEngNull() As Boolean
            Return Me.IsNull(Me.tableRECEIPT_CUSTOMER.CusNameEngColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCusNameEngNull()
            Me(Me.tableRECEIPT_CUSTOMER.CusNameEngColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_Receipt_InvoiceRow
        Inherits Global.System.Data.DataRow
        
        Private tableV_Receipt_Invoice As V_Receipt_InvoiceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_Receipt_Invoice = CType(Me.Table,V_Receipt_InvoiceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptID() As Decimal
            Get
                Return CType(Me(Me.tableV_Receipt_Invoice.ReceiptIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.ReceiptIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.ReceiptDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptDate' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.ReceiptDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomerNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.CustomerNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerNo' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.CustomerNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MedicReal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.MedicRealColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MedicReal' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.MedicRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MedicDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.MedicDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MedicDolar' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.MedicDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EyeGlassesReal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.EyeGlassesRealColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EyeGlassesReal' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.EyeGlassesRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EyeGlassesDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.EyeGlassesDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EyeGlassesDolar' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.EyeGlassesDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReadyModDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.ReadyModDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReadyModDolar' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.ReadyModDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReadyModR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.ReadyModRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReadyModR' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.ReadyModRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SpectacleDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.SpectacleDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SpectacleDolar' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.SpectacleDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SpectacleR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.SpectacleRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SpectacleR' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.SpectacleRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FundRaisingDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.FundRaisingDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FundRaisingDolar' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.FundRaisingDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FundRaisingR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.FundRaisingRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FundRaisingR' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.FundRaisingRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OtherDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.OtherDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OtherDolar' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.OtherDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OtherR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.OtherRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OtherR' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.OtherRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalReal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.TotalRealColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalReal' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.TotalRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.TotalDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalDolar' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.TotalDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AmountInWords() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.AmountInWordsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmountInWords' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.AmountInWordsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AmountFigureReal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.AmountFigureRealColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmountFigureReal' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.AmountFigureRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AmountFigureDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.AmountFigureDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmountFigureDolar' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.AmountFigureDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReturnReal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.ReturnRealColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReturnReal' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.ReturnRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReturnDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.ReturnDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReturnDolar' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.ReturnDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsCurrency() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.IsCurrencyColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsCurrency' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.IsCurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDonation() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.IsDonationColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsDonation' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.IsDonationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DonationID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.DonationIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DonationID' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.DonationIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PayBySelf() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.PayBySelfColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PayBySelf' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.PayBySelfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PayByDonation() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.PayByDonationColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PayByDonation' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.PayByDonationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPaid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.IsPaidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsPaid' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.IsPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptNote() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.ReceiptNoteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptNote' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.ReceiptNoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.UserIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UserID' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserName() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.UserNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UserName' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.UserNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IncomType() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.IncomTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IncomType' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.IncomTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Glasses() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.GlassesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Glasses' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.GlassesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DonateAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.DonateAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DonateAmount' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.DonateAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SupportedAmtDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.SupportedAmtDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SupportedAmtDolar' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.SupportedAmtDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SupportedAmtR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.SupportedAmtRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SupportedAmtR' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.SupportedAmtRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptType() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.ReceiptTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptType' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.ReceiptTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaidR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.PaidRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaidR' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.PaidRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaidDollar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.PaidDollarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaidDollar' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.PaidDollarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsOldPatient() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.IsOldPatientColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsOldPatient' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.IsOldPatientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentType() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.PaymentTypeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentType' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.PaymentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FullAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.FullAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FullAmount' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.FullAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NilAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.NilAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NilAmount' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.NilAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SocialAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.SocialAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SocialAmount' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.SocialAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentCur() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.PaymentCurColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentCur' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.PaymentCurColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comment() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.CommentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comment' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.CommentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemID() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.ItemIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemID' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.ItemIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemPrice() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.ItemPriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemPrice' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.ItemPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemQTY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.ItemQTYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemQTY' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.ItemQTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotalReal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.SubTotalRealColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTotalReal' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.SubTotalRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotalDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.SubTotalDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTotalDolar' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.SubTotalDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IncomeID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.IncomeIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IncomeID' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.IncomeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.BarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CusName() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.CusNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CusName' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.CusNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Female() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.FemaleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Female' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.FemaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Male() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.MaleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Male' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.MaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Occupation() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.OccupationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Occupation' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.OccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OccNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.OccNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OccNo' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.OccNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Province() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.ProvinceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Province' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.ProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property District() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.DistrictColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'District' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.DistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commune() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.CommuneColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Commune' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.CommuneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Village() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.VillageColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Village' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.VillageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPatient() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.IsPatientColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsPatient' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.IsPatientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CusNameEng() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.CusNameEngColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CusNameEng' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.CusNameEngColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DonationName() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.DonationNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DonationName' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.DonationNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.Expr1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Expr1' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.Expr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.ReceiptNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptNo' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.ReceiptNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalSocial() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.TotalSocialColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalSocial' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.TotalSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIME_CREATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_Receipt_Invoice.TIME_CREATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIME_CREATE' in table 'V_Receipt_Invoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_Receipt_Invoice.TIME_CREATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptDateNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.ReceiptDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptDateNull()
            Me(Me.tableV_Receipt_Invoice.ReceiptDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerNoNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.CustomerNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerNoNull()
            Me(Me.tableV_Receipt_Invoice.CustomerNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMedicRealNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.MedicRealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMedicRealNull()
            Me(Me.tableV_Receipt_Invoice.MedicRealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMedicDolarNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.MedicDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMedicDolarNull()
            Me(Me.tableV_Receipt_Invoice.MedicDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEyeGlassesRealNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.EyeGlassesRealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEyeGlassesRealNull()
            Me(Me.tableV_Receipt_Invoice.EyeGlassesRealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEyeGlassesDolarNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.EyeGlassesDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEyeGlassesDolarNull()
            Me(Me.tableV_Receipt_Invoice.EyeGlassesDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReadyModDolarNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.ReadyModDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReadyModDolarNull()
            Me(Me.tableV_Receipt_Invoice.ReadyModDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReadyModRNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.ReadyModRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReadyModRNull()
            Me(Me.tableV_Receipt_Invoice.ReadyModRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSpectacleDolarNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.SpectacleDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSpectacleDolarNull()
            Me(Me.tableV_Receipt_Invoice.SpectacleDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSpectacleRNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.SpectacleRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSpectacleRNull()
            Me(Me.tableV_Receipt_Invoice.SpectacleRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFundRaisingDolarNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.FundRaisingDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFundRaisingDolarNull()
            Me(Me.tableV_Receipt_Invoice.FundRaisingDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFundRaisingRNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.FundRaisingRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFundRaisingRNull()
            Me(Me.tableV_Receipt_Invoice.FundRaisingRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherDolarNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.OtherDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherDolarNull()
            Me(Me.tableV_Receipt_Invoice.OtherDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherRNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.OtherRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherRNull()
            Me(Me.tableV_Receipt_Invoice.OtherRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalRealNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.TotalRealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalRealNull()
            Me(Me.tableV_Receipt_Invoice.TotalRealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalDolarNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.TotalDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalDolarNull()
            Me(Me.tableV_Receipt_Invoice.TotalDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountInWordsNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.AmountInWordsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountInWordsNull()
            Me(Me.tableV_Receipt_Invoice.AmountInWordsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountFigureRealNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.AmountFigureRealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountFigureRealNull()
            Me(Me.tableV_Receipt_Invoice.AmountFigureRealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountFigureDolarNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.AmountFigureDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountFigureDolarNull()
            Me(Me.tableV_Receipt_Invoice.AmountFigureDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReturnRealNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.ReturnRealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReturnRealNull()
            Me(Me.tableV_Receipt_Invoice.ReturnRealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReturnDolarNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.ReturnDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReturnDolarNull()
            Me(Me.tableV_Receipt_Invoice.ReturnDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsCurrencyNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.IsCurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsCurrencyNull()
            Me(Me.tableV_Receipt_Invoice.IsCurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsDonationNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.IsDonationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsDonationNull()
            Me(Me.tableV_Receipt_Invoice.IsDonationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDonationIDNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.DonationIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDonationIDNull()
            Me(Me.tableV_Receipt_Invoice.DonationIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPayBySelfNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.PayBySelfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPayBySelfNull()
            Me(Me.tableV_Receipt_Invoice.PayBySelfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPayByDonationNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.PayByDonationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPayByDonationNull()
            Me(Me.tableV_Receipt_Invoice.PayByDonationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsPaidNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.IsPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsPaidNull()
            Me(Me.tableV_Receipt_Invoice.IsPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptNoteNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.ReceiptNoteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptNoteNull()
            Me(Me.tableV_Receipt_Invoice.ReceiptNoteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUserIDNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.UserIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUserIDNull()
            Me(Me.tableV_Receipt_Invoice.UserIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUserNameNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.UserNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUserNameNull()
            Me(Me.tableV_Receipt_Invoice.UserNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIncomTypeNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.IncomTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIncomTypeNull()
            Me(Me.tableV_Receipt_Invoice.IncomTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGlassesNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.GlassesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGlassesNull()
            Me(Me.tableV_Receipt_Invoice.GlassesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDonateAmountNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.DonateAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDonateAmountNull()
            Me(Me.tableV_Receipt_Invoice.DonateAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupportedAmtDolarNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.SupportedAmtDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupportedAmtDolarNull()
            Me(Me.tableV_Receipt_Invoice.SupportedAmtDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupportedAmtRNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.SupportedAmtRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupportedAmtRNull()
            Me(Me.tableV_Receipt_Invoice.SupportedAmtRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptTypeNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.ReceiptTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptTypeNull()
            Me(Me.tableV_Receipt_Invoice.ReceiptTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidRNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.PaidRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidRNull()
            Me(Me.tableV_Receipt_Invoice.PaidRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidDollarNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.PaidDollarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidDollarNull()
            Me(Me.tableV_Receipt_Invoice.PaidDollarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsOldPatientNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.IsOldPatientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsOldPatientNull()
            Me(Me.tableV_Receipt_Invoice.IsOldPatientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentTypeNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.PaymentTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentTypeNull()
            Me(Me.tableV_Receipt_Invoice.PaymentTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFullAmountNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.FullAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFullAmountNull()
            Me(Me.tableV_Receipt_Invoice.FullAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNilAmountNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.NilAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNilAmountNull()
            Me(Me.tableV_Receipt_Invoice.NilAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSocialAmountNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.SocialAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSocialAmountNull()
            Me(Me.tableV_Receipt_Invoice.SocialAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentCurNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.PaymentCurColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentCurNull()
            Me(Me.tableV_Receipt_Invoice.PaymentCurColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.CommentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentNull()
            Me(Me.tableV_Receipt_Invoice.CommentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemIDNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.ItemIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemIDNull()
            Me(Me.tableV_Receipt_Invoice.ItemIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemPriceNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.ItemPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemPriceNull()
            Me(Me.tableV_Receipt_Invoice.ItemPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemQTYNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.ItemQTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemQTYNull()
            Me(Me.tableV_Receipt_Invoice.ItemQTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalRealNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.SubTotalRealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalRealNull()
            Me(Me.tableV_Receipt_Invoice.SubTotalRealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalDolarNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.SubTotalDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalDolarNull()
            Me(Me.tableV_Receipt_Invoice.SubTotalDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIncomeIDNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.IncomeIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIncomeIDNull()
            Me(Me.tableV_Receipt_Invoice.IncomeIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableV_Receipt_Invoice.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tableV_Receipt_Invoice.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCusNameNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.CusNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCusNameNull()
            Me(Me.tableV_Receipt_Invoice.CusNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFemaleNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.FemaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFemaleNull()
            Me(Me.tableV_Receipt_Invoice.FemaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaleNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.MaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaleNull()
            Me(Me.tableV_Receipt_Invoice.MaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableV_Receipt_Invoice.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableV_Receipt_Invoice.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOccupationNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.OccupationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOccupationNull()
            Me(Me.tableV_Receipt_Invoice.OccupationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOccNoNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.OccNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOccNoNull()
            Me(Me.tableV_Receipt_Invoice.OccNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProvinceNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.ProvinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProvinceNull()
            Me(Me.tableV_Receipt_Invoice.ProvinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistrictNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.DistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistrictNull()
            Me(Me.tableV_Receipt_Invoice.DistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommuneNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.CommuneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommuneNull()
            Me(Me.tableV_Receipt_Invoice.CommuneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVillageNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.VillageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVillageNull()
            Me(Me.tableV_Receipt_Invoice.VillageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableV_Receipt_Invoice.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsPatientNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.IsPatientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsPatientNull()
            Me(Me.tableV_Receipt_Invoice.IsPatientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCusNameEngNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.CusNameEngColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCusNameEngNull()
            Me(Me.tableV_Receipt_Invoice.CusNameEngColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDonationNameNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.DonationNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDonationNameNull()
            Me(Me.tableV_Receipt_Invoice.DonationNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpr1Null() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.Expr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpr1Null()
            Me(Me.tableV_Receipt_Invoice.Expr1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptNoNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.ReceiptNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptNoNull()
            Me(Me.tableV_Receipt_Invoice.ReceiptNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalSocialNull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.TotalSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalSocialNull()
            Me(Me.tableV_Receipt_Invoice.TotalSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIME_CREATENull() As Boolean
            Return Me.IsNull(Me.tableV_Receipt_Invoice.TIME_CREATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIME_CREATENull()
            Me(Me.tableV_Receipt_Invoice.TIME_CREATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VMainReceiptNILRow
        Inherits Global.System.Data.DataRow
        
        Private tableVMainReceiptNIL As VMainReceiptNILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVMainReceiptNIL = CType(Me.Table,VMainReceiptNILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptNILId() As Decimal
            Get
                Return CType(Me(Me.tableVMainReceiptNIL.ReceiptNILIdColumn),Decimal)
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.ReceiptNILIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptNILDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.ReceiptNILDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptNILDate' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.ReceiptNILDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.PatientNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PatientNo' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.PatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.UserIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UserID' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.UserNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UserName' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.UserNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Glasses() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.GlassesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Glasses' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.GlassesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OlePatientNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.OlePatientNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OlePatientNo' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.OlePatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.CreateDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreateDate' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.CreateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Province() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.ProvinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Province' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.ProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property District() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.DistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'District' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.DistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commune() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.CommuneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Commune' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.CommuneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameEng() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.NameEngColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameEng' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.NameEngColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameKhmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.NameKhmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameKhmer' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.NameKhmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Male() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.MaleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Male' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.MaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Female() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.FemaleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Female' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.FemaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Occupation() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.OccupationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Occupation' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.OccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telephone() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.TelephoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telephone' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.TelephoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Neighborly() As String
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.NeighborlyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Neighborly' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.NeighborlyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Years() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.YearsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Years' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.YearsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Achieve() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVMainReceiptNIL.AchieveColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Achieve' in table 'VMainReceiptNIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVMainReceiptNIL.AchieveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptNILDateNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.ReceiptNILDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptNILDateNull()
            Me(Me.tableVMainReceiptNIL.ReceiptNILDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPatientNoNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.PatientNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPatientNoNull()
            Me(Me.tableVMainReceiptNIL.PatientNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUserIDNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.UserIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUserIDNull()
            Me(Me.tableVMainReceiptNIL.UserIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUserNameNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.UserNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUserNameNull()
            Me(Me.tableVMainReceiptNIL.UserNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGlassesNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.GlassesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGlassesNull()
            Me(Me.tableVMainReceiptNIL.GlassesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOlePatientNoNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.OlePatientNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOlePatientNoNull()
            Me(Me.tableVMainReceiptNIL.OlePatientNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.CreateDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreateDateNull()
            Me(Me.tableVMainReceiptNIL.CreateDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProvinceNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.ProvinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProvinceNull()
            Me(Me.tableVMainReceiptNIL.ProvinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistrictNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.DistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistrictNull()
            Me(Me.tableVMainReceiptNIL.DistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommuneNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.CommuneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommuneNull()
            Me(Me.tableVMainReceiptNIL.CommuneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameEngNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.NameEngColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameEngNull()
            Me(Me.tableVMainReceiptNIL.NameEngColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameKhmerNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.NameKhmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameKhmerNull()
            Me(Me.tableVMainReceiptNIL.NameKhmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableVMainReceiptNIL.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaleNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.MaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaleNull()
            Me(Me.tableVMainReceiptNIL.MaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFemaleNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.FemaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFemaleNull()
            Me(Me.tableVMainReceiptNIL.FemaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableVMainReceiptNIL.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableVMainReceiptNIL.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOccupationNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.OccupationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOccupationNull()
            Me(Me.tableVMainReceiptNIL.OccupationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelephoneNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.TelephoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelephoneNull()
            Me(Me.tableVMainReceiptNIL.TelephoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNeighborlyNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.NeighborlyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNeighborlyNull()
            Me(Me.tableVMainReceiptNIL.NeighborlyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearsNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.YearsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearsNull()
            Me(Me.tableVMainReceiptNIL.YearsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAchieveNull() As Boolean
            Return Me.IsNull(Me.tableVMainReceiptNIL.AchieveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAchieveNull()
            Me(Me.tableVMainReceiptNIL.AchieveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVReceiptNILDetailRows() As VReceiptNILDetailRow()
            If (Me.Table.ChildRelations("VMainReceiptNIL_VReceiptNILDetail") Is Nothing) Then
                Return New VReceiptNILDetailRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("VMainReceiptNIL_VReceiptNILDetail")),VReceiptNILDetailRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VReceiptNILDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableVReceiptNILDetail As VReceiptNILDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVReceiptNILDetail = CType(Me.Table,VReceiptNILDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptNILDId() As Decimal
            Get
                Return CType(Me(Me.tableVReceiptNILDetail.ReceiptNILDIdColumn),Decimal)
            End Get
            Set
                Me(Me.tableVReceiptNILDetail.ReceiptNILDIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptNILId() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVReceiptNILDetail.ReceiptNILIdColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptNILId' in table 'VReceiptNILDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVReceiptNILDetail.ReceiptNILIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVReceiptNILDetail.ItemIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemID' in table 'VReceiptNILDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVReceiptNILDetail.ItemIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemPrice() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVReceiptNILDetail.ItemPriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemPrice' in table 'VReceiptNILDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVReceiptNILDetail.ItemPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemQTY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVReceiptNILDetail.ItemQTYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemQTY' in table 'VReceiptNILDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVReceiptNILDetail.ItemQTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVReceiptNILDetail.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'VReceiptNILDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVReceiptNILDetail.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableVReceiptNILDetail.BarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'VReceiptNILDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVReceiptNILDetail.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VMainReceiptNILRow() As VMainReceiptNILRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("VMainReceiptNIL_VReceiptNILDetail")),VMainReceiptNILRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("VMainReceiptNIL_VReceiptNILDetail"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptNILIdNull() As Boolean
            Return Me.IsNull(Me.tableVReceiptNILDetail.ReceiptNILIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptNILIdNull()
            Me(Me.tableVReceiptNILDetail.ReceiptNILIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemIDNull() As Boolean
            Return Me.IsNull(Me.tableVReceiptNILDetail.ItemIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemIDNull()
            Me(Me.tableVReceiptNILDetail.ItemIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemPriceNull() As Boolean
            Return Me.IsNull(Me.tableVReceiptNILDetail.ItemPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemPriceNull()
            Me(Me.tableVReceiptNILDetail.ItemPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemQTYNull() As Boolean
            Return Me.IsNull(Me.tableVReceiptNILDetail.ItemQTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemQTYNull()
            Me(Me.tableVReceiptNILDetail.ItemQTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableVReceiptNILDetail.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableVReceiptNILDetail.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableVReceiptNILDetail.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tableVReceiptNILDetail.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_OpticalShopPatientStatisticByIcomeTypeRow
        Inherits Global.System.Data.DataRow
        
        Private tableV_OpticalShopPatientStatisticByIcomeType As V_OpticalShopPatientStatisticByIcomeTypeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_OpticalShopPatientStatisticByIcomeType = CType(Me.Table,V_OpticalShopPatientStatisticByIcomeTypeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsOldPatient() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.IsOldPatientColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsOldPatient' in table 'V_OpticalShopPatientStatisticByIcom"& _ 
                            "eType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.IsOldPatientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IncomType() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.IncomTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IncomType' in table 'V_OpticalShopPatientStatisticByIcomeTy"& _ 
                            "pe' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.IncomTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptType() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.ReceiptTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptType' in table 'V_OpticalShopPatientStatisticByIcome"& _ 
                            "Type' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.ReceiptTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.FColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F' in table 'V_OpticalShopPatientStatisticByIcomeType' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.FColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.MColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M' in table 'V_OpticalShopPatientStatisticByIcomeType' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'V_OpticalShopPatientStatisticByIcomeType' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'V_OpticalShopPatientStatisticByIcomeType' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPaid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.IsPaidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsPaid' in table 'V_OpticalShopPatientStatisticByIcomeType'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.IsPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property agerange() As String
            Get
                Return CType(Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.agerangeColumn),String)
            End Get
            Set
                Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.agerangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.ReceiptDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptDate' in table 'V_OpticalShopPatientStatisticByIcome"& _ 
                            "Type' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.ReceiptDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsOldPatientNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPatientStatisticByIcomeType.IsOldPatientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsOldPatientNull()
            Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.IsOldPatientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIncomTypeNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPatientStatisticByIcomeType.IncomTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIncomTypeNull()
            Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.IncomTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptTypeNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPatientStatisticByIcomeType.ReceiptTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptTypeNull()
            Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.ReceiptTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPatientStatisticByIcomeType.FColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFNull()
            Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.FColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPatientStatisticByIcomeType.MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMNull()
            Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.MColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPatientStatisticByIcomeType.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPatientStatisticByIcomeType.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsPaidNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPatientStatisticByIcomeType.IsPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsPaidNull()
            Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.IsPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptDateNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPatientStatisticByIcomeType.ReceiptDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptDateNull()
            Me(Me.tableV_OpticalShopPatientStatisticByIcomeType.ReceiptDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_OpticalShopPaymentTypeByAgeStatisticRow
        Inherits Global.System.Data.DataRow
        
        Private tableV_OpticalShopPaymentTypeByAgeStatistic As V_OpticalShopPaymentTypeByAgeStatisticDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_OpticalShopPaymentTypeByAgeStatistic = CType(Me.Table,V_OpticalShopPaymentTypeByAgeStatisticDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentType() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.PaymentTypeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentType' in table 'V_OpticalShopPaymentTypeByAgeStatist"& _ 
                            "ic' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.PaymentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsOldPatient() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.IsOldPatientColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsOldPatient' in table 'V_OpticalShopPaymentTypeByAgeStatis"& _ 
                            "tic' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.IsOldPatientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IncomType() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.IncomTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IncomType' in table 'V_OpticalShopPaymentTypeByAgeStatistic"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.IncomTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptType() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.ReceiptTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptType' in table 'V_OpticalShopPaymentTypeByAgeStatist"& _ 
                            "ic' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.ReceiptTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.FColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F' in table 'V_OpticalShopPaymentTypeByAgeStatistic' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.FColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.MColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M' in table 'V_OpticalShopPaymentTypeByAgeStatistic' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'V_OpticalShopPaymentTypeByAgeStatistic' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'V_OpticalShopPaymentTypeByAgeStatistic' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPaid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.IsPaidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsPaid' in table 'V_OpticalShopPaymentTypeByAgeStatistic' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.IsPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property agerange() As String
            Get
                Return CType(Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.agerangeColumn),String)
            End Get
            Set
                Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.agerangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.ReceiptDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptDate' in table 'V_OpticalShopPaymentTypeByAgeStatist"& _ 
                            "ic' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.ReceiptDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentTypeNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.PaymentTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentTypeNull()
            Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.PaymentTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsOldPatientNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.IsOldPatientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsOldPatientNull()
            Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.IsOldPatientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIncomTypeNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.IncomTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIncomTypeNull()
            Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.IncomTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptTypeNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.ReceiptTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptTypeNull()
            Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.ReceiptTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.FColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFNull()
            Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.FColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMNull()
            Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.MColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsPaidNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.IsPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsPaidNull()
            Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.IsPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptDateNull() As Boolean
            Return Me.IsNull(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.ReceiptDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptDateNull()
            Me(Me.tableV_OpticalShopPaymentTypeByAgeStatistic.ReceiptDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_ITEM_OPT_TEMRow
        Inherits Global.System.Data.DataRow
        
        Private tableV_ITEM_OPT_TEM As V_ITEM_OPT_TEMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_ITEM_OPT_TEM = CType(Me.Table,V_ITEM_OPT_TEMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_ITEM_OPT_TEM.ReceiptNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptNo' in table 'V_ITEM_OPT_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_ITEM_OPT_TEM.ReceiptNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr1() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_ITEM_OPT_TEM.Expr1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Expr1' in table 'V_ITEM_OPT_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_ITEM_OPT_TEM.Expr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemID() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_ITEM_OPT_TEM.ItemIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemID' in table 'V_ITEM_OPT_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_ITEM_OPT_TEM.ItemIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemPrice() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_ITEM_OPT_TEM.ItemPriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemPrice' in table 'V_ITEM_OPT_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_ITEM_OPT_TEM.ItemPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemQTY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_ITEM_OPT_TEM.ItemQTYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemQTY' in table 'V_ITEM_OPT_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_ITEM_OPT_TEM.ItemQTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptNoNull() As Boolean
            Return Me.IsNull(Me.tableV_ITEM_OPT_TEM.ReceiptNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptNoNull()
            Me(Me.tableV_ITEM_OPT_TEM.ReceiptNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpr1Null() As Boolean
            Return Me.IsNull(Me.tableV_ITEM_OPT_TEM.Expr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpr1Null()
            Me(Me.tableV_ITEM_OPT_TEM.Expr1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemIDNull() As Boolean
            Return Me.IsNull(Me.tableV_ITEM_OPT_TEM.ItemIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemIDNull()
            Me(Me.tableV_ITEM_OPT_TEM.ItemIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemPriceNull() As Boolean
            Return Me.IsNull(Me.tableV_ITEM_OPT_TEM.ItemPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemPriceNull()
            Me(Me.tableV_ITEM_OPT_TEM.ItemPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemQTYNull() As Boolean
            Return Me.IsNull(Me.tableV_ITEM_OPT_TEM.ItemQTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemQTYNull()
            Me(Me.tableV_ITEM_OPT_TEM.ItemQTYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemItemDetialRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemItemDetial As TemItemDetialDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemItemDetial = CType(Me.Table,TemItemDetialDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnItemID() As Short
            Get
                Return CType(Me(Me.tableTemItemDetial.ColumnItemIDColumn),Short)
            End Get
            Set
                Me(Me.tableTemItemDetial.ColumnItemIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnBarcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemItemDetial.ColumnBarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnBarcode' in table 'TemItemDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemItemDetial.ColumnBarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemItemDetial.ColumnNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnName' in table 'TemItemDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemItemDetial.ColumnNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnPrice() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemItemDetial.ColumnPriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnPrice' in table 'TemItemDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemItemDetial.ColumnPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnQTY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemItemDetial.ColumnQTYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnQTY' in table 'TemItemDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemItemDetial.ColumnQTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Picture() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTemItemDetial.PictureColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Picture' in table 'TemItemDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemItemDetial.PictureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotalReal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemItemDetial.SubTotalRealColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTotalReal' in table 'TemItemDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemItemDetial.SubTotalRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotalDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemItemDetial.SubTotalDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTotalDolar' in table 'TemItemDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemItemDetial.SubTotalDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCost() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemItemDetial.ItemCostColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCost' in table 'TemItemDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemItemDetial.ItemCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXCHANGE_RATE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemItemDetial.EXCHANGE_RATEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCHANGE_RATE' in table 'TemItemDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemItemDetial.EXCHANGE_RATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableTemItemDetial.ColumnBarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnBarcodeNull()
            Me(Me.tableTemItemDetial.ColumnBarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnNameNull() As Boolean
            Return Me.IsNull(Me.tableTemItemDetial.ColumnNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnNameNull()
            Me(Me.tableTemItemDetial.ColumnNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnPriceNull() As Boolean
            Return Me.IsNull(Me.tableTemItemDetial.ColumnPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnPriceNull()
            Me(Me.tableTemItemDetial.ColumnPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnQTYNull() As Boolean
            Return Me.IsNull(Me.tableTemItemDetial.ColumnQTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnQTYNull()
            Me(Me.tableTemItemDetial.ColumnQTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPictureNull() As Boolean
            Return Me.IsNull(Me.tableTemItemDetial.PictureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPictureNull()
            Me(Me.tableTemItemDetial.PictureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalRealNull() As Boolean
            Return Me.IsNull(Me.tableTemItemDetial.SubTotalRealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalRealNull()
            Me(Me.tableTemItemDetial.SubTotalRealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalDolarNull() As Boolean
            Return Me.IsNull(Me.tableTemItemDetial.SubTotalDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalDolarNull()
            Me(Me.tableTemItemDetial.SubTotalDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCostNull() As Boolean
            Return Me.IsNull(Me.tableTemItemDetial.ItemCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCostNull()
            Me(Me.tableTemItemDetial.ItemCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXCHANGE_RATENull() As Boolean
            Return Me.IsNull(Me.tableTemItemDetial.EXCHANGE_RATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXCHANGE_RATENull()
            Me(Me.tableTemItemDetial.EXCHANGE_RATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NILTemItemDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableNILTemItemDetail As NILTemItemDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNILTemItemDetail = CType(Me.Table,NILTemItemDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNILTemItemDetail.ItemIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemID' in table 'NILTemItemDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNILTemItemDetail.ItemIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableNILTemItemDetail.BarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'NILTemItemDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNILTemItemDetail.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNILTemItemDetail.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'NILTemItemDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNILTemItemDetail.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Double
            Get
                Try 
                    Return CType(Me(Me.tableNILTemItemDetail.PriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'NILTemItemDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNILTemItemDetail.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNILTemItemDetail.QuantityColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'NILTemItemDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNILTemItemDetail.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Picture() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableNILTemItemDetail.PictureColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Picture' in table 'NILTemItemDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNILTemItemDetail.PictureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemIDNull() As Boolean
            Return Me.IsNull(Me.tableNILTemItemDetail.ItemIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemIDNull()
            Me(Me.tableNILTemItemDetail.ItemIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableNILTemItemDetail.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tableNILTemItemDetail.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableNILTemItemDetail.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableNILTemItemDetail.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tableNILTemItemDetail.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tableNILTemItemDetail.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableNILTemItemDetail.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantityNull()
            Me(Me.tableNILTemItemDetail.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPictureNull() As Boolean
            Return Me.IsNull(Me.tableNILTemItemDetail.PictureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPictureNull()
            Me(Me.tableNILTemItemDetail.PictureColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VItemPriceOpticalShopRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VItemPriceOpticalShopRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VItemPriceOpticalShopRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VItemPriceOpticalShopRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class INCOME_TYPERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_TYPERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As INCOME_TYPERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As INCOME_TYPERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataTableReceiptMaxRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataTableReceiptMaxRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataTableReceiptMaxRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataTableReceiptMaxRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VReceiptDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VReceiptDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VReceiptDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VReceiptDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DONATIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DONATIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DONATIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DONATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VMainReceiptDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VMainReceiptDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VMainReceiptDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VMainReceiptDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_OpticalShopCusStatisticRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As V_OpticalShopCusStatisticRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_OpticalShopCusStatisticRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_OpticalShopCusStatisticRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_OpticalShopItemSaleOffRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As V_OpticalShopItemSaleOffRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_OpticalShopItemSaleOffRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_OpticalShopItemSaleOffRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RECEIPT_CUSTOMERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RECEIPT_CUSTOMERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RECEIPT_CUSTOMERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RECEIPT_CUSTOMERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_Receipt_InvoiceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As V_Receipt_InvoiceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_Receipt_InvoiceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_Receipt_InvoiceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VMainReceiptNILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VMainReceiptNILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VMainReceiptNILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VMainReceiptNILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VReceiptNILDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VReceiptNILDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VReceiptNILDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VReceiptNILDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_OpticalShopPatientStatisticByIcomeTypeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As V_OpticalShopPatientStatisticByIcomeTypeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_OpticalShopPatientStatisticByIcomeTypeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_OpticalShopPatientStatisticByIcomeTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_OpticalShopPaymentTypeByAgeStatisticRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As V_OpticalShopPaymentTypeByAgeStatisticRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_OpticalShopPaymentTypeByAgeStatisticRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_OpticalShopPaymentTypeByAgeStatisticRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_ITEM_OPT_TEMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As V_ITEM_OPT_TEMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_ITEM_OPT_TEMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_ITEM_OPT_TEMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemItemDetialRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemItemDetialRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemItemDetialRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemItemDetialRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NILTemItemDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NILTemItemDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NILTemItemDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NILTemItemDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DSOpticalShopTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VItemPriceOpticalShopTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VItemPriceOpticalShop"
            tableMapping.ColumnMappings.Add("ItemID", "ItemID")
            tableMapping.ColumnMappings.Add("Barcode", "Barcode")
            tableMapping.ColumnMappings.Add("ItemName", "ItemName")
            tableMapping.ColumnMappings.Add("Price", "Price")
            tableMapping.ColumnMappings.Add("IsUSD", "IsUSD")
            tableMapping.ColumnMappings.Add("IsKHR", "IsKHR")
            tableMapping.ColumnMappings.Add("IsCurPrice", "IsCurPrice")
            tableMapping.ColumnMappings.Add("Picture", "Picture")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ItemID, Barcode, ItemName, Price, IsUSD, IsKHR, IsCurPrice, Picture FROM d"& _ 
                "bo.VItemPriceOpticalShop"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOpticalShop.VItemPriceOpticalShopDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOpticalShop.VItemPriceOpticalShopDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOpticalShop.VItemPriceOpticalShopDataTable = New DSOpticalShop.VItemPriceOpticalShopDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class INCOME_TYPETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "INCOME_TYPE"
            tableMapping.ColumnMappings.Add("ICID", "ICID")
            tableMapping.ColumnMappings.Add("ICType", "ICType")
            tableMapping.ColumnMappings.Add("Description", "Description")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[INCOME_TYPE] WHERE (([ICID] = @Original_ICID) AND ((@IsNull_IC"& _ 
                "Type = 1 AND [ICType] IS NULL) OR ([ICType] = @Original_ICType)) AND ((@IsNull_D"& _ 
                "escription = 1 AND [Description] IS NULL) OR ([Description] = @Original_Descript"& _ 
                "ion)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ICID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Description", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[INCOME_TYPE] ([ICType], [Description]) VALUES (@ICType, @Descr"& _ 
                "iption);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ICID, ICType, Description FROM INCOME_TYPE WHERE (ICID = SCOPE_"& _ 
                "IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[INCOME_TYPE] SET [ICType] = @ICType, [Description] = @Description W"& _ 
                "HERE (([ICID] = @Original_ICID) AND ((@IsNull_ICType = 1 AND [ICType] IS NULL) O"& _ 
                "R ([ICType] = @Original_ICType)) AND ((@IsNull_Description = 1 AND [Description]"& _ 
                " IS NULL) OR ([Description] = @Original_Description)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ICID, ICType, De"& _ 
                "scription FROM INCOME_TYPE WHERE (ICID = @ICID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ICID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Description", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ICID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ICID, ICType, Description FROM dbo.INCOME_TYPE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOpticalShop.INCOME_TYPEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOpticalShop.INCOME_TYPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOpticalShop.INCOME_TYPEDataTable = New DSOpticalShop.INCOME_TYPEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSOpticalShop.INCOME_TYPEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSOpticalShop) As Integer
            Return Me.Adapter.Update(dataSet, "INCOME_TYPE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ICID As Decimal, ByVal Original_ICType As String, ByVal Original_Description As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ICID,Decimal)
            If (Original_ICType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ICType,String)
            End If
            If (Original_Description Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Description,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ICType As String, ByVal Description As String) As Integer
            If (ICType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ICType,String)
            End If
            If (Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Description,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ICType As String, ByVal Description As String, ByVal Original_ICID As Decimal, ByVal Original_ICType As String, ByVal Original_Description As String, ByVal ICID As Decimal) As Integer
            If (ICType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ICType,String)
            End If
            If (Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Description,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ICID,Decimal)
            If (Original_ICType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ICType,String)
            End If
            If (Original_Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Description,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ICID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ICType As String, ByVal Description As String, ByVal Original_ICID As Decimal, ByVal Original_ICType As String, ByVal Original_Description As String) As Integer
            Return Me.Update(ICType, Description, Original_ICID, Original_ICType, Original_Description, Original_ICID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DataTableReceiptMaxTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DataTableReceiptMax"
            tableMapping.ColumnMappings.Add("ReceiptMaxAuto", "ReceiptMaxAuto")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MAX(ReceiptID) AS ReceiptMaxAuto"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM  RECEIPT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOpticalShop.DataTableReceiptMaxDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataReceiptMax() As DSOpticalShop.DataTableReceiptMaxDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOpticalShop.DataTableReceiptMaxDataTable = New DSOpticalShop.DataTableReceiptMaxDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VReceiptDetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VReceiptDetail"
            tableMapping.ColumnMappings.Add("ReceiptDID", "ReceiptDID")
            tableMapping.ColumnMappings.Add("ItemID", "ItemID")
            tableMapping.ColumnMappings.Add("ItemName", "ItemName")
            tableMapping.ColumnMappings.Add("ItemQTY", "ItemQTY")
            tableMapping.ColumnMappings.Add("SubTotalReal", "SubTotalReal")
            tableMapping.ColumnMappings.Add("SubTotalDolar", "SubTotalDolar")
            tableMapping.ColumnMappings.Add("IncomeID", "IncomeID")
            tableMapping.ColumnMappings.Add("ReceiptDate", "ReceiptDate")
            tableMapping.ColumnMappings.Add("Barcode", "Barcode")
            tableMapping.ColumnMappings.Add("ItemPrice", "ItemPrice")
            tableMapping.ColumnMappings.Add("ReceiptNo", "ReceiptNo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     ReceiptDID, ItemID, ItemName, ItemQTY, SubTotalReal, SubTotalDolar, In"& _ 
                "comeID, ReceiptDate, Barcode, ItemPrice, ReceiptNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         VReceiptDetail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Barcode, IncomeID, ItemID, ItemName, ItemPrice, ItemQTY, ReceiptDID, Recei"& _ 
                "ptDate, ReceiptNo, SubTotalDolar, SubTotalReal FROM VReceiptDetail WHERE (Receip"& _ 
                "tNo = @ReceiptNo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReceiptNo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOpticalShop.VReceiptDetailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOpticalShop.VReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOpticalShop.VReceiptDetailDataTable = New DSOpticalShop.VReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSOpticalShop.VReceiptDetailDataTable, ByVal ReceiptNo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ReceiptNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ReceiptNo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByReceiptNo(ByVal ReceiptNo As String) As DSOpticalShop.VReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ReceiptNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ReceiptNo,String)
            End If
            Dim dataTable As DSOpticalShop.VReceiptDetailDataTable = New DSOpticalShop.VReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DONATIONTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DONATION"
            tableMapping.ColumnMappings.Add("DonationID", "DonationID")
            tableMapping.ColumnMappings.Add("DonationName", "DonationName")
            tableMapping.ColumnMappings.Add("Description", "Description")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DONATION] WHERE (([DonationID] = @Original_DonationID) AND ((@"& _ 
                "IsNull_DonationName = 1 AND [DonationName] IS NULL) OR ([DonationName] = @Origin"& _ 
                "al_DonationName)) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR (["& _ 
                "Description] = @Original_Description)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DonationID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "DonationID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DonationName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonationName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DonationName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonationName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Description", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DONATION] ([DonationName], [Description]) VALUES (@DonationNam"& _ 
                "e, @Description);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT DonationID, DonationName, Description FROM DONATION WH"& _ 
                "ERE (DonationID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DonationName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonationName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DONATION] SET [DonationName] = @DonationName, [Description] = @Desc"& _ 
                "ription WHERE (([DonationID] = @Original_DonationID) AND ((@IsNull_DonationName "& _ 
                "= 1 AND [DonationName] IS NULL) OR ([DonationName] = @Original_DonationName)) AN"& _ 
                "D ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Orig"& _ 
                "inal_Description)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT DonationID, DonationName, Description FROM DONATION"& _ 
                " WHERE (DonationID = @DonationID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DonationName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonationName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DonationID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "DonationID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DonationName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonationName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DonationName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonationName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Description", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DonationID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "DonationID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DonationID, DonationName, Description FROM dbo.DONATION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOpticalShop.DONATIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOpticalShop.DONATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOpticalShop.DONATIONDataTable = New DSOpticalShop.DONATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSOpticalShop.DONATIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSOpticalShop) As Integer
            Return Me.Adapter.Update(dataSet, "DONATION")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_DonationID As Decimal, ByVal Original_DonationName As String, ByVal Original_Description As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_DonationID,Decimal)
            If (Original_DonationName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DonationName,String)
            End If
            If (Original_Description Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Description,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DonationName As String, ByVal Description As String) As Integer
            If (DonationName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DonationName,String)
            End If
            If (Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Description,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DonationName As String, ByVal Description As String, ByVal Original_DonationID As Decimal, ByVal Original_DonationName As String, ByVal Original_Description As String, ByVal DonationID As Decimal) As Integer
            If (DonationName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DonationName,String)
            End If
            If (Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Description,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_DonationID,Decimal)
            If (Original_DonationName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_DonationName,String)
            End If
            If (Original_Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Description,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(DonationID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DonationName As String, ByVal Description As String, ByVal Original_DonationID As Decimal, ByVal Original_DonationName As String, ByVal Original_Description As String) As Integer
            Return Me.Update(DonationName, Description, Original_DonationID, Original_DonationName, Original_Description, Original_DonationID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VMainReceiptDetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VMainReceiptDetail"
            tableMapping.ColumnMappings.Add("ReceiptID", "ReceiptID")
            tableMapping.ColumnMappings.Add("ReceiptDate", "ReceiptDate")
            tableMapping.ColumnMappings.Add("CustomerNo", "CustomerNo")
            tableMapping.ColumnMappings.Add("MedicReal", "MedicReal")
            tableMapping.ColumnMappings.Add("MedicDolar", "MedicDolar")
            tableMapping.ColumnMappings.Add("EyeGlassesReal", "EyeGlassesReal")
            tableMapping.ColumnMappings.Add("EyeGlassesDolar", "EyeGlassesDolar")
            tableMapping.ColumnMappings.Add("TotalReal", "TotalReal")
            tableMapping.ColumnMappings.Add("TotalDolar", "TotalDolar")
            tableMapping.ColumnMappings.Add("AmountInWords", "AmountInWords")
            tableMapping.ColumnMappings.Add("AmountFigureReal", "AmountFigureReal")
            tableMapping.ColumnMappings.Add("AmountFigureDolar", "AmountFigureDolar")
            tableMapping.ColumnMappings.Add("IsCurrency", "IsCurrency")
            tableMapping.ColumnMappings.Add("IsDonation", "IsDonation")
            tableMapping.ColumnMappings.Add("DonationID", "DonationID")
            tableMapping.ColumnMappings.Add("PayBySelf", "PayBySelf")
            tableMapping.ColumnMappings.Add("PayByDonation", "PayByDonation")
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid")
            tableMapping.ColumnMappings.Add("ReceiptNote", "ReceiptNote")
            tableMapping.ColumnMappings.Add("UserID", "UserID")
            tableMapping.ColumnMappings.Add("UserName", "UserName")
            tableMapping.ColumnMappings.Add("CusName", "CusName")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Occupation", "Occupation")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("ReadyModR", "ReadyModR")
            tableMapping.ColumnMappings.Add("SpectacleR", "SpectacleR")
            tableMapping.ColumnMappings.Add("OtherR", "OtherR")
            tableMapping.ColumnMappings.Add("ReturnReal", "ReturnReal")
            tableMapping.ColumnMappings.Add("ReturnDolar", "ReturnDolar")
            tableMapping.ColumnMappings.Add("FundRaisingR", "FundRaisingR")
            tableMapping.ColumnMappings.Add("SpectacleDolar", "SpectacleDolar")
            tableMapping.ColumnMappings.Add("ReadyModDolar", "ReadyModDolar")
            tableMapping.ColumnMappings.Add("FundRaisingDolar", "FundRaisingDolar")
            tableMapping.ColumnMappings.Add("OtherDolar", "OtherDolar")
            tableMapping.ColumnMappings.Add("IncomType", "IncomType")
            tableMapping.ColumnMappings.Add("DonationName", "DonationName")
            tableMapping.ColumnMappings.Add("Glasses", "Glasses")
            tableMapping.ColumnMappings.Add("DonateAmount", "DonateAmount")
            tableMapping.ColumnMappings.Add("SupportedAmtR", "SupportedAmtR")
            tableMapping.ColumnMappings.Add("SupportedAmtDolar", "SupportedAmtDolar")
            tableMapping.ColumnMappings.Add("ReceiptType", "ReceiptType")
            tableMapping.ColumnMappings.Add("PaidR", "PaidR")
            tableMapping.ColumnMappings.Add("PaidDollar", "PaidDollar")
            tableMapping.ColumnMappings.Add("CusNameEng", "CusNameEng")
            tableMapping.ColumnMappings.Add("IsOldPatient", "IsOldPatient")
            tableMapping.ColumnMappings.Add("FullAmount", "FullAmount")
            tableMapping.ColumnMappings.Add("NilAmount", "NilAmount")
            tableMapping.ColumnMappings.Add("SocialAmount", "SocialAmount")
            tableMapping.ColumnMappings.Add("PaymentCur", "PaymentCur")
            tableMapping.ColumnMappings.Add("PaymentType", "PaymentType")
            tableMapping.ColumnMappings.Add("Comment", "Comment")
            tableMapping.ColumnMappings.Add("Expr1", "Expr1")
            tableMapping.ColumnMappings.Add("ReceiptNo", "ReceiptNo")
            tableMapping.ColumnMappings.Add("CustID", "CustID")
            tableMapping.ColumnMappings.Add("TotalSocial", "TotalSocial")
            tableMapping.ColumnMappings.Add("SubReceiptType", "SubReceiptType")
            tableMapping.ColumnMappings.Add("TIME_CREATE", "TIME_CREATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(14) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ReceiptID, ReceiptDate, CustomerNo, MedicReal, MedicDolar, EyeGlass"& _ 
                "esReal, EyeGlassesDolar, TotalReal, TotalDolar, AmountInWords, AmountFigureReal,"& _ 
                " AmountFigureDolar, IsCurrency, IsDonation, DonationID, PayBySelf, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "              PayByDonation, IsPaid, ReceiptNote, UserID, UserName, CusName, Sex"& _ 
                ", Age, Occupation, Address, ReadyModR, SpectacleR, OtherR, ReturnReal, ReturnDol"& _ 
                "ar, FundRaisingR, SpectacleDolar, ReadyModDolar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Fund"& _ 
                "RaisingDolar, OtherDolar, IncomType, DonationName, Glasses, DonateAmount, Suppor"& _ 
                "tedAmtR, SupportedAmtDolar, ReceiptType, PaidR, PaidDollar, CusNameEng, IsOldPat"& _ 
                "ient, FullAmount, NilAmount, SocialAmount, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         PaymentCur"& _ 
                ", PaymentType, Comment, Expr1, ReceiptNo, CustID, TotalSocial, SubReceiptType, T"& _ 
                "IME_CREATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VMainReceiptDetail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (IsPaid = @IsPaid)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY ReceiptID DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPaid", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "IsPaid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Address, Age, AmountFigureDolar, AmountFigureReal, AmountInWords, Comment,"& _ 
                " CusName, CusNameEng, CustID, CustomerNo, DonateAmount, DonationID, DonationName"& _ 
                ", Expr1, EyeGlassesDolar, EyeGlassesReal, FullAmount, FundRaisingDolar, FundRais"& _ 
                "ingR, Glasses, IncomType, IsCurrency, IsDonation, IsOldPatient, IsPaid, MedicDol"& _ 
                "ar, MedicReal, NilAmount, Occupation, OtherDolar, OtherR, PaidDollar, PaidR, Pay"& _ 
                "ByDonation, PayBySelf, PaymentCur, PaymentType, ReadyModDolar, ReadyModR, Receip"& _ 
                "tDate, ReceiptID, ReceiptNo, ReceiptNote, ReceiptType, ReturnDolar, ReturnReal, "& _ 
                "Sex, SocialAmount, SpectacleDolar, SpectacleR, SubReceiptType, SupportedAmtDolar"& _ 
                ", SupportedAmtR, TIME_CREATE, TotalDolar, TotalReal, TotalSocial, UserID, UserNa"& _ 
                "me FROM VMainReceiptDetail ORDER BY ReceiptID DESC"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Address, Age, AmountFigureDolar, AmountFigureReal, AmountInWords, Comment,"& _ 
                " CusName, CusNameEng, CustID, CustomerNo, DonateAmount, DonationID, DonationName"& _ 
                ", Expr1, EyeGlassesDolar, EyeGlassesReal, FullAmount, FundRaisingDolar, FundRais"& _ 
                "ingR, Glasses, IncomType, IsCurrency, IsDonation, IsOldPatient, IsPaid, MedicDol"& _ 
                "ar, MedicReal, NilAmount, Occupation, OtherDolar, OtherR, PaidDollar, PaidR, Pay"& _ 
                "ByDonation, PayBySelf, PaymentCur, PaymentType, ReadyModDolar, ReadyModR, Receip"& _ 
                "tDate, ReceiptID, ReceiptNo, ReceiptNote, ReceiptType, ReturnDolar, ReturnReal, "& _ 
                "Sex, SocialAmount, SpectacleDolar, SpectacleR, SubReceiptType, SupportedAmtDolar"& _ 
                ", SupportedAmtR, TIME_CREATE, TotalDolar, TotalReal, TotalSocial, UserID, UserNa"& _ 
                "me FROM VMainReceiptDetail WHERE (IsPaid = @IsPaid) AND (CAST(CONVERT (VARCHAR(1"& _ 
                "0), ReceiptDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@DateFr"& _ 
                "om AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@DateTO AS "& _ 
                "DATETIME), 1) AS Datetime)) AND (DonateAmount <> 0)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPaid", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "IsPaid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT Address, Age, AmountFigureDolar, AmountFigureReal, AmountInWords, Comment,"& _ 
                " CusName, CusNameEng, CustID, CustomerNo, DonateAmount, DonationID, DonationName"& _ 
                ", Expr1, EyeGlassesDolar, EyeGlassesReal, FullAmount, FundRaisingDolar, FundRais"& _ 
                "ingR, Glasses, IncomType, IsCurrency, IsDonation, IsOldPatient, IsPaid, MedicDol"& _ 
                "ar, MedicReal, NilAmount, Occupation, OtherDolar, OtherR, PaidDollar, PaidR, Pay"& _ 
                "ByDonation, PayBySelf, PaymentCur, PaymentType, ReadyModDolar, ReadyModR, Receip"& _ 
                "tDate, ReceiptID, ReceiptNo, ReceiptNote, ReceiptType, ReturnDolar, ReturnReal, "& _ 
                "Sex, SocialAmount, SpectacleDolar, SpectacleR, SubReceiptType, SupportedAmtDolar"& _ 
                ", SupportedAmtR, TIME_CREATE, TotalDolar, TotalReal, TotalSocial, UserID, UserNa"& _ 
                "me FROM VMainReceiptDetail WHERE (IsPaid = @IsPaid) AND (CAST(CONVERT (VARCHAR(1"& _ 
                "0), ReceiptDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@DateFr"& _ 
                "om AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@DateTO AS "& _ 
                "DATETIME), 1) AS Datetime)) AND (DonationID = @DonationID) AND (DonateAmount <> "& _ 
                "0)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPaid", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "IsPaid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DonationID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "DonationID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT Address, Age, AmountFigureDolar, AmountFigureReal, AmountInWords, Comment,"& _ 
                " CusName, CusNameEng, CustID, CustomerNo, DonateAmount, DonationID, DonationName"& _ 
                ", Expr1, EyeGlassesDolar, EyeGlassesReal, FullAmount, FundRaisingDolar, FundRais"& _ 
                "ingR, Glasses, IncomType, IsCurrency, IsDonation, IsOldPatient, IsPaid, MedicDol"& _ 
                "ar, MedicReal, NilAmount, Occupation, OtherDolar, OtherR, PaidDollar, PaidR, Pay"& _ 
                "ByDonation, PayBySelf, PaymentCur, PaymentType, ReadyModDolar, ReadyModR, Receip"& _ 
                "tDate, ReceiptID, ReceiptNo, ReceiptNote, ReceiptType, ReturnDolar, ReturnReal, "& _ 
                "Sex, SocialAmount, SpectacleDolar, SpectacleR, SubReceiptType, SupportedAmtDolar"& _ 
                ", SupportedAmtR, TIME_CREATE, TotalDolar, TotalReal, TotalSocial, UserID, UserNa"& _ 
                "me FROM VMainReceiptDetail WHERE (ReceiptID = @ReceiptID) ORDER BY ReceiptID DES"& _ 
                "C"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReceiptID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ReceiptID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT Address, Age, AmountFigureDolar, AmountFigureReal, AmountInWords, Comment,"& _ 
                " CusName, CusNameEng, CustID, CustomerNo, DonateAmount, DonationID, DonationName"& _ 
                ", Expr1, EyeGlassesDolar, EyeGlassesReal, FullAmount, FundRaisingDolar, FundRais"& _ 
                "ingR, Glasses, IncomType, IsCurrency, IsDonation, IsOldPatient, IsPaid, MedicDol"& _ 
                "ar, MedicReal, NilAmount, Occupation, OtherDolar, OtherR, PaidDollar, PaidR, Pay"& _ 
                "ByDonation, PayBySelf, PaymentCur, PaymentType, ReadyModDolar, ReadyModR, Receip"& _ 
                "tDate, ReceiptID, ReceiptNo, ReceiptNote, ReceiptType, ReturnDolar, ReturnReal, "& _ 
                "Sex, SocialAmount, SpectacleDolar, SpectacleR, SubReceiptType, SupportedAmtDolar"& _ 
                ", SupportedAmtR, TIME_CREATE, TotalDolar, TotalReal, TotalSocial, UserID, UserNa"& _ 
                "me FROM VMainReceiptDetail WHERE (ReceiptNo = @ReceiptNo) ORDER BY ReceiptID DES"& _ 
                "C"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReceiptNo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT Address, Age, AmountFigureDolar, AmountFigureReal, AmountInWords, Comment,"& _ 
                " CusName, CusNameEng, CustID, CustomerNo, DonateAmount, DonationID, DonationName"& _ 
                ", Expr1, EyeGlassesDolar, EyeGlassesReal, FullAmount, FundRaisingDolar, FundRais"& _ 
                "ingR, Glasses, IncomType, IsCurrency, IsDonation, IsOldPatient, IsPaid, MedicDol"& _ 
                "ar, MedicReal, NilAmount, Occupation, OtherDolar, OtherR, PaidDollar, PaidR, Pay"& _ 
                "ByDonation, PayBySelf, PaymentCur, PaymentType, ReadyModDolar, ReadyModR, Receip"& _ 
                "tDate, ReceiptID, ReceiptNo, ReceiptNote, ReceiptType, ReturnDolar, ReturnReal, "& _ 
                "Sex, SocialAmount, SpectacleDolar, SpectacleR, SubReceiptType, SupportedAmtDolar"& _ 
                ", SupportedAmtR, TIME_CREATE, TotalDolar, TotalReal, TotalSocial, UserID, UserNa"& _ 
                "me FROM VMainReceiptDetail WHERE (IsPaid = @IsPaid) AND (PaymentType = @PaymentT"& _ 
                "ype) AND (CAST(CONVERT (VARCHAR(10), ReceiptDate, 1) AS DateTime) BETWEEN CAST(C"& _ 
                "ONVERT (VARCHAR(10), CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVE"& _ 
                "RT (VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datetime)) ORDER BY ReceiptID "& _ 
                "DESC"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPaid", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "IsPaid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaymentType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PaymentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT Address, Age, AmountFigureDolar, AmountFigureReal, AmountInWords, Comment,"& _ 
                " CusName, CusNameEng, CustID, CustomerNo, DonateAmount, DonationID, DonationName"& _ 
                ", Expr1, EyeGlassesDolar, EyeGlassesReal, FullAmount, FundRaisingDolar, FundRais"& _ 
                "ingR, Glasses, IncomType, IsCurrency, IsDonation, IsOldPatient, IsPaid, MedicDol"& _ 
                "ar, MedicReal, NilAmount, Occupation, OtherDolar, OtherR, PaidDollar, PaidR, Pay"& _ 
                "ByDonation, PayBySelf, PaymentCur, PaymentType, ReadyModDolar, ReadyModR, Receip"& _ 
                "tDate, ReceiptID, ReceiptNo, ReceiptNote, ReceiptType, ReturnDolar, ReturnReal, "& _ 
                "Sex, SocialAmount, SpectacleDolar, SpectacleR, SubReceiptType, SupportedAmtDolar"& _ 
                ", SupportedAmtR, TIME_CREATE, TotalDolar, TotalReal, TotalSocial, UserID, UserNa"& _ 
                "me FROM VMainReceiptDetail WHERE (IsPaid = @IsPaid) AND (CAST(CONVERT (VARCHAR(1"& _ 
                "0), ReceiptDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@DateFr"& _ 
                "om AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@DateTO AS "& _ 
                "DATETIME), 1) AS Datetime)) AND (PaymentType <> 2) ORDER BY ReceiptID DESC"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPaid", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "IsPaid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT Address, Age, AmountFigureDolar, AmountFigureReal, AmountInWords, Comment,"& _ 
                " CusName, CusNameEng, CustID, CustomerNo, DonateAmount, DonationID, DonationName"& _ 
                ", Expr1, EyeGlassesDolar, EyeGlassesReal, FullAmount, FundRaisingDolar, FundRais"& _ 
                "ingR, Glasses, IncomType, IsCurrency, IsDonation, IsOldPatient, IsPaid, MedicDol"& _ 
                "ar, MedicReal, NilAmount, Occupation, OtherDolar, OtherR, PaidDollar, PaidR, Pay"& _ 
                "ByDonation, PayBySelf, PaymentCur, PaymentType, ReadyModDolar, ReadyModR, Receip"& _ 
                "tDate, ReceiptID, ReceiptNo, ReceiptNote, ReceiptType, ReturnDolar, ReturnReal, "& _ 
                "Sex, SocialAmount, SpectacleDolar, SpectacleR, SubReceiptType, SupportedAmtDolar"& _ 
                ", SupportedAmtR, TIME_CREATE, TotalDolar, TotalReal, TotalSocial, UserID, UserNa"& _ 
                "me FROM VMainReceiptDetail WHERE (PaymentType = @PaymentType) ORDER BY ReceiptID"& _ 
                " DESC"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaymentType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PaymentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT Address, Age, AmountFigureDolar, AmountFigureReal, AmountInWords, Comment,"& _ 
                " CusName, CusNameEng, CustID, CustomerNo, DonateAmount, DonationID, DonationName"& _ 
                ", Expr1, EyeGlassesDolar, EyeGlassesReal, FullAmount, FundRaisingDolar, FundRais"& _ 
                "ingR, Glasses, IncomType, IsCurrency, IsDonation, IsOldPatient, IsPaid, MedicDol"& _ 
                "ar, MedicReal, NilAmount, Occupation, OtherDolar, OtherR, PaidDollar, PaidR, Pay"& _ 
                "ByDonation, PayBySelf, PaymentCur, PaymentType, ReadyModDolar, ReadyModR, Receip"& _ 
                "tDate, ReceiptID, ReceiptNo, ReceiptNote, ReceiptType, ReturnDolar, ReturnReal, "& _ 
                "Sex, SocialAmount, SpectacleDolar, SpectacleR, SubReceiptType, SupportedAmtDolar"& _ 
                ", SupportedAmtR, TIME_CREATE, TotalDolar, TotalReal, TotalSocial, UserID, UserNa"& _ 
                "me FROM VMainReceiptDetail WHERE (PaymentType = @PaymentType) AND (CAST(CONVERT "& _ 
                "(VARCHAR(10), ReceiptDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CA"& _ 
                "ST(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@"& _ 
                "DateTO AS DATETIME), 1) AS Datetime)) ORDER BY ReceiptID DESC"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaymentType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PaymentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(10).Connection = Me.Connection
            Me._commandCollection(10).CommandText = "SELECT Address, Age, AmountFigureDolar, AmountFigureReal, AmountInWords, Comment,"& _ 
                " CusName, CusNameEng, CustID, CustomerNo, DonateAmount, DonationID, DonationName"& _ 
                ", Expr1, EyeGlassesDolar, EyeGlassesReal, FullAmount, FundRaisingDolar, FundRais"& _ 
                "ingR, Glasses, IncomType, IsCurrency, IsDonation, IsOldPatient, IsPaid, MedicDol"& _ 
                "ar, MedicReal, NilAmount, Occupation, OtherDolar, OtherR, PaidDollar, PaidR, Pay"& _ 
                "ByDonation, PayBySelf, PaymentCur, PaymentType, ReadyModDolar, ReadyModR, Receip"& _ 
                "tDate, ReceiptID, ReceiptNo, ReceiptNote, ReceiptType, ReturnDolar, ReturnReal, "& _ 
                "Sex, SocialAmount, SpectacleDolar, SpectacleR, SubReceiptType, SupportedAmtDolar"& _ 
                ", SupportedAmtR, TIME_CREATE, TotalDolar, TotalReal, TotalSocial, UserID, UserNa"& _ 
                "me FROM VMainReceiptDetail WHERE (CAST(CONVERT (VARCHAR(10), ReceiptDate, 1) AS "& _ 
                "DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@DateFrom AS DATETIME), 1) AS "& _ 
                "Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Dateti"& _ 
                "me)) AND (PaymentType = 2) ORDER BY ReceiptID DESC"
            Me._commandCollection(10).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(11) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(11).Connection = Me.Connection
            Me._commandCollection(11).CommandText = "SELECT Address, Age, AmountFigureDolar, AmountFigureReal, AmountInWords, Comment,"& _ 
                " CusName, CusNameEng, CustID, CustomerNo, DonateAmount, DonationID, DonationName"& _ 
                ", Expr1, EyeGlassesDolar, EyeGlassesReal, FullAmount, FundRaisingDolar, FundRais"& _ 
                "ingR, Glasses, IncomType, IsCurrency, IsDonation, IsOldPatient, IsPaid, MedicDol"& _ 
                "ar, MedicReal, NilAmount, Occupation, OtherDolar, OtherR, PaidDollar, PaidR, Pay"& _ 
                "ByDonation, PayBySelf, PaymentCur, PaymentType, ReadyModDolar, ReadyModR, Receip"& _ 
                "tDate, ReceiptID, ReceiptNo, ReceiptNote, ReceiptType, ReturnDolar, ReturnReal, "& _ 
                "Sex, SocialAmount, SpectacleDolar, SpectacleR, SubReceiptType, SupportedAmtDolar"& _ 
                ", SupportedAmtR, TIME_CREATE, TotalDolar, TotalReal, TotalSocial, UserID, UserNa"& _ 
                "me FROM VMainReceiptDetail WHERE (CAST(CONVERT (VARCHAR(10), ReceiptDate, 1) AS "& _ 
                "DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@DateFrom AS DATETIME), 1) AS "& _ 
                "Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Dateti"& _ 
                "me)) AND (IsPaid = @IsPaid1) AND (PaymentType = @PaymentType) ORDER BY ReceiptID"& _ 
                " DESC"
            Me._commandCollection(11).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(11).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(11).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(11).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPaid1", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "IsPaid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(11).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaymentType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PaymentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(12) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(12).Connection = Me.Connection
            Me._commandCollection(12).CommandText = "SELECT Address, Age, AmountFigureDolar, AmountFigureReal, AmountInWords, Comment,"& _ 
                " CusName, CusNameEng, CustID, CustomerNo, DonateAmount, DonationID, DonationName"& _ 
                ", Expr1, EyeGlassesDolar, EyeGlassesReal, FullAmount, FundRaisingDolar, FundRais"& _ 
                "ingR, Glasses, IncomType, IsCurrency, IsDonation, IsOldPatient, IsPaid, MedicDol"& _ 
                "ar, MedicReal, NilAmount, Occupation, OtherDolar, OtherR, PaidDollar, PaidR, Pay"& _ 
                "ByDonation, PayBySelf, PaymentCur, PaymentType, ReadyModDolar, ReadyModR, Receip"& _ 
                "tDate, ReceiptID, ReceiptNo, ReceiptNote, ReceiptType, ReturnDolar, ReturnReal, "& _ 
                "Sex, SocialAmount, SpectacleDolar, SpectacleR, SubReceiptType, SupportedAmtDolar"& _ 
                ", SupportedAmtR, TIME_CREATE, TotalDolar, TotalReal, TotalSocial, UserID, UserNa"& _ 
                "me FROM VMainReceiptDetail WHERE (CAST(CONVERT (VARCHAR(10), ReceiptDate, 1) AS "& _ 
                "DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@DateFrom AS DATETIME), 1) AS "& _ 
                "Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Dateti"& _ 
                "me)) ORDER BY ReceiptID DESC"
            Me._commandCollection(12).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(12).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(12).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(13) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(13).Connection = Me.Connection
            Me._commandCollection(13).CommandText = "SELECT Address, Age, AmountFigureDolar, AmountFigureReal, AmountInWords, Comment,"& _ 
                " CusName, CusNameEng, CustID, CustomerNo, DonateAmount, DonationID, DonationName"& _ 
                ", Expr1, EyeGlassesDolar, EyeGlassesReal, FullAmount, FundRaisingDolar, FundRais"& _ 
                "ingR, Glasses, IncomType, IsCurrency, IsDonation, IsOldPatient, IsPaid, MedicDol"& _ 
                "ar, MedicReal, NilAmount, Occupation, OtherDolar, OtherR, PaidDollar, PaidR, Pay"& _ 
                "ByDonation, PayBySelf, PaymentCur, PaymentType, ReadyModDolar, ReadyModR, Receip"& _ 
                "tDate, ReceiptID, ReceiptNo, ReceiptNote, ReceiptType, ReturnDolar, ReturnReal, "& _ 
                "Sex, SocialAmount, SpectacleDolar, SpectacleR, SubReceiptType, SupportedAmtDolar"& _ 
                ", SupportedAmtR, TIME_CREATE, TotalDolar, TotalReal, TotalSocial, UserID, UserNa"& _ 
                "me FROM VMainReceiptDetail WHERE (CAST(CONVERT (VARCHAR(10), ReceiptDate, 1) AS "& _ 
                "DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@DateFrom AS DATETIME), 1) AS "& _ 
                "Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Dateti"& _ 
                "me)) AND (IsPaid = @IsPaid) ORDER BY ReceiptID DESC"
            Me._commandCollection(13).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(13).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(13).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(13).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPaid", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "IsPaid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(14).Connection = Me.Connection
            Me._commandCollection(14).CommandText = "SELECT Address, Age, AmountFigureDolar, AmountFigureReal, AmountInWords, Comment,"& _ 
                " CusName, CusNameEng, CustID, CustomerNo, DonateAmount, DonationID, DonationName"& _ 
                ", Expr1, EyeGlassesDolar, EyeGlassesReal, FullAmount, FundRaisingDolar, FundRais"& _ 
                "ingR, Glasses, IncomType, IsCurrency, IsDonation, IsOldPatient, IsPaid, MedicDol"& _ 
                "ar, MedicReal, NilAmount, Occupation, OtherDolar, OtherR, PaidDollar, PaidR, Pay"& _ 
                "ByDonation, PayBySelf, PaymentCur, PaymentType, ReadyModDolar, ReadyModR, Receip"& _ 
                "tDate, ReceiptID, ReceiptNo, ReceiptNote, ReceiptType, ReturnDolar, ReturnReal, "& _ 
                "Sex, SocialAmount, SpectacleDolar, SpectacleR, SubReceiptType, SupportedAmtDolar"& _ 
                ", SupportedAmtR, TIME_CREATE, TotalDolar, TotalReal, TotalSocial, UserID, UserNa"& _ 
                "me FROM VMainReceiptDetail WHERE (CAST(CONVERT (VARCHAR(10), ReceiptDate, 1) AS "& _ 
                "DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@DateFrom AS DATETIME), 1) AS "& _ 
                "Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Dateti"& _ 
                "me)) AND (IsPaid <> @IsPaid1) ORDER BY ReceiptID DESC"
            Me._commandCollection(14).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPaid1", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "IsPaid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillGetDataByPaid(ByVal dataTable As DSOpticalShop.VMainReceiptDetailDataTable, ByVal IsPaid As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IsPaid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IsPaid.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataByPaid(ByVal IsPaid As Global.System.Nullable(Of Decimal)) As DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IsPaid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IsPaid.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSOpticalShop.VMainReceiptDetailDataTable = New DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOpticalShop.VMainReceiptDetailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetData() As DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As DSOpticalShop.VMainReceiptDetailDataTable = New DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSOpticalShop.VMainReceiptDetailDataTable, ByVal IsPaid As Global.System.Nullable(Of Decimal), ByVal DateFrom As Date, ByVal DateTO As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (IsPaid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IsPaid.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTO,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDonatorSupportInfo(ByVal IsPaid As Global.System.Nullable(Of Decimal), ByVal DateFrom As Date, ByVal DateTO As Date) As DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (IsPaid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IsPaid.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTO,Date)
            Dim dataTable As DSOpticalShop.VMainReceiptDetailDataTable = New DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSOpticalShop.VMainReceiptDetailDataTable, ByVal IsPaid As Global.System.Nullable(Of Decimal), ByVal DateFrom As Date, ByVal DateTO As Date, ByVal DonationID As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (IsPaid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IsPaid.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTO,Date)
            If (DonationID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(DonationID.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDonationSupportInfoByDonateID(ByVal IsPaid As Global.System.Nullable(Of Decimal), ByVal DateFrom As Date, ByVal DateTO As Date, ByVal DonationID As Global.System.Nullable(Of Decimal)) As DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (IsPaid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IsPaid.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTO,Date)
            If (DonationID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(DonationID.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSOpticalShop.VMainReceiptDetailDataTable = New DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy2(ByVal dataTable As DSOpticalShop.VMainReceiptDetailDataTable, ByVal ReceiptID As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ReceiptID,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByReceiptID(ByVal ReceiptID As Decimal) As DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ReceiptID,Decimal)
            Dim dataTable As DSOpticalShop.VMainReceiptDetailDataTable = New DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy3(ByVal dataTable As DSOpticalShop.VMainReceiptDetailDataTable, ByVal ReceiptNo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (ReceiptNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ReceiptNo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByReceiptNo(ByVal ReceiptNo As String) As DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (ReceiptNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ReceiptNo,String)
            End If
            Dim dataTable As DSOpticalShop.VMainReceiptDetailDataTable = New DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy4(ByVal dataTable As DSOpticalShop.VMainReceiptDetailDataTable, ByVal IsPaid As Global.System.Nullable(Of Decimal), ByVal PaymentType As Global.System.Nullable(Of Integer), ByVal DateFrom As Date, ByVal DateTO As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (IsPaid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IsPaid.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PaymentType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PaymentType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(DateTO,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPayTypeAndIsPaid(ByVal IsPaid As Global.System.Nullable(Of Decimal), ByVal PaymentType As Global.System.Nullable(Of Integer), ByVal DateFrom As Date, ByVal DateTO As Date) As DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (IsPaid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IsPaid.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PaymentType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PaymentType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(DateTO,Date)
            Dim dataTable As DSOpticalShop.VMainReceiptDetailDataTable = New DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy5(ByVal dataTable As DSOpticalShop.VMainReceiptDetailDataTable, ByVal IsPaid As Global.System.Nullable(Of Decimal), ByVal DateFrom As Date, ByVal DateTO As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (IsPaid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IsPaid.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTO,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPaidAndDate(ByVal IsPaid As Global.System.Nullable(Of Decimal), ByVal DateFrom As Date, ByVal DateTO As Date) As DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (IsPaid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IsPaid.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTO,Date)
            Dim dataTable As DSOpticalShop.VMainReceiptDetailDataTable = New DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy6(ByVal dataTable As DSOpticalShop.VMainReceiptDetailDataTable, ByVal PaymentType As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (PaymentType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PaymentType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataReceiptNil(ByVal PaymentType As Global.System.Nullable(Of Integer)) As DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (PaymentType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PaymentType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSOpticalShop.VMainReceiptDetailDataTable = New DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy7(ByVal dataTable As DSOpticalShop.VMainReceiptDetailDataTable, ByVal PaymentType As Global.System.Nullable(Of Integer), ByVal DateFrom As Date, ByVal DateTO As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            If (PaymentType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PaymentType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTO,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataReceiptNilByDate(ByVal PaymentType As Global.System.Nullable(Of Integer), ByVal DateFrom As Date, ByVal DateTO As Date) As DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            If (PaymentType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PaymentType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTO,Date)
            Dim dataTable As DSOpticalShop.VMainReceiptDetailDataTable = New DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy8(ByVal dataTable As DSOpticalShop.VMainReceiptDetailDataTable, ByVal DateFrom As Date, ByVal DateTO As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(10)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataRecieptNilByDate(ByVal DateFrom As Date, ByVal DateTO As Date) As DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(10)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            Dim dataTable As DSOpticalShop.VMainReceiptDetailDataTable = New DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy9(ByVal dataTable As DSOpticalShop.VMainReceiptDetailDataTable, ByVal DateFrom As Date, ByVal DateTO As Date, ByVal IsPaid1 As Global.System.Nullable(Of Decimal), ByVal PaymentType As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(11)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (IsPaid1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IsPaid1.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PaymentType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(PaymentType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPatientPaySocial(ByVal DateFrom As Date, ByVal DateTO As Date, ByVal IsPaid1 As Global.System.Nullable(Of Decimal), ByVal PaymentType As Global.System.Nullable(Of Integer)) As DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(11)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (IsPaid1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IsPaid1.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PaymentType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(PaymentType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSOpticalShop.VMainReceiptDetailDataTable = New DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByDateToFrom(ByVal dataTable As DSOpticalShop.VMainReceiptDetailDataTable, ByVal DateFrom As Date, ByVal DateTO As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(12)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDateToFrom(ByVal DateFrom As Date, ByVal DateTO As Date) As DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(12)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            Dim dataTable As DSOpticalShop.VMainReceiptDetailDataTable = New DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByDateWithCancelPaid(ByVal dataTable As DSOpticalShop.VMainReceiptDetailDataTable, ByVal DateFrom As Date, ByVal DateTO As Date, ByVal IsPaid As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(13)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (IsPaid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IsPaid.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDateWithPaid(ByVal DateFrom As Date, ByVal DateTO As Date, ByVal IsPaid As Global.System.Nullable(Of Decimal)) As DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(13)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (IsPaid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IsPaid.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSOpticalShop.VMainReceiptDetailDataTable = New DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByDateWithWaitingPay(ByVal dataTable As DSOpticalShop.VMainReceiptDetailDataTable, ByVal DateFrom As Date, ByVal DateTO As Date, ByVal IsPaid1 As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(14)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (IsPaid1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IsPaid1.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDateWithWaitingPay(ByVal DateFrom As Date, ByVal DateTO As Date, ByVal IsPaid1 As Global.System.Nullable(Of Decimal)) As DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(14)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (IsPaid1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IsPaid1.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSOpticalShop.VMainReceiptDetailDataTable = New DSOpticalShop.VMainReceiptDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class V_OpticalShopCusStatisticTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "V_OpticalShopCusStatistic"
            tableMapping.ColumnMappings.Add("ReceiptType", "ReceiptType")
            tableMapping.ColumnMappings.Add("F", "F")
            tableMapping.ColumnMappings.Add("M", "M")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid")
            tableMapping.ColumnMappings.Add("agerange", "agerange")
            tableMapping.ColumnMappings.Add("ReceiptDate", "ReceiptDate")
            tableMapping.ColumnMappings.Add("SubReceiptType", "SubReceiptType")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        t1.ReceiptType, COUNT(t2.Female) AS F, COUNT(t2.Male) AS M, t2.Age,"& _ 
                " t2.Sex, t1.IsPaid, '0-4' AS agerange, t1.ReceiptDate,t1.SubReceiptType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         RECEIPT AS t1 INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         RECEIPT_CUSTOMER AS "& _ 
                "t2 ON t1.CustID = t2.CustID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (t1.IsPaid <> 2) AND (t2.Age BETWEEN 0"& _ 
                " AND 4)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY t1.ReceiptType, t2.Age, t2.Sex, t1.IsPaid, t1.ReceiptDate,t1.S"& _ 
                "ubReceiptType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        t1.ReceiptType, COUNT(t2.Female) AS F, COUNT"& _ 
                "(t2.Male) AS M, t2.Age, t2.Sex, t1.IsPaid, '5-14' AS agerange, t1.ReceiptDate,t1"& _ 
                ".SubReceiptType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            RECEIPT AS t1 INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    RECEIPT_CUSTOMER AS t2 ON t1.CustID = t2.CustID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (t1.IsPaid  <>"& _ 
                " 2) AND (t2.Age BETWEEN 5 AND 14)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY t1.ReceiptType, t2.Age, t2.Sex, t1.I"& _ 
                "sPaid, t1.ReceiptDate,t1.SubReceiptType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        t1.ReceiptType, CO"& _ 
                "UNT(t2.Female) AS F, COUNT(t2.Male) AS M, t2.Age, t2.Sex, t1.IsPaid, '15-49' AS "& _ 
                "agerange, t1.ReceiptDate,t1.SubReceiptType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            RECEIPT AS t1 INNER "& _ 
                "JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         RECEIPT_CUSTOMER AS t2 ON t1.CustID = t2.CustID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "WHERE        (t1.IsPaid <> 1) AND (t2.Age BETWEEN 15 AND 49)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY t1.Receip"& _ 
                "tType, t2.Age, t2.Sex, t1.IsPaid, t1.ReceiptDate,t1.SubReceiptType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELEC"& _ 
                "T        t1.ReceiptType, COUNT(t2.Female) AS F, COUNT(t2.Male) AS M, t2.Age, t2."& _ 
                "Sex, t1.IsPaid, '>=50' AS agerange, t1.ReceiptDate,t1.SubReceiptType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM      "& _ 
                "      RECEIPT AS t1 INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         RECEIPT_CUSTOMER AS t2 "& _ 
                "ON t1.CustID = t2.CustID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (t1.IsPaid <> 2) AND (t2.Age >= 50)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROU"& _ 
                "P BY t1.ReceiptType, t2.Age, t2.Sex, t1.IsPaid, t1.ReceiptDate,t1.SubReceiptType"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        t1.ReceiptType, COUNT(t2.Female) AS F, COUNT(t2.Male) AS M, t2.Age,"& _ 
                " t2.Sex, t1.IsPaid, '0-4' AS agerange, t1.ReceiptDate,t1.SubReceiptType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         RECEIPT AS t1 INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         RECEIPT_CUSTOMER AS "& _ 
                "t2 ON t1.CustID = t2.CustID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (t1.IsPaid <> 2) AND (t2.Age BETWEEN 0"& _ 
                " AND 4) AND (CAST(CONVERT(VARCHAR(10), t1.ReceiptDate, 1) AS DateTime) BETWEEN C"& _ 
                "AST(CONVERT(VARCHAR(10), "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CAST(@DateFrom AS DATETIME),"& _ 
                " 1) AS Datetime) AND CAST(CONVERT(VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS "& _ 
                "Datetime))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY t1.ReceiptType, t2.Age, t2.Sex, t1.IsPaid, t1.ReceiptDate,t"& _ 
                "1.SubReceiptType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        t1.ReceiptType, COUNT(t2.Female) AS F, CO"& _ 
                "UNT(t2.Male) AS M, t2.Age, t2.Sex, t1.IsPaid, '5-14' AS agerange, t1.ReceiptDate"& _ 
                ",t1.SubReceiptType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            RECEIPT AS t1 INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "       RECEIPT_CUSTOMER AS t2 ON t1.CustID = t2.CustID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (t1.IsPaid "& _ 
                "<> 2) AND (t2.Age BETWEEN 5 AND 14) AND (CAST(CONVERT(VARCHAR(10), t1.ReceiptDat"& _ 
                "e, 1) AS DateTime) BETWEEN CAST(CONVERT(VARCHAR(10), "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVERT(VARCHAR(10), CAST("& _ 
                "@DateTO AS DATETIME), 1) AS Datetime))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY t1.ReceiptType, t2.Age, t2.Sex,"& _ 
                " t1.IsPaid, t1.ReceiptDate,t1.SubReceiptType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        t1.ReceiptTyp"& _ 
                "e, COUNT(t2.Female) AS F, COUNT(t2.Male) AS M, t2.Age, t2.Sex, t1.IsPaid, '15-49"& _ 
                "' AS agerange, t1.ReceiptDate,t1.SubReceiptType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            RECEIPT AS t1 I"& _ 
                "NNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         RECEIPT_CUSTOMER AS t2 ON t1.CustID = t2.Cus"& _ 
                "tID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (t1.IsPaid <> 2) AND (t2.Age BETWEEN 15 AND 49) AND (CAST(CONV"& _ 
                "ERT(VARCHAR(10), t1.ReceiptDate, 1) AS DateTime) BETWEEN CAST(CONVERT(VARCHAR(10"& _ 
                "), "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND C"& _ 
                "AST(CONVERT(VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datetime))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY t"& _ 
                "1.ReceiptType, t2.Age, t2.Sex, t1.IsPaid, t1.ReceiptDate,t1.SubReceiptType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNIO"& _ 
                "N"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        t1.ReceiptType, COUNT(t2.Female) AS F, COUNT(t2.Male) AS M, t2."& _ 
                "Age, t2.Sex, t1.IsPaid, '>=50' AS agerange, t1.ReceiptDate,t1.SubReceiptType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FR"& _ 
                "OM            RECEIPT AS t1 INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         RECEIPT_CUSTOME"& _ 
                "R AS t2 ON t1.CustID = t2.CustID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (t1.IsPaid <> 2) AND (t2.Age >= 5"& _ 
                "0) AND (CAST(CONVERT(VARCHAR(10), t1.ReceiptDate, 1) AS DateTime) BETWEEN CAST(C"& _ 
                "ONVERT(VARCHAR(10), "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CAST(@DateFrom AS DATETIME), 1) A"& _ 
                "S Datetime) AND CAST(CONVERT(VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datet"& _ 
                "ime))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY t1.ReceiptType, t2.Age, t2.Sex, t1.IsPaid, t1.ReceiptDate,t1.Sub"& _ 
                "ReceiptType"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOpticalShop.V_OpticalShopCusStatisticDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOpticalShop.V_OpticalShopCusStatisticDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOpticalShop.V_OpticalShopCusStatisticDataTable = New DSOpticalShop.V_OpticalShopCusStatisticDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSOpticalShop.V_OpticalShopCusStatisticDataTable, ByVal DateFrom As Date, ByVal DateTO As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataFDateTDate(ByVal DateFrom As Date, ByVal DateTO As Date) As DSOpticalShop.V_OpticalShopCusStatisticDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            Dim dataTable As DSOpticalShop.V_OpticalShopCusStatisticDataTable = New DSOpticalShop.V_OpticalShopCusStatisticDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class V_OpticalShopItemSaleOffTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "V_OpticalShopItemSaleOff"
            tableMapping.ColumnMappings.Add("ReceiptDate", "ReceiptDate")
            tableMapping.ColumnMappings.Add("ReceiptNo", "ReceiptNo")
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid")
            tableMapping.ColumnMappings.Add("ItemName", "ItemName")
            tableMapping.ColumnMappings.Add("ItemQTY", "ItemQTY")
            tableMapping.ColumnMappings.Add("SubTotalReal", "SubTotalReal")
            tableMapping.ColumnMappings.Add("SubTotalDolar", "SubTotalDolar")
            tableMapping.ColumnMappings.Add("CateName", "CateName")
            tableMapping.ColumnMappings.Add("ItemPrice", "ItemPrice1")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ReceiptDate, ReceiptNo, IsPaid, ItemName, ItemPrice, ItemQTY, SubTo"& _ 
                "talReal, SubTotalDolar, CateName"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            V_OpticalShopItemSaleOff"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CateName, IsPaid, ItemName, ItemPrice, ItemQTY, ReceiptDate, ReceiptNo, Su"& _ 
                "bTotalDolar, SubTotalReal FROM V_OpticalShopItemSaleOff WHERE (IsPaid = 1) AND ("& _ 
                "CAST(CONVERT (VARCHAR(10), ReceiptDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VA"& _ 
                "RCHAR(10), CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHA"& _ 
                "R(10), CAST(@DateTO AS DATETIME), 1) AS Datetime))"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOpticalShop.V_OpticalShopItemSaleOffDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOpticalShop.V_OpticalShopItemSaleOffDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOpticalShop.V_OpticalShopItemSaleOffDataTable = New DSOpticalShop.V_OpticalShopItemSaleOffDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSOpticalShop.V_OpticalShopItemSaleOffDataTable, ByVal DateFrom As Date, ByVal DateTO As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataOPItemSaleOff(ByVal DateFrom As Date, ByVal DateTO As Date) As DSOpticalShop.V_OpticalShopItemSaleOffDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            Dim dataTable As DSOpticalShop.V_OpticalShopItemSaleOffDataTable = New DSOpticalShop.V_OpticalShopItemSaleOffDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RECEIPT_CUSTOMERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RECEIPT_CUSTOMER"
            tableMapping.ColumnMappings.Add("CustID", "CustID")
            tableMapping.ColumnMappings.Add("CustomerNo", "CustomerNo")
            tableMapping.ColumnMappings.Add("CusName", "CusName")
            tableMapping.ColumnMappings.Add("Female", "Female")
            tableMapping.ColumnMappings.Add("Male", "Male")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Occupation", "Occupation")
            tableMapping.ColumnMappings.Add("OccNo", "OccNo")
            tableMapping.ColumnMappings.Add("Province", "Province")
            tableMapping.ColumnMappings.Add("District", "District")
            tableMapping.ColumnMappings.Add("Commune", "Commune")
            tableMapping.ColumnMappings.Add("Village", "Village")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("IsPatient", "IsPatient")
            tableMapping.ColumnMappings.Add("CusNameEng", "CusNameEng")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[RECEIPT_CUSTOMER] WHERE (([CustID] = @Original_CustID) AND ((@"& _ 
                "IsNull_CustomerNo = 1 AND [CustomerNo] IS NULL) OR ([CustomerNo] = @Original_Cus"& _ 
                "tomerNo)) AND ((@IsNull_CusName = 1 AND [CusName] IS NULL) OR ([CusName] = @Orig"& _ 
                "inal_CusName)) AND ((@IsNull_Female = 1 AND [Female] IS NULL) OR ([Female] = @Or"& _ 
                "iginal_Female)) AND ((@IsNull_Male = 1 AND [Male] IS NULL) OR ([Male] = @Origina"& _ 
                "l_Male)) AND ((@IsNull_Sex = 1 AND [Sex] IS NULL) OR ([Sex] = @Original_Sex)) AN"& _ 
                "D ((@IsNull_Age = 1 AND [Age] IS NULL) OR ([Age] = @Original_Age)) AND ((@IsNull"& _ 
                "_Occupation = 1 AND [Occupation] IS NULL) OR ([Occupation] = @Original_Occupatio"& _ 
                "n)) AND ((@IsNull_OccNo = 1 AND [OccNo] IS NULL) OR ([OccNo] = @Original_OccNo))"& _ 
                " AND ((@IsNull_Province = 1 AND [Province] IS NULL) OR ([Province] = @Original_P"& _ 
                "rovince)) AND ((@IsNull_District = 1 AND [District] IS NULL) OR ([District] = @O"& _ 
                "riginal_District)) AND ((@IsNull_Commune = 1 AND [Commune] IS NULL) OR ([Commune"& _ 
                "] = @Original_Commune)) AND ((@IsNull_Village = 1 AND [Village] IS NULL) OR ([Vi"& _ 
                "llage] = @Original_Village)) AND ((@IsNull_Address = 1 AND [Address] IS NULL) OR"& _ 
                " ([Address] = @Original_Address)) AND ((@IsNull_IsPatient = 1 AND [IsPatient] IS"& _ 
                " NULL) OR ([IsPatient] = @Original_IsPatient)) AND ((@IsNull_CusNameEng = 1 AND "& _ 
                "[CusNameEng] IS NULL) OR ([CusNameEng] = @Original_CusNameEng)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CustID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomerNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomerNo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CustomerNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CusName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CusName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CusName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CusName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Female", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Female", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Female", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Female", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Male", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Male", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Male", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Male", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Sex", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sex", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Sex", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sex", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Age", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Age", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Age", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Age", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Occupation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Occupation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Occupation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Occupation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OccNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OccNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OccNo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "OccNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Province", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Province", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Province", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Province", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_District", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "District", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_District", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "District", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Commune", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Commune", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Commune", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Commune", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Village", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Village", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Village", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Village", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Address", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsPatient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPatient", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsPatient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPatient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CusNameEng", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CusNameEng", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CusNameEng", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CusNameEng", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[RECEIPT_CUSTOMER] ([CustomerNo], [CusName], [Female], [Male], "& _ 
                "[Sex], [Age], [Occupation], [OccNo], [Province], [District], [Commune], [Village"& _ 
                "], [Address], [IsPatient], [CusNameEng]) VALUES (@CustomerNo, @CusName, @Female,"& _ 
                " @Male, @Sex, @Age, @Occupation, @OccNo, @Province, @District, @Commune, @Villag"& _ 
                "e, @Address, @IsPatient, @CusNameEng);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CustID, CustomerNo, CusName, Fema"& _ 
                "le, Male, Sex, Age, Occupation, OccNo, Province, District, Commune, Village, Add"& _ 
                "ress, IsPatient, CusNameEng FROM RECEIPT_CUSTOMER WHERE (CustID = SCOPE_IDENTITY"& _ 
                "())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerNo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CustomerNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CusName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CusName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Female", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Female", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Male", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Male", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sex", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sex", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Age", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Age", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Occupation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Occupation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OccNo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "OccNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Province", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Province", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@District", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "District", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Commune", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Commune", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Village", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Village", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPatient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPatient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CusNameEng", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CusNameEng", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[RECEIPT_CUSTOMER] SET [CustomerNo] = @CustomerNo, [CusName] = @CusN"& _ 
                "ame, [Female] = @Female, [Male] = @Male, [Sex] = @Sex, [Age] = @Age, [Occupation"& _ 
                "] = @Occupation, [OccNo] = @OccNo, [Province] = @Province, [District] = @Distric"& _ 
                "t, [Commune] = @Commune, [Village] = @Village, [Address] = @Address, [IsPatient]"& _ 
                " = @IsPatient, [CusNameEng] = @CusNameEng WHERE (([CustID] = @Original_CustID) A"& _ 
                "ND ((@IsNull_CustomerNo = 1 AND [CustomerNo] IS NULL) OR ([CustomerNo] = @Origin"& _ 
                "al_CustomerNo)) AND ((@IsNull_CusName = 1 AND [CusName] IS NULL) OR ([CusName] ="& _ 
                " @Original_CusName)) AND ((@IsNull_Female = 1 AND [Female] IS NULL) OR ([Female]"& _ 
                " = @Original_Female)) AND ((@IsNull_Male = 1 AND [Male] IS NULL) OR ([Male] = @O"& _ 
                "riginal_Male)) AND ((@IsNull_Sex = 1 AND [Sex] IS NULL) OR ([Sex] = @Original_Se"& _ 
                "x)) AND ((@IsNull_Age = 1 AND [Age] IS NULL) OR ([Age] = @Original_Age)) AND ((@"& _ 
                "IsNull_Occupation = 1 AND [Occupation] IS NULL) OR ([Occupation] = @Original_Occ"& _ 
                "upation)) AND ((@IsNull_OccNo = 1 AND [OccNo] IS NULL) OR ([OccNo] = @Original_O"& _ 
                "ccNo)) AND ((@IsNull_Province = 1 AND [Province] IS NULL) OR ([Province] = @Orig"& _ 
                "inal_Province)) AND ((@IsNull_District = 1 AND [District] IS NULL) OR ([District"& _ 
                "] = @Original_District)) AND ((@IsNull_Commune = 1 AND [Commune] IS NULL) OR ([C"& _ 
                "ommune] = @Original_Commune)) AND ((@IsNull_Village = 1 AND [Village] IS NULL) O"& _ 
                "R ([Village] = @Original_Village)) AND ((@IsNull_Address = 1 AND [Address] IS NU"& _ 
                "LL) OR ([Address] = @Original_Address)) AND ((@IsNull_IsPatient = 1 AND [IsPatie"& _ 
                "nt] IS NULL) OR ([IsPatient] = @Original_IsPatient)) AND ((@IsNull_CusNameEng = "& _ 
                "1 AND [CusNameEng] IS NULL) OR ([CusNameEng] = @Original_CusNameEng)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "CustID, CustomerNo, CusName, Female, Male, Sex, Age, Occupation, OccNo, Province"& _ 
                ", District, Commune, Village, Address, IsPatient, CusNameEng FROM RECEIPT_CUSTOM"& _ 
                "ER WHERE (CustID = @CustID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerNo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CustomerNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CusName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CusName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Female", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Female", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Male", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Male", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sex", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sex", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Age", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Age", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Occupation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Occupation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OccNo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "OccNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Province", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Province", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@District", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "District", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Commune", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Commune", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Village", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Village", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsPatient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPatient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CusNameEng", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CusNameEng", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CustID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomerNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomerNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomerNo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CustomerNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CusName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CusName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CusName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CusName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Female", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Female", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Female", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Female", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Male", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Male", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Male", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Male", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Sex", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sex", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Sex", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sex", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Age", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Age", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Age", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Age", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Occupation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Occupation", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Occupation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Occupation", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OccNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OccNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OccNo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "OccNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Province", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Province", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Province", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Province", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_District", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "District", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_District", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "District", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Commune", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Commune", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Commune", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Commune", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Village", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Village", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Village", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Village", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Address", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsPatient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPatient", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsPatient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsPatient", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CusNameEng", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CusNameEng", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CusNameEng", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CusNameEng", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "CustID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CustID, CustomerNo, CusName, Female, Male, Sex, Age, Occupation, OccNo, Pr"& _ 
                "ovince, District, Commune, Village, Address, IsPatient, CusNameEng FROM dbo.RECE"& _ 
                "IPT_CUSTOMER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CustID, CustomerNo, CusName, Female, Male, Sex, Age, Occupation, OccNo, Pr"& _ 
                "ovince, District, Commune, Village, Address, IsPatient, CusNameEng FROM dbo.RECE"& _ 
                "IPT_CUSTOMER WHERE CustID=@CustomerID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "CustID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CustID, CustomerNo, CusName, Female, Male, Sex, Age, Occupation, OccNo, Pr"& _ 
                "ovince, District, Commune, Village, Address, IsPatient, CusNameEng FROM dbo.RECE"& _ 
                "IPT_CUSTOMER"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"CustID=@CustID"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "CustID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOpticalShop.RECEIPT_CUSTOMERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOpticalShop.RECEIPT_CUSTOMERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOpticalShop.RECEIPT_CUSTOMERDataTable = New DSOpticalShop.RECEIPT_CUSTOMERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSOpticalShop.RECEIPT_CUSTOMERDataTable, ByVal CustomerID As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CustomerID,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCustomerNo(ByVal CustomerID As Decimal) As DSOpticalShop.RECEIPT_CUSTOMERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CustomerID,Decimal)
            Dim dataTable As DSOpticalShop.RECEIPT_CUSTOMERDataTable = New DSOpticalShop.RECEIPT_CUSTOMERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCustomerID(ByVal dataTable As DSOpticalShop.RECEIPT_CUSTOMERDataTable, ByVal CustID As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CustID,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCustomerID(ByVal CustID As Decimal) As DSOpticalShop.RECEIPT_CUSTOMERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CustID,Decimal)
            Dim dataTable As DSOpticalShop.RECEIPT_CUSTOMERDataTable = New DSOpticalShop.RECEIPT_CUSTOMERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSOpticalShop.RECEIPT_CUSTOMERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSOpticalShop) As Integer
            Return Me.Adapter.Update(dataSet, "RECEIPT_CUSTOMER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_CustID As Decimal,  _
                    ByVal Original_CustomerNo As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CusName As String,  _
                    ByVal Original_Female As String,  _
                    ByVal Original_Male As String,  _
                    ByVal Original_Sex As String,  _
                    ByVal Original_Age As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Occupation As String,  _
                    ByVal Original_OccNo As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Province As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_District As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Commune As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Village As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Address As String,  _
                    ByVal Original_IsPatient As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CusNameEng As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CustID,Decimal)
            If (Original_CustomerNo.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CustomerNo.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_CusName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CusName,String)
            End If
            If (Original_Female Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Female,String)
            End If
            If (Original_Male Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Male,String)
            End If
            If (Original_Sex Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Sex,String)
            End If
            If (Original_Age.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Age.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Occupation Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Occupation,String)
            End If
            If (Original_OccNo.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_OccNo.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_Province.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Province.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_District.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_District.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_Commune.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Commune.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_Village.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_Village.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_Address Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_Address,String)
            End If
            If (Original_IsPatient.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_IsPatient.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_CusNameEng Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_CusNameEng,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CustomerNo As Global.System.Nullable(Of Decimal), ByVal CusName As String, ByVal Female As String, ByVal Male As String, ByVal Sex As String, ByVal Age As Global.System.Nullable(Of Decimal), ByVal Occupation As String, ByVal OccNo As Global.System.Nullable(Of Decimal), ByVal Province As Global.System.Nullable(Of Decimal), ByVal District As Global.System.Nullable(Of Decimal), ByVal Commune As Global.System.Nullable(Of Decimal), ByVal Village As Global.System.Nullable(Of Decimal), ByVal Address As String, ByVal IsPatient As Global.System.Nullable(Of Boolean), ByVal CusNameEng As String) As Integer
            If (CustomerNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CustomerNo.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CusName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CusName,String)
            End If
            If (Female Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Female,String)
            End If
            If (Male Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Male,String)
            End If
            If (Sex Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Sex,String)
            End If
            If (Age.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Age.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Occupation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Occupation,String)
            End If
            If (OccNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(OccNo.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Province.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Province.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (District.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(District.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Commune.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Commune.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Village.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Village.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Address Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Address,String)
            End If
            If (IsPatient.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(IsPatient.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (CusNameEng Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(CusNameEng,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CustomerNo As Global.System.Nullable(Of Decimal),  _
                    ByVal CusName As String,  _
                    ByVal Female As String,  _
                    ByVal Male As String,  _
                    ByVal Sex As String,  _
                    ByVal Age As Global.System.Nullable(Of Decimal),  _
                    ByVal Occupation As String,  _
                    ByVal OccNo As Global.System.Nullable(Of Decimal),  _
                    ByVal Province As Global.System.Nullable(Of Decimal),  _
                    ByVal District As Global.System.Nullable(Of Decimal),  _
                    ByVal Commune As Global.System.Nullable(Of Decimal),  _
                    ByVal Village As Global.System.Nullable(Of Decimal),  _
                    ByVal Address As String,  _
                    ByVal IsPatient As Global.System.Nullable(Of Boolean),  _
                    ByVal CusNameEng As String,  _
                    ByVal Original_CustID As Decimal,  _
                    ByVal Original_CustomerNo As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CusName As String,  _
                    ByVal Original_Female As String,  _
                    ByVal Original_Male As String,  _
                    ByVal Original_Sex As String,  _
                    ByVal Original_Age As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Occupation As String,  _
                    ByVal Original_OccNo As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Province As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_District As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Commune As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Village As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Address As String,  _
                    ByVal Original_IsPatient As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CusNameEng As String,  _
                    ByVal CustID As Decimal) As Integer
            If (CustomerNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CustomerNo.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CusName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CusName,String)
            End If
            If (Female Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Female,String)
            End If
            If (Male Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Male,String)
            End If
            If (Sex Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Sex,String)
            End If
            If (Age.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Age.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Occupation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Occupation,String)
            End If
            If (OccNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(OccNo.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Province.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Province.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (District.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(District.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Commune.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Commune.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Village.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Village.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Address Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Address,String)
            End If
            If (IsPatient.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(IsPatient.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (CusNameEng Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CusNameEng,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_CustID,Decimal)
            If (Original_CustomerNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_CustomerNo.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_CusName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_CusName,String)
            End If
            If (Original_Female Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Female,String)
            End If
            If (Original_Male Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Male,String)
            End If
            If (Original_Sex Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Sex,String)
            End If
            If (Original_Age.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_Age.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_Occupation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_Occupation,String)
            End If
            If (Original_OccNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_OccNo.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_Province.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_Province.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_District.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_District.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_Commune.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_Commune.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_Village.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_Village.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_Address Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_Address,String)
            End If
            If (Original_IsPatient.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_IsPatient.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_CusNameEng Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_CusNameEng,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(CustID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class V_Receipt_InvoiceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "V_Receipt_Invoice"
            tableMapping.ColumnMappings.Add("ReceiptID", "ReceiptID")
            tableMapping.ColumnMappings.Add("ReceiptDate", "ReceiptDate")
            tableMapping.ColumnMappings.Add("CustomerNo", "CustomerNo")
            tableMapping.ColumnMappings.Add("MedicReal", "MedicReal")
            tableMapping.ColumnMappings.Add("MedicDolar", "MedicDolar")
            tableMapping.ColumnMappings.Add("EyeGlassesReal", "EyeGlassesReal")
            tableMapping.ColumnMappings.Add("EyeGlassesDolar", "EyeGlassesDolar")
            tableMapping.ColumnMappings.Add("ReadyModDolar", "ReadyModDolar")
            tableMapping.ColumnMappings.Add("ReadyModR", "ReadyModR")
            tableMapping.ColumnMappings.Add("SpectacleDolar", "SpectacleDolar")
            tableMapping.ColumnMappings.Add("SpectacleR", "SpectacleR")
            tableMapping.ColumnMappings.Add("FundRaisingDolar", "FundRaisingDolar")
            tableMapping.ColumnMappings.Add("FundRaisingR", "FundRaisingR")
            tableMapping.ColumnMappings.Add("OtherDolar", "OtherDolar")
            tableMapping.ColumnMappings.Add("OtherR", "OtherR")
            tableMapping.ColumnMappings.Add("TotalReal", "TotalReal")
            tableMapping.ColumnMappings.Add("TotalDolar", "TotalDolar")
            tableMapping.ColumnMappings.Add("AmountInWords", "AmountInWords")
            tableMapping.ColumnMappings.Add("AmountFigureReal", "AmountFigureReal")
            tableMapping.ColumnMappings.Add("AmountFigureDolar", "AmountFigureDolar")
            tableMapping.ColumnMappings.Add("ReturnReal", "ReturnReal")
            tableMapping.ColumnMappings.Add("ReturnDolar", "ReturnDolar")
            tableMapping.ColumnMappings.Add("IsCurrency", "IsCurrency")
            tableMapping.ColumnMappings.Add("IsDonation", "IsDonation")
            tableMapping.ColumnMappings.Add("DonationID", "DonationID")
            tableMapping.ColumnMappings.Add("PayBySelf", "PayBySelf")
            tableMapping.ColumnMappings.Add("PayByDonation", "PayByDonation")
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid")
            tableMapping.ColumnMappings.Add("ReceiptNote", "ReceiptNote")
            tableMapping.ColumnMappings.Add("UserID", "UserID")
            tableMapping.ColumnMappings.Add("UserName", "UserName")
            tableMapping.ColumnMappings.Add("IncomType", "IncomType")
            tableMapping.ColumnMappings.Add("Glasses", "Glasses")
            tableMapping.ColumnMappings.Add("DonateAmount", "DonateAmount")
            tableMapping.ColumnMappings.Add("SupportedAmtDolar", "SupportedAmtDolar")
            tableMapping.ColumnMappings.Add("SupportedAmtR", "SupportedAmtR")
            tableMapping.ColumnMappings.Add("ReceiptType", "ReceiptType")
            tableMapping.ColumnMappings.Add("PaidR", "PaidR")
            tableMapping.ColumnMappings.Add("PaidDollar", "PaidDollar")
            tableMapping.ColumnMappings.Add("IsOldPatient", "IsOldPatient")
            tableMapping.ColumnMappings.Add("PaymentType", "PaymentType")
            tableMapping.ColumnMappings.Add("FullAmount", "FullAmount")
            tableMapping.ColumnMappings.Add("NilAmount", "NilAmount")
            tableMapping.ColumnMappings.Add("SocialAmount", "SocialAmount")
            tableMapping.ColumnMappings.Add("PaymentCur", "PaymentCur")
            tableMapping.ColumnMappings.Add("Comment", "Comment")
            tableMapping.ColumnMappings.Add("ItemID", "ItemID")
            tableMapping.ColumnMappings.Add("ItemPrice", "ItemPrice")
            tableMapping.ColumnMappings.Add("ItemQTY", "ItemQTY")
            tableMapping.ColumnMappings.Add("SubTotalReal", "SubTotalReal")
            tableMapping.ColumnMappings.Add("SubTotalDolar", "SubTotalDolar")
            tableMapping.ColumnMappings.Add("IncomeID", "IncomeID")
            tableMapping.ColumnMappings.Add("ItemName", "ItemName")
            tableMapping.ColumnMappings.Add("Barcode", "Barcode")
            tableMapping.ColumnMappings.Add("CusName", "CusName")
            tableMapping.ColumnMappings.Add("Female", "Female")
            tableMapping.ColumnMappings.Add("Male", "Male")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Occupation", "Occupation")
            tableMapping.ColumnMappings.Add("OccNo", "OccNo")
            tableMapping.ColumnMappings.Add("Province", "Province")
            tableMapping.ColumnMappings.Add("District", "District")
            tableMapping.ColumnMappings.Add("Commune", "Commune")
            tableMapping.ColumnMappings.Add("Village", "Village")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("IsPatient", "IsPatient")
            tableMapping.ColumnMappings.Add("CusNameEng", "CusNameEng")
            tableMapping.ColumnMappings.Add("DonationName", "DonationName")
            tableMapping.ColumnMappings.Add("Expr1", "Expr1")
            tableMapping.ColumnMappings.Add("ReceiptNo", "ReceiptNo")
            tableMapping.ColumnMappings.Add("TIME_CREATE", "TIME_CREATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ReceiptID, ReceiptDate, CustomerNo, MedicReal, MedicDolar, EyeGlassesReal,"& _ 
                " EyeGlassesDolar, ReadyModDolar, ReadyModR, SpectacleDolar, SpectacleR, FundRais"& _ 
                "ingDolar, FundRaisingR, OtherDolar, OtherR, TotalReal, TotalDolar, AmountInWords"& _ 
                ", AmountFigureReal, AmountFigureDolar, ReturnReal, ReturnDolar, IsCurrency, IsDo"& _ 
                "nation, DonationID, PayBySelf, PayByDonation, IsPaid, ReceiptNote, UserID, UserN"& _ 
                "ame, IncomType, Glasses, DonateAmount, SupportedAmtDolar, SupportedAmtR, Receipt"& _ 
                "Type, PaidR, PaidDollar, IsOldPatient, PaymentType, FullAmount, NilAmount, Socia"& _ 
                "lAmount, PaymentCur, Comment, ItemID, ItemPrice, ItemQTY, SubTotalReal, SubTotal"& _ 
                "Dolar, IncomeID, ItemName, Barcode, CusName, Female, Male, Sex, Age, Occupation,"& _ 
                " OccNo, Province, District, Commune, Village, Address, IsPatient, CusNameEng, Do"& _ 
                "nationName, Expr1, ReceiptNo, TIME_CREATE FROM V_Receipt_Invoice"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        Address, Age, AmountFigureDolar, AmountFigureReal, AmountInWords, B"& _ 
                "arcode, Comment, Commune, CusName, CusNameEng, CustomerNo, District, DonateAmoun"& _ 
                "t, DonationID, DonationName, Expr1, EyeGlassesDolar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "EyeGlassesReal, Female, FullAmount, FundRaisingDolar, FundRaisingR, Glasses, Inc"& _ 
                "omType, IncomeID, IsCurrency, IsDonation, IsOldPatient, IsPaid, IsPatient, ItemI"& _ 
                "D, ItemName, ItemPrice, ItemQTY, Male, MedicDolar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Me"& _ 
                "dicReal, NilAmount, OccNo, Occupation, OtherDolar, OtherR, PaidDollar, PaidR, Pa"& _ 
                "yByDonation, PayBySelf, PaymentCur, PaymentType, Province, ReadyModDolar, ReadyM"& _ 
                "odR, ReceiptDate, ReceiptID, ReceiptNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ReceiptNote, "& _ 
                "ReceiptType, ReturnDolar, ReturnReal, Sex, SocialAmount, SpectacleDolar, Spectac"& _ 
                "leR, SubTotalDolar, SubTotalReal, SupportedAmtDolar, SupportedAmtR, TIME_CREATE,"& _ 
                " TotalDolar, TotalReal, UserID, UserName, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Village, To"& _ 
                "talSocial"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            V_Receipt_Invoice"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (ReceiptNo = @Receipt"& _ 
                "No)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReceiptNo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        Address, Age, AmountFigureDolar, AmountFigureReal, AmountInWords, B"& _ 
                "arcode, Comment, Commune, CusName, CusNameEng, CustomerNo, District, DonateAmoun"& _ 
                "t, DonationID, DonationName, Expr1, EyeGlassesDolar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "EyeGlassesReal, Female, FullAmount, FundRaisingDolar, FundRaisingR, Glasses, Inc"& _ 
                "omType, IncomeID, IsCurrency, IsDonation, IsOldPatient, IsPaid, IsPatient, ItemI"& _ 
                "D, ItemName, ItemPrice, ItemQTY, Male, MedicDolar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Me"& _ 
                "dicReal, NilAmount, OccNo, Occupation, OtherDolar, OtherR, PaidDollar, PaidR, Pa"& _ 
                "yByDonation, PayBySelf, PaymentCur, PaymentType, Province, ReadyModDolar, ReadyM"& _ 
                "odR, ReceiptDate, ReceiptID, ReceiptNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ReceiptNote, "& _ 
                "ReceiptType, ReturnDolar, ReturnReal, Sex, SocialAmount, SpectacleDolar, Spectac"& _ 
                "leR, SubTotalDolar, SubTotalReal, SupportedAmtDolar, SupportedAmtR, TIME_CREATE,"& _ 
                " TotalDolar, TotalReal, UserID, UserName, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Village, To"& _ 
                "talSocial"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            V_Receipt_Invoice"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (ReceiptID = @Receipt"& _ 
                "ID)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReceiptID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ReceiptID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOpticalShop.V_Receipt_InvoiceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOpticalShop.V_Receipt_InvoiceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOpticalShop.V_Receipt_InvoiceDataTable = New DSOpticalShop.V_Receipt_InvoiceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSOpticalShop.V_Receipt_InvoiceDataTable, ByVal ReceiptNo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ReceiptNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ReceiptNo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByReceiptNo(ByVal ReceiptNo As String) As DSOpticalShop.V_Receipt_InvoiceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ReceiptNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ReceiptNo,String)
            End If
            Dim dataTable As DSOpticalShop.V_Receipt_InvoiceDataTable = New DSOpticalShop.V_Receipt_InvoiceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByReceiptID(ByVal dataTable As DSOpticalShop.V_Receipt_InvoiceDataTable, ByVal ReceiptID As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ReceiptID,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByReceiptID(ByVal ReceiptID As Decimal) As DSOpticalShop.V_Receipt_InvoiceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ReceiptID,Decimal)
            Dim dataTable As DSOpticalShop.V_Receipt_InvoiceDataTable = New DSOpticalShop.V_Receipt_InvoiceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VMainReceiptNILTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VMainReceiptNIL"
            tableMapping.ColumnMappings.Add("ReceiptNILId", "ReceiptNILId")
            tableMapping.ColumnMappings.Add("ReceiptNILDate", "ReceiptNILDate")
            tableMapping.ColumnMappings.Add("PatientNo", "PatientNo")
            tableMapping.ColumnMappings.Add("UserID", "UserID")
            tableMapping.ColumnMappings.Add("UserName", "UserName")
            tableMapping.ColumnMappings.Add("Glasses", "Glasses")
            tableMapping.ColumnMappings.Add("OlePatientNo", "OlePatientNo")
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate")
            tableMapping.ColumnMappings.Add("Province", "Province")
            tableMapping.ColumnMappings.Add("District", "District")
            tableMapping.ColumnMappings.Add("Commune", "Commune")
            tableMapping.ColumnMappings.Add("NameEng", "NameEng")
            tableMapping.ColumnMappings.Add("NameKhmer", "NameKhmer")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Male", "Male")
            tableMapping.ColumnMappings.Add("Female", "Female")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("Occupation", "Occupation")
            tableMapping.ColumnMappings.Add("Telephone", "Telephone")
            tableMapping.ColumnMappings.Add("Neighborly", "Neighborly")
            tableMapping.ColumnMappings.Add("Years", "Years")
            tableMapping.ColumnMappings.Add("Achieve", "Achieve")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ReceiptNILId, ReceiptNILDate, PatientNo, UserID, UserName, Glasses, OlePat"& _ 
                "ientNo, CreateDate, Province, District, Commune, NameEng, NameKhmer, Age, Male, "& _ 
                "Female, Sex, Address, Occupation, Telephone, Neighborly, Years, Achieve FROM dbo"& _ 
                ".VMainReceiptNIL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ReceiptNILId, ReceiptNILDate, PatientNo, UserID, UserName, Glasses, OlePat"& _ 
                "ientNo, CreateDate, Province, District, Commune, NameEng, NameKhmer, Age, Male, "& _ 
                "Female, Sex, Address, Occupation, Telephone, Neighborly, Years, Achieve FROM dbo"& _ 
                ".VMainReceiptNIL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (CAST(CONVERT (VARCHAR(10),  ReceiptNILDate, 1) AS DateT"& _ 
                "ime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@DateFrom AS DATETIME), 1) AS Datet"& _ 
                "ime) AND CAST(CONVERT (VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datetime))"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOpticalShop.VMainReceiptNILDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOpticalShop.VMainReceiptNILDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOpticalShop.VMainReceiptNILDataTable = New DSOpticalShop.VMainReceiptNILDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSOpticalShop.VMainReceiptNILDataTable, ByVal DateFrom As Date, ByVal DateTO As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataReceiptNIL(ByVal DateFrom As Date, ByVal DateTO As Date) As DSOpticalShop.VMainReceiptNILDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            Dim dataTable As DSOpticalShop.VMainReceiptNILDataTable = New DSOpticalShop.VMainReceiptNILDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VReceiptNILDetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VReceiptNILDetail"
            tableMapping.ColumnMappings.Add("ReceiptNILDId", "ReceiptNILDId")
            tableMapping.ColumnMappings.Add("ReceiptNILId", "ReceiptNILId")
            tableMapping.ColumnMappings.Add("ItemID", "ItemID")
            tableMapping.ColumnMappings.Add("ItemPrice", "ItemPrice")
            tableMapping.ColumnMappings.Add("ItemQTY", "ItemQTY")
            tableMapping.ColumnMappings.Add("ItemName", "ItemName")
            tableMapping.ColumnMappings.Add("Barcode", "Barcode")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ReceiptNILDId, ReceiptNILId, ItemID, ItemPrice, ItemQTY, ItemName, Barcode"& _ 
                " FROM dbo.VReceiptNILDetail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOpticalShop.VReceiptNILDetailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOpticalShop.VReceiptNILDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOpticalShop.VReceiptNILDetailDataTable = New DSOpticalShop.VReceiptNILDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class V_OpticalShopPatientStatisticByIcomeTypeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "V_OpticalShopPatientStatisticByIcomeType"
            tableMapping.ColumnMappings.Add("IsOldPatient", "IsOldPatient")
            tableMapping.ColumnMappings.Add("IncomType", "IncomType")
            tableMapping.ColumnMappings.Add("ReceiptType", "ReceiptType")
            tableMapping.ColumnMappings.Add("F", "F")
            tableMapping.ColumnMappings.Add("M", "M")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid")
            tableMapping.ColumnMappings.Add("agerange", "agerange")
            tableMapping.ColumnMappings.Add("ReceiptDate", "ReceiptDate")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     IsOldPatient, IncomType, ReceiptType, F, M, Age, Sex, IsPaid, agerange"& _ 
                ", ReceiptDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         V_OpticalShopPatientStatisticByIcomeType"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Age, F, IncomType, IsOldPatient, IsPaid, M, ReceiptDate, ReceiptType, Sex,"& _ 
                " agerange FROM V_OpticalShopPatientStatisticByIcomeType WHERE (CAST(CONVERT (VAR"& _ 
                "CHAR(10), ReceiptDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@"& _ 
                "DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@Date"& _ 
                "TO AS DATETIME), 1) AS Datetime)) AND (IsOldPatient = @IsOldPatient)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsOldPatient", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "IsOldPatient", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOpticalShop.V_OpticalShopPatientStatisticByIcomeTypeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOpticalShop.V_OpticalShopPatientStatisticByIcomeTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOpticalShop.V_OpticalShopPatientStatisticByIcomeTypeDataTable = New DSOpticalShop.V_OpticalShopPatientStatisticByIcomeTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSOpticalShop.V_OpticalShopPatientStatisticByIcomeTypeDataTable, ByVal DateFrom As Date, ByVal DateTO As Date, ByVal IsOldPatient As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (IsOldPatient.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IsOldPatient.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataFDateTDate(ByVal DateFrom As Date, ByVal DateTO As Date, ByVal IsOldPatient As Global.System.Nullable(Of Boolean)) As DSOpticalShop.V_OpticalShopPatientStatisticByIcomeTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (IsOldPatient.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IsOldPatient.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSOpticalShop.V_OpticalShopPatientStatisticByIcomeTypeDataTable = New DSOpticalShop.V_OpticalShopPatientStatisticByIcomeTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class V_OpticalShopPaymentTypeByAgeStatisticTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "V_OpticalShopPaymentTypeByAgeStatistic"
            tableMapping.ColumnMappings.Add("PaymentType", "PaymentType")
            tableMapping.ColumnMappings.Add("IsOldPatient", "IsOldPatient")
            tableMapping.ColumnMappings.Add("IncomType", "IncomType")
            tableMapping.ColumnMappings.Add("ReceiptType", "ReceiptType")
            tableMapping.ColumnMappings.Add("F", "F")
            tableMapping.ColumnMappings.Add("M", "M")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid")
            tableMapping.ColumnMappings.Add("agerange", "agerange")
            tableMapping.ColumnMappings.Add("ReceiptDate", "ReceiptDate")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        PaymentType, IsOldPatient, IncomType, ReceiptType, F, M, Age, Sex, "& _ 
                "IsPaid, agerange, ReceiptDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            V_OpticalShopPaymentTypeByAgeStat"& _ 
                "istic"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Age, F, IncomType, IsOldPatient, IsPaid, M, PaymentType, ReceiptDate, Rece"& _ 
                "iptType, Sex, agerange FROM V_OpticalShopPaymentTypeByAgeStatistic WHERE (CAST(C"& _ 
                "ONVERT (VARCHAR(10), ReceiptDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR("& _ 
                "10), CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10),"& _ 
                " CAST(@DateTO AS DATETIME), 1) AS Datetime))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ReceiptType=@ReceiptType"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReceiptType", Global.System.Data.SqlDbType.NVarChar, 100, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Age, F, IncomType, IsOldPatient, IsPaid, M, PaymentType, ReceiptDate, Rece"& _ 
                "iptType, Sex, agerange FROM V_OpticalShopPaymentTypeByAgeStatistic WHERE (CAST(C"& _ 
                "ONVERT (VARCHAR(10), ReceiptDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR("& _ 
                "10), CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10),"& _ 
                " CAST(@DateTO AS DATETIME), 1) AS Datetime))"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOpticalShop.V_OpticalShopPaymentTypeByAgeStatisticDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOpticalShop.V_OpticalShopPaymentTypeByAgeStatisticDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOpticalShop.V_OpticalShopPaymentTypeByAgeStatisticDataTable = New DSOpticalShop.V_OpticalShopPaymentTypeByAgeStatisticDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSOpticalShop.V_OpticalShopPaymentTypeByAgeStatisticDataTable, ByVal DateFrom As Date, ByVal DateTO As Date, ByVal ReceiptType As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (ReceiptType Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ReceiptType,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataFDateTDate(ByVal DateFrom As Date, ByVal DateTO As Date, ByVal ReceiptType As String) As DSOpticalShop.V_OpticalShopPaymentTypeByAgeStatisticDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (ReceiptType Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ReceiptType,String)
            End If
            Dim dataTable As DSOpticalShop.V_OpticalShopPaymentTypeByAgeStatisticDataTable = New DSOpticalShop.V_OpticalShopPaymentTypeByAgeStatisticDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByAllPaymentType(ByVal dataTable As DSOpticalShop.V_OpticalShopPaymentTypeByAgeStatisticDataTable, ByVal DateFrom As Date, ByVal DateTO As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByAllPaymentType(ByVal DateFrom As Date, ByVal DateTO As Date) As DSOpticalShop.V_OpticalShopPaymentTypeByAgeStatisticDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            Dim dataTable As DSOpticalShop.V_OpticalShopPaymentTypeByAgeStatisticDataTable = New DSOpticalShop.V_OpticalShopPaymentTypeByAgeStatisticDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class V_ITEM_OPT_TEMTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "V_ITEM_OPT_TEM"
            tableMapping.ColumnMappings.Add("ReceiptNo", "ReceiptNo")
            tableMapping.ColumnMappings.Add("Expr1", "Expr1")
            tableMapping.ColumnMappings.Add("ItemID", "ItemID")
            tableMapping.ColumnMappings.Add("ItemPrice", "ItemPrice")
            tableMapping.ColumnMappings.Add("ItemQTY", "ItemQTY")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ReceiptNo, Expr1, ItemID, ItemPrice, ItemQTY FROM dbo.V_ITEM_OPT_TEM"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ReceiptNo, Expr1, ItemID, ItemPrice, ItemQTY FROM dbo.V_ITEM_OPT_TEM"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHER"& _ 
                "E"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" ItemID=@ItemID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemID", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOpticalShop.V_ITEM_OPT_TEMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOpticalShop.V_ITEM_OPT_TEMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOpticalShop.V_ITEM_OPT_TEMDataTable = New DSOpticalShop.V_ITEM_OPT_TEMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByItemID(ByVal dataTable As DSOpticalShop.V_ITEM_OPT_TEMDataTable, ByVal ItemID As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ItemID Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ItemID,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByItemID(ByVal ItemID As String) As DSOpticalShop.V_ITEM_OPT_TEMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ItemID Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ItemID,String)
            End If
            Dim dataTable As DSOpticalShop.V_ITEM_OPT_TEMDataTable = New DSOpticalShop.V_ITEM_OPT_TEMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _iNCOME_TYPETableAdapter As INCOME_TYPETableAdapter
        
        Private _dONATIONTableAdapter As DONATIONTableAdapter
        
        Private _rECEIPT_CUSTOMERTableAdapter As RECEIPT_CUSTOMERTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property INCOME_TYPETableAdapter() As INCOME_TYPETableAdapter
            Get
                Return Me._iNCOME_TYPETableAdapter
            End Get
            Set
                Me._iNCOME_TYPETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DONATIONTableAdapter() As DONATIONTableAdapter
            Get
                Return Me._dONATIONTableAdapter
            End Get
            Set
                Me._dONATIONTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RECEIPT_CUSTOMERTableAdapter() As RECEIPT_CUSTOMERTableAdapter
            Get
                Return Me._rECEIPT_CUSTOMERTableAdapter
            End Get
            Set
                Me._rECEIPT_CUSTOMERTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._iNCOME_TYPETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iNCOME_TYPETableAdapter.Connection) Is Nothing)) Then
                    Return Me._iNCOME_TYPETableAdapter.Connection
                End If
                If ((Not (Me._dONATIONTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dONATIONTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dONATIONTableAdapter.Connection
                End If
                If ((Not (Me._rECEIPT_CUSTOMERTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rECEIPT_CUSTOMERTableAdapter.Connection) Is Nothing)) Then
                    Return Me._rECEIPT_CUSTOMERTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._iNCOME_TYPETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dONATIONTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rECEIPT_CUSTOMERTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DSOpticalShop, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._rECEIPT_CUSTOMERTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RECEIPT_CUSTOMER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rECEIPT_CUSTOMERTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iNCOME_TYPETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.INCOME_TYPE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iNCOME_TYPETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dONATIONTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DONATION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dONATIONTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DSOpticalShop, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._rECEIPT_CUSTOMERTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RECEIPT_CUSTOMER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rECEIPT_CUSTOMERTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iNCOME_TYPETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.INCOME_TYPE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iNCOME_TYPETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dONATIONTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DONATION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dONATIONTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DSOpticalShop, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dONATIONTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DONATION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dONATIONTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iNCOME_TYPETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.INCOME_TYPE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iNCOME_TYPETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rECEIPT_CUSTOMERTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RECEIPT_CUSTOMER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rECEIPT_CUSTOMERTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DSOpticalShop) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._iNCOME_TYPETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iNCOME_TYPETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._dONATIONTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dONATIONTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._rECEIPT_CUSTOMERTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rECEIPT_CUSTOMERTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._iNCOME_TYPETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iNCOME_TYPETableAdapter, Me._iNCOME_TYPETableAdapter.Connection)
                    Me._iNCOME_TYPETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._iNCOME_TYPETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._iNCOME_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iNCOME_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iNCOME_TYPETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dONATIONTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dONATIONTableAdapter, Me._dONATIONTableAdapter.Connection)
                    Me._dONATIONTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dONATIONTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dONATIONTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dONATIONTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dONATIONTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rECEIPT_CUSTOMERTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rECEIPT_CUSTOMERTableAdapter, Me._rECEIPT_CUSTOMERTableAdapter.Connection)
                    Me._rECEIPT_CUSTOMERTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._rECEIPT_CUSTOMERTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._rECEIPT_CUSTOMERTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rECEIPT_CUSTOMERTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rECEIPT_CUSTOMERTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._iNCOME_TYPETableAdapter) Is Nothing) Then
                    Me._iNCOME_TYPETableAdapter.Connection = CType(revertConnections(Me._iNCOME_TYPETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._iNCOME_TYPETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dONATIONTableAdapter) Is Nothing) Then
                    Me._dONATIONTableAdapter.Connection = CType(revertConnections(Me._dONATIONTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dONATIONTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rECEIPT_CUSTOMERTableAdapter) Is Nothing) Then
                    Me._rECEIPT_CUSTOMERTableAdapter.Connection = CType(revertConnections(Me._rECEIPT_CUSTOMERTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._rECEIPT_CUSTOMERTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
