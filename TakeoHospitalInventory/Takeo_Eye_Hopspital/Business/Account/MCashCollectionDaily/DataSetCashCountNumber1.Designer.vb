'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8830
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetCashCountNumber"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetCashCountNumber
    Inherits Global.System.Data.DataSet
    
    Private tabletblCashCount As tblCashCountDataTable
    
    Private tabletblCashCountForDepartment As tblCashCountForDepartmentDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tblCashCount")) Is Nothing) Then
                MyBase.Tables.Add(New tblCashCountDataTable(ds.Tables("tblCashCount")))
            End If
            If (Not (ds.Tables("tblCashCountForDepartment")) Is Nothing) Then
                MyBase.Tables.Add(New tblCashCountForDepartmentDataTable(ds.Tables("tblCashCountForDepartment")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblCashCount() As tblCashCountDataTable
        Get
            Return Me.tabletblCashCount
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblCashCountForDepartment() As tblCashCountForDepartmentDataTable
        Get
            Return Me.tabletblCashCountForDepartment
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSetCashCountNumber = CType(MyBase.Clone,DataSetCashCountNumber)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tblCashCount")) Is Nothing) Then
                MyBase.Tables.Add(New tblCashCountDataTable(ds.Tables("tblCashCount")))
            End If
            If (Not (ds.Tables("tblCashCountForDepartment")) Is Nothing) Then
                MyBase.Tables.Add(New tblCashCountForDepartmentDataTable(ds.Tables("tblCashCountForDepartment")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletblCashCount = CType(MyBase.Tables("tblCashCount"),tblCashCountDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblCashCount) Is Nothing) Then
                Me.tabletblCashCount.InitVars
            End If
        End If
        Me.tabletblCashCountForDepartment = CType(MyBase.Tables("tblCashCountForDepartment"),tblCashCountForDepartmentDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblCashCountForDepartment) Is Nothing) Then
                Me.tabletblCashCountForDepartment.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetCashCountNumber"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetCashCountNumber.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletblCashCount = New tblCashCountDataTable
        MyBase.Tables.Add(Me.tabletblCashCount)
        Me.tabletblCashCountForDepartment = New tblCashCountForDepartmentDataTable
        MyBase.Tables.Add(Me.tabletblCashCountForDepartment)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblCashCount() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblCashCountForDepartment() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetCashCountNumber = New DataSetCashCountNumber
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub tblCashCountRowChangeEventHandler(ByVal sender As Object, ByVal e As tblCashCountRowChangeEvent)
    
    Public Delegate Sub tblCashCountForDepartmentRowChangeEventHandler(ByVal sender As Object, ByVal e As tblCashCountForDepartmentRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblCashCountDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblCashCountRow)
        
        Private columnDateIn As Global.System.Data.DataColumn
        
        Private columnUS100 As Global.System.Data.DataColumn
        
        Private columnUS50 As Global.System.Data.DataColumn
        
        Private columnUS20 As Global.System.Data.DataColumn
        
        Private columnUS10 As Global.System.Data.DataColumn
        
        Private columnUS5 As Global.System.Data.DataColumn
        
        Private columnUS1 As Global.System.Data.DataColumn
        
        Private columnR100000 As Global.System.Data.DataColumn
        
        Private columnR50000 As Global.System.Data.DataColumn
        
        Private columnR20000 As Global.System.Data.DataColumn
        
        Private columnR10000 As Global.System.Data.DataColumn
        
        Private columnR5000 As Global.System.Data.DataColumn
        
        Private columnR2000 As Global.System.Data.DataColumn
        
        Private columnR1000 As Global.System.Data.DataColumn
        
        Private columnR500 As Global.System.Data.DataColumn
        
        Private columnR100 As Global.System.Data.DataColumn
        
        Private columnR50 As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnUS100T As Global.System.Data.DataColumn
        
        Private columnUS50T As Global.System.Data.DataColumn
        
        Private columnUS20T As Global.System.Data.DataColumn
        
        Private columnUS10T As Global.System.Data.DataColumn
        
        Private columnUS5T As Global.System.Data.DataColumn
        
        Private columnUS1T As Global.System.Data.DataColumn
        
        Private columnR100000T As Global.System.Data.DataColumn
        
        Private columnR50000T As Global.System.Data.DataColumn
        
        Private columnR20000T As Global.System.Data.DataColumn
        
        Private columnR10000T As Global.System.Data.DataColumn
        
        Private columnR5000T As Global.System.Data.DataColumn
        
        Private columnR2000T As Global.System.Data.DataColumn
        
        Private columnR1000T As Global.System.Data.DataColumn
        
        Private columnR500T As Global.System.Data.DataColumn
        
        Private columnR100T As Global.System.Data.DataColumn
        
        Private columnR50T As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblCashCount"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateInColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateIn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US100Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS100
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US50Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS50
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US20Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS20
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R100000Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR100000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R50000Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR50000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R20000Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR20000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R10000Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR10000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R5000Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR5000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R2000Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR2000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R1000Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR1000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R500Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR500
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R100Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR100
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R50Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR50
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US100TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS100T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US50TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS50T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US20TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS20T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US10TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS10T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US5TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS5T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US1TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS1T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R100000TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR100000T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R50000TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR50000T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R20000TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR20000T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R10000TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR10000T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R5000TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR5000T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R2000TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR2000T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R1000TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR1000T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R500TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR500T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R100TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR100T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R50TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR50T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblCashCountRow
            Get
                Return CType(Me.Rows(index),tblCashCountRow)
            End Get
        End Property
        
        Public Event tblCashCountRowChanging As tblCashCountRowChangeEventHandler
        
        Public Event tblCashCountRowChanged As tblCashCountRowChangeEventHandler
        
        Public Event tblCashCountRowDeleting As tblCashCountRowChangeEventHandler
        
        Public Event tblCashCountRowDeleted As tblCashCountRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblCashCountRow(ByVal row As tblCashCountRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblCashCountRow( _
                    ByVal DateIn As String,  _
                    ByVal US100 As Integer,  _
                    ByVal US50 As Integer,  _
                    ByVal US20 As Integer,  _
                    ByVal US10 As Integer,  _
                    ByVal US5 As Integer,  _
                    ByVal US1 As Integer,  _
                    ByVal R100000 As Integer,  _
                    ByVal R50000 As Integer,  _
                    ByVal R20000 As Integer,  _
                    ByVal R10000 As Integer,  _
                    ByVal R5000 As Integer,  _
                    ByVal R2000 As Integer,  _
                    ByVal R1000 As Integer,  _
                    ByVal R500 As Integer,  _
                    ByVal R100 As Integer,  _
                    ByVal R50 As Integer,  _
                    ByVal US100T As Long,  _
                    ByVal US50T As Long,  _
                    ByVal US20T As Long,  _
                    ByVal US10T As Long,  _
                    ByVal US5T As Long,  _
                    ByVal US1T As Long,  _
                    ByVal R100000T As Long,  _
                    ByVal R50000T As Long,  _
                    ByVal R20000T As Long,  _
                    ByVal R10000T As Long,  _
                    ByVal R5000T As Long,  _
                    ByVal R2000T As Long,  _
                    ByVal R1000T As Long,  _
                    ByVal R500T As Long,  _
                    ByVal R100T As Long,  _
                    ByVal R50T As Long) As tblCashCountRow
            Dim rowtblCashCountRow As tblCashCountRow = CType(Me.NewRow,tblCashCountRow)
            Dim columnValuesArray() As Object = New Object() {DateIn, US100, US50, US20, US10, US5, US1, R100000, R50000, R20000, R10000, R5000, R2000, R1000, R500, R100, R50, Nothing, US100T, US50T, US20T, US10T, US5T, US1T, R100000T, R50000T, R20000T, R10000T, R5000T, R2000T, R1000T, R500T, R100T, R50T}
            rowtblCashCountRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblCashCountRow)
            Return rowtblCashCountRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Long) As tblCashCountRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblCashCountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblCashCountDataTable = CType(MyBase.Clone,tblCashCountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblCashCountDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDateIn = MyBase.Columns("DateIn")
            Me.columnUS100 = MyBase.Columns("US100")
            Me.columnUS50 = MyBase.Columns("US50")
            Me.columnUS20 = MyBase.Columns("US20")
            Me.columnUS10 = MyBase.Columns("US10")
            Me.columnUS5 = MyBase.Columns("US5")
            Me.columnUS1 = MyBase.Columns("US1")
            Me.columnR100000 = MyBase.Columns("R100000")
            Me.columnR50000 = MyBase.Columns("R50000")
            Me.columnR20000 = MyBase.Columns("R20000")
            Me.columnR10000 = MyBase.Columns("R10000")
            Me.columnR5000 = MyBase.Columns("R5000")
            Me.columnR2000 = MyBase.Columns("R2000")
            Me.columnR1000 = MyBase.Columns("R1000")
            Me.columnR500 = MyBase.Columns("R500")
            Me.columnR100 = MyBase.Columns("R100")
            Me.columnR50 = MyBase.Columns("R50")
            Me.columnID = MyBase.Columns("ID")
            Me.columnUS100T = MyBase.Columns("US100T")
            Me.columnUS50T = MyBase.Columns("US50T")
            Me.columnUS20T = MyBase.Columns("US20T")
            Me.columnUS10T = MyBase.Columns("US10T")
            Me.columnUS5T = MyBase.Columns("US5T")
            Me.columnUS1T = MyBase.Columns("US1T")
            Me.columnR100000T = MyBase.Columns("R100000T")
            Me.columnR50000T = MyBase.Columns("R50000T")
            Me.columnR20000T = MyBase.Columns("R20000T")
            Me.columnR10000T = MyBase.Columns("R10000T")
            Me.columnR5000T = MyBase.Columns("R5000T")
            Me.columnR2000T = MyBase.Columns("R2000T")
            Me.columnR1000T = MyBase.Columns("R1000T")
            Me.columnR500T = MyBase.Columns("R500T")
            Me.columnR100T = MyBase.Columns("R100T")
            Me.columnR50T = MyBase.Columns("R50T")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDateIn = New Global.System.Data.DataColumn("DateIn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateIn)
            Me.columnUS100 = New Global.System.Data.DataColumn("US100", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS100)
            Me.columnUS50 = New Global.System.Data.DataColumn("US50", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS50)
            Me.columnUS20 = New Global.System.Data.DataColumn("US20", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS20)
            Me.columnUS10 = New Global.System.Data.DataColumn("US10", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS10)
            Me.columnUS5 = New Global.System.Data.DataColumn("US5", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS5)
            Me.columnUS1 = New Global.System.Data.DataColumn("US1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS1)
            Me.columnR100000 = New Global.System.Data.DataColumn("R100000", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR100000)
            Me.columnR50000 = New Global.System.Data.DataColumn("R50000", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR50000)
            Me.columnR20000 = New Global.System.Data.DataColumn("R20000", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR20000)
            Me.columnR10000 = New Global.System.Data.DataColumn("R10000", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR10000)
            Me.columnR5000 = New Global.System.Data.DataColumn("R5000", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR5000)
            Me.columnR2000 = New Global.System.Data.DataColumn("R2000", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR2000)
            Me.columnR1000 = New Global.System.Data.DataColumn("R1000", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR1000)
            Me.columnR500 = New Global.System.Data.DataColumn("R500", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR500)
            Me.columnR100 = New Global.System.Data.DataColumn("R100", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR100)
            Me.columnR50 = New Global.System.Data.DataColumn("R50", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR50)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnUS100T = New Global.System.Data.DataColumn("US100T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS100T)
            Me.columnUS50T = New Global.System.Data.DataColumn("US50T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS50T)
            Me.columnUS20T = New Global.System.Data.DataColumn("US20T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS20T)
            Me.columnUS10T = New Global.System.Data.DataColumn("US10T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS10T)
            Me.columnUS5T = New Global.System.Data.DataColumn("US5T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS5T)
            Me.columnUS1T = New Global.System.Data.DataColumn("US1T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS1T)
            Me.columnR100000T = New Global.System.Data.DataColumn("R100000T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR100000T)
            Me.columnR50000T = New Global.System.Data.DataColumn("R50000T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR50000T)
            Me.columnR20000T = New Global.System.Data.DataColumn("R20000T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR20000T)
            Me.columnR10000T = New Global.System.Data.DataColumn("R10000T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR10000T)
            Me.columnR5000T = New Global.System.Data.DataColumn("R5000T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR5000T)
            Me.columnR2000T = New Global.System.Data.DataColumn("R2000T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR2000T)
            Me.columnR1000T = New Global.System.Data.DataColumn("R1000T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR1000T)
            Me.columnR500T = New Global.System.Data.DataColumn("R500T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR500T)
            Me.columnR100T = New Global.System.Data.DataColumn("R100T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR100T)
            Me.columnR50T = New Global.System.Data.DataColumn("R50T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR50T)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnDateIn.ReadOnly = true
            Me.columnDateIn.MaxLength = 11
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblCashCountRow() As tblCashCountRow
            Return CType(Me.NewRow,tblCashCountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblCashCountRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblCashCountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblCashCountRowChangedEvent) Is Nothing) Then
                RaiseEvent tblCashCountRowChanged(Me, New tblCashCountRowChangeEvent(CType(e.Row,tblCashCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblCashCountRowChangingEvent) Is Nothing) Then
                RaiseEvent tblCashCountRowChanging(Me, New tblCashCountRowChangeEvent(CType(e.Row,tblCashCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblCashCountRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblCashCountRowDeleted(Me, New tblCashCountRowChangeEvent(CType(e.Row,tblCashCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblCashCountRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblCashCountRowDeleting(Me, New tblCashCountRowChangeEvent(CType(e.Row,tblCashCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblCashCountRow(ByVal row As tblCashCountRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetCashCountNumber = New DataSetCashCountNumber
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblCashCountDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblCashCountForDepartmentDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblCashCountForDepartmentRow)
        
        Private columnDateIn As Global.System.Data.DataColumn
        
        Private columnUsers As Global.System.Data.DataColumn
        
        Private columnDateUpdate As Global.System.Data.DataColumn
        
        Private columnCASH_IN_DEPART As Global.System.Data.DataColumn
        
        Private columnDEPARTMENT_NAME As Global.System.Data.DataColumn
        
        Private columnUS100X As Global.System.Data.DataColumn
        
        Private columnUS100 As Global.System.Data.DataColumn
        
        Private columnUS100T As Global.System.Data.DataColumn
        
        Private columnUS50X As Global.System.Data.DataColumn
        
        Private columnUS50 As Global.System.Data.DataColumn
        
        Private columnUS50T As Global.System.Data.DataColumn
        
        Private columnUS20X As Global.System.Data.DataColumn
        
        Private columnUS20 As Global.System.Data.DataColumn
        
        Private columnUS20T As Global.System.Data.DataColumn
        
        Private columnUS10X As Global.System.Data.DataColumn
        
        Private columnUS10 As Global.System.Data.DataColumn
        
        Private columnUS10T As Global.System.Data.DataColumn
        
        Private columnUS5X As Global.System.Data.DataColumn
        
        Private columnUS5 As Global.System.Data.DataColumn
        
        Private columnUS5T As Global.System.Data.DataColumn
        
        Private columnUS1X As Global.System.Data.DataColumn
        
        Private columnUS1 As Global.System.Data.DataColumn
        
        Private columnUS1T As Global.System.Data.DataColumn
        
        Private columnTotalUSD As Global.System.Data.DataColumn
        
        Private columnR100000X As Global.System.Data.DataColumn
        
        Private columnR100000 As Global.System.Data.DataColumn
        
        Private columnR100000T As Global.System.Data.DataColumn
        
        Private columnR50000X As Global.System.Data.DataColumn
        
        Private columnR50000 As Global.System.Data.DataColumn
        
        Private columnR50000T As Global.System.Data.DataColumn
        
        Private columnR20000X As Global.System.Data.DataColumn
        
        Private columnR20000 As Global.System.Data.DataColumn
        
        Private columnR20000T As Global.System.Data.DataColumn
        
        Private columnR10000X As Global.System.Data.DataColumn
        
        Private columnR10000 As Global.System.Data.DataColumn
        
        Private columnR10000T As Global.System.Data.DataColumn
        
        Private columnR5000X As Global.System.Data.DataColumn
        
        Private columnR5000 As Global.System.Data.DataColumn
        
        Private columnR5000T As Global.System.Data.DataColumn
        
        Private columnR2000X As Global.System.Data.DataColumn
        
        Private columnR2000 As Global.System.Data.DataColumn
        
        Private columnR2000T As Global.System.Data.DataColumn
        
        Private columnR1000X As Global.System.Data.DataColumn
        
        Private columnR1000 As Global.System.Data.DataColumn
        
        Private columnR1000T As Global.System.Data.DataColumn
        
        Private columnR500X As Global.System.Data.DataColumn
        
        Private columnR500 As Global.System.Data.DataColumn
        
        Private columnR500T As Global.System.Data.DataColumn
        
        Private columnR100X As Global.System.Data.DataColumn
        
        Private columnR100 As Global.System.Data.DataColumn
        
        Private columnR100T As Global.System.Data.DataColumn
        
        Private columnR50X As Global.System.Data.DataColumn
        
        Private columnR50 As Global.System.Data.DataColumn
        
        Private columnR50T As Global.System.Data.DataColumn
        
        Private columnTotalRIEL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblCashCountForDepartment"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateInColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateIn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsersColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsers
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateUpdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateUpdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CASH_IN_DEPARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCASH_IN_DEPART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEPARTMENT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEPARTMENT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US100XColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS100X
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US100Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS100
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US100TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS100T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US50XColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS50X
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US50Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS50
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US50TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS50T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US20XColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS20X
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US20Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS20
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US20TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS20T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US10XColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS10X
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US10TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS10T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US5XColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS5X
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US5TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS5T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US1XColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS1X
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property US1TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUS1T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalUSDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalUSD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R100000XColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR100000X
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R100000Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR100000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R100000TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR100000T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R50000XColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR50000X
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R50000Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR50000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R50000TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR50000T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R20000XColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR20000X
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R20000Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR20000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R20000TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR20000T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R10000XColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR10000X
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R10000Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR10000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R10000TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR10000T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R5000XColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR5000X
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R5000Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR5000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R5000TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR5000T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R2000XColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR2000X
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R2000Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR2000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R2000TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR2000T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R1000XColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR1000X
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R1000Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR1000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R1000TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR1000T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R500XColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR500X
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R500Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR500
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R500TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR500T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R100XColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR100X
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R100Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR100
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R100TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR100T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R50XColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR50X
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R50Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnR50
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R50TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR50T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalRIELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalRIEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblCashCountForDepartmentRow
            Get
                Return CType(Me.Rows(index),tblCashCountForDepartmentRow)
            End Get
        End Property
        
        Public Event tblCashCountForDepartmentRowChanging As tblCashCountForDepartmentRowChangeEventHandler
        
        Public Event tblCashCountForDepartmentRowChanged As tblCashCountForDepartmentRowChangeEventHandler
        
        Public Event tblCashCountForDepartmentRowDeleting As tblCashCountForDepartmentRowChangeEventHandler
        
        Public Event tblCashCountForDepartmentRowDeleted As tblCashCountForDepartmentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblCashCountForDepartmentRow(ByVal row As tblCashCountForDepartmentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblCashCountForDepartmentRow( _
                    ByVal DateIn As Date,  _
                    ByVal Users As String,  _
                    ByVal DateUpdate As Date,  _
                    ByVal CASH_IN_DEPART As Decimal,  _
                    ByVal DEPARTMENT_NAME As String,  _
                    ByVal US100X As String,  _
                    ByVal US100 As Integer,  _
                    ByVal US100T As Long,  _
                    ByVal US50X As String,  _
                    ByVal US50 As Integer,  _
                    ByVal US50T As Long,  _
                    ByVal US20X As String,  _
                    ByVal US20 As Integer,  _
                    ByVal US20T As Long,  _
                    ByVal US10X As String,  _
                    ByVal US10 As Integer,  _
                    ByVal US10T As Long,  _
                    ByVal US5X As String,  _
                    ByVal US5 As Integer,  _
                    ByVal US5T As Long,  _
                    ByVal US1X As String,  _
                    ByVal US1 As Integer,  _
                    ByVal US1T As Long,  _
                    ByVal TotalUSD As Long,  _
                    ByVal R100000X As String,  _
                    ByVal R100000 As Integer,  _
                    ByVal R100000T As Long,  _
                    ByVal R50000X As String,  _
                    ByVal R50000 As Integer,  _
                    ByVal R50000T As Long,  _
                    ByVal R20000X As String,  _
                    ByVal R20000 As Integer,  _
                    ByVal R20000T As Long,  _
                    ByVal R10000X As String,  _
                    ByVal R10000 As Integer,  _
                    ByVal R10000T As Long,  _
                    ByVal R5000X As String,  _
                    ByVal R5000 As Integer,  _
                    ByVal R5000T As Long,  _
                    ByVal R2000X As String,  _
                    ByVal R2000 As Integer,  _
                    ByVal R2000T As Long,  _
                    ByVal R1000X As String,  _
                    ByVal R1000 As Integer,  _
                    ByVal R1000T As Long,  _
                    ByVal R500X As String,  _
                    ByVal R500 As Integer,  _
                    ByVal R500T As Long,  _
                    ByVal R100X As String,  _
                    ByVal R100 As Integer,  _
                    ByVal R100T As Long,  _
                    ByVal R50X As String,  _
                    ByVal R50 As Integer,  _
                    ByVal R50T As Long,  _
                    ByVal TotalRIEL As Long) As tblCashCountForDepartmentRow
            Dim rowtblCashCountForDepartmentRow As tblCashCountForDepartmentRow = CType(Me.NewRow,tblCashCountForDepartmentRow)
            Dim columnValuesArray() As Object = New Object() {DateIn, Users, DateUpdate, CASH_IN_DEPART, DEPARTMENT_NAME, US100X, US100, US100T, US50X, US50, US50T, US20X, US20, US20T, US10X, US10, US10T, US5X, US5, US5T, US1X, US1, US1T, TotalUSD, R100000X, R100000, R100000T, R50000X, R50000, R50000T, R20000X, R20000, R20000T, R10000X, R10000, R10000T, R5000X, R5000, R5000T, R2000X, R2000, R2000T, R1000X, R1000, R1000T, R500X, R500, R500T, R100X, R100, R100T, R50X, R50, R50T, TotalRIEL}
            rowtblCashCountForDepartmentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblCashCountForDepartmentRow)
            Return rowtblCashCountForDepartmentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblCashCountForDepartmentDataTable = CType(MyBase.Clone,tblCashCountForDepartmentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblCashCountForDepartmentDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDateIn = MyBase.Columns("DateIn")
            Me.columnUsers = MyBase.Columns("Users")
            Me.columnDateUpdate = MyBase.Columns("DateUpdate")
            Me.columnCASH_IN_DEPART = MyBase.Columns("CASH_IN_DEPART")
            Me.columnDEPARTMENT_NAME = MyBase.Columns("DEPARTMENT_NAME")
            Me.columnUS100X = MyBase.Columns("US100X")
            Me.columnUS100 = MyBase.Columns("US100")
            Me.columnUS100T = MyBase.Columns("US100T")
            Me.columnUS50X = MyBase.Columns("US50X")
            Me.columnUS50 = MyBase.Columns("US50")
            Me.columnUS50T = MyBase.Columns("US50T")
            Me.columnUS20X = MyBase.Columns("US20X")
            Me.columnUS20 = MyBase.Columns("US20")
            Me.columnUS20T = MyBase.Columns("US20T")
            Me.columnUS10X = MyBase.Columns("US10X")
            Me.columnUS10 = MyBase.Columns("US10")
            Me.columnUS10T = MyBase.Columns("US10T")
            Me.columnUS5X = MyBase.Columns("US5X")
            Me.columnUS5 = MyBase.Columns("US5")
            Me.columnUS5T = MyBase.Columns("US5T")
            Me.columnUS1X = MyBase.Columns("US1X")
            Me.columnUS1 = MyBase.Columns("US1")
            Me.columnUS1T = MyBase.Columns("US1T")
            Me.columnTotalUSD = MyBase.Columns("TotalUSD")
            Me.columnR100000X = MyBase.Columns("R100000X")
            Me.columnR100000 = MyBase.Columns("R100000")
            Me.columnR100000T = MyBase.Columns("R100000T")
            Me.columnR50000X = MyBase.Columns("R50000X")
            Me.columnR50000 = MyBase.Columns("R50000")
            Me.columnR50000T = MyBase.Columns("R50000T")
            Me.columnR20000X = MyBase.Columns("R20000X")
            Me.columnR20000 = MyBase.Columns("R20000")
            Me.columnR20000T = MyBase.Columns("R20000T")
            Me.columnR10000X = MyBase.Columns("R10000X")
            Me.columnR10000 = MyBase.Columns("R10000")
            Me.columnR10000T = MyBase.Columns("R10000T")
            Me.columnR5000X = MyBase.Columns("R5000X")
            Me.columnR5000 = MyBase.Columns("R5000")
            Me.columnR5000T = MyBase.Columns("R5000T")
            Me.columnR2000X = MyBase.Columns("R2000X")
            Me.columnR2000 = MyBase.Columns("R2000")
            Me.columnR2000T = MyBase.Columns("R2000T")
            Me.columnR1000X = MyBase.Columns("R1000X")
            Me.columnR1000 = MyBase.Columns("R1000")
            Me.columnR1000T = MyBase.Columns("R1000T")
            Me.columnR500X = MyBase.Columns("R500X")
            Me.columnR500 = MyBase.Columns("R500")
            Me.columnR500T = MyBase.Columns("R500T")
            Me.columnR100X = MyBase.Columns("R100X")
            Me.columnR100 = MyBase.Columns("R100")
            Me.columnR100T = MyBase.Columns("R100T")
            Me.columnR50X = MyBase.Columns("R50X")
            Me.columnR50 = MyBase.Columns("R50")
            Me.columnR50T = MyBase.Columns("R50T")
            Me.columnTotalRIEL = MyBase.Columns("TotalRIEL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDateIn = New Global.System.Data.DataColumn("DateIn", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateIn)
            Me.columnUsers = New Global.System.Data.DataColumn("Users", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsers)
            Me.columnDateUpdate = New Global.System.Data.DataColumn("DateUpdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateUpdate)
            Me.columnCASH_IN_DEPART = New Global.System.Data.DataColumn("CASH_IN_DEPART", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCASH_IN_DEPART)
            Me.columnDEPARTMENT_NAME = New Global.System.Data.DataColumn("DEPARTMENT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEPARTMENT_NAME)
            Me.columnUS100X = New Global.System.Data.DataColumn("US100X", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS100X)
            Me.columnUS100 = New Global.System.Data.DataColumn("US100", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS100)
            Me.columnUS100T = New Global.System.Data.DataColumn("US100T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS100T)
            Me.columnUS50X = New Global.System.Data.DataColumn("US50X", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS50X)
            Me.columnUS50 = New Global.System.Data.DataColumn("US50", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS50)
            Me.columnUS50T = New Global.System.Data.DataColumn("US50T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS50T)
            Me.columnUS20X = New Global.System.Data.DataColumn("US20X", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS20X)
            Me.columnUS20 = New Global.System.Data.DataColumn("US20", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS20)
            Me.columnUS20T = New Global.System.Data.DataColumn("US20T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS20T)
            Me.columnUS10X = New Global.System.Data.DataColumn("US10X", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS10X)
            Me.columnUS10 = New Global.System.Data.DataColumn("US10", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS10)
            Me.columnUS10T = New Global.System.Data.DataColumn("US10T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS10T)
            Me.columnUS5X = New Global.System.Data.DataColumn("US5X", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS5X)
            Me.columnUS5 = New Global.System.Data.DataColumn("US5", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS5)
            Me.columnUS5T = New Global.System.Data.DataColumn("US5T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS5T)
            Me.columnUS1X = New Global.System.Data.DataColumn("US1X", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS1X)
            Me.columnUS1 = New Global.System.Data.DataColumn("US1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS1)
            Me.columnUS1T = New Global.System.Data.DataColumn("US1T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUS1T)
            Me.columnTotalUSD = New Global.System.Data.DataColumn("TotalUSD", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalUSD)
            Me.columnR100000X = New Global.System.Data.DataColumn("R100000X", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR100000X)
            Me.columnR100000 = New Global.System.Data.DataColumn("R100000", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR100000)
            Me.columnR100000T = New Global.System.Data.DataColumn("R100000T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR100000T)
            Me.columnR50000X = New Global.System.Data.DataColumn("R50000X", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR50000X)
            Me.columnR50000 = New Global.System.Data.DataColumn("R50000", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR50000)
            Me.columnR50000T = New Global.System.Data.DataColumn("R50000T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR50000T)
            Me.columnR20000X = New Global.System.Data.DataColumn("R20000X", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR20000X)
            Me.columnR20000 = New Global.System.Data.DataColumn("R20000", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR20000)
            Me.columnR20000T = New Global.System.Data.DataColumn("R20000T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR20000T)
            Me.columnR10000X = New Global.System.Data.DataColumn("R10000X", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR10000X)
            Me.columnR10000 = New Global.System.Data.DataColumn("R10000", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR10000)
            Me.columnR10000T = New Global.System.Data.DataColumn("R10000T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR10000T)
            Me.columnR5000X = New Global.System.Data.DataColumn("R5000X", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR5000X)
            Me.columnR5000 = New Global.System.Data.DataColumn("R5000", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR5000)
            Me.columnR5000T = New Global.System.Data.DataColumn("R5000T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR5000T)
            Me.columnR2000X = New Global.System.Data.DataColumn("R2000X", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR2000X)
            Me.columnR2000 = New Global.System.Data.DataColumn("R2000", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR2000)
            Me.columnR2000T = New Global.System.Data.DataColumn("R2000T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR2000T)
            Me.columnR1000X = New Global.System.Data.DataColumn("R1000X", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR1000X)
            Me.columnR1000 = New Global.System.Data.DataColumn("R1000", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR1000)
            Me.columnR1000T = New Global.System.Data.DataColumn("R1000T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR1000T)
            Me.columnR500X = New Global.System.Data.DataColumn("R500X", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR500X)
            Me.columnR500 = New Global.System.Data.DataColumn("R500", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR500)
            Me.columnR500T = New Global.System.Data.DataColumn("R500T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR500T)
            Me.columnR100X = New Global.System.Data.DataColumn("R100X", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR100X)
            Me.columnR100 = New Global.System.Data.DataColumn("R100", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR100)
            Me.columnR100T = New Global.System.Data.DataColumn("R100T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR100T)
            Me.columnR50X = New Global.System.Data.DataColumn("R50X", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR50X)
            Me.columnR50 = New Global.System.Data.DataColumn("R50", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR50)
            Me.columnR50T = New Global.System.Data.DataColumn("R50T", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR50T)
            Me.columnTotalRIEL = New Global.System.Data.DataColumn("TotalRIEL", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalRIEL)
            Me.columnUsers.MaxLength = 500
            Me.columnDEPARTMENT_NAME.MaxLength = 50
            Me.columnUS100X.MaxLength = 50
            Me.columnUS50X.MaxLength = 50
            Me.columnUS20X.MaxLength = 50
            Me.columnUS10X.MaxLength = 50
            Me.columnUS5X.MaxLength = 50
            Me.columnUS1X.MaxLength = 50
            Me.columnR100000X.MaxLength = 50
            Me.columnR50000X.MaxLength = 50
            Me.columnR20000X.MaxLength = 50
            Me.columnR10000X.MaxLength = 50
            Me.columnR5000X.MaxLength = 50
            Me.columnR2000X.MaxLength = 50
            Me.columnR1000X.MaxLength = 50
            Me.columnR500X.MaxLength = 50
            Me.columnR100X.MaxLength = 50
            Me.columnR50X.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblCashCountForDepartmentRow() As tblCashCountForDepartmentRow
            Return CType(Me.NewRow,tblCashCountForDepartmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblCashCountForDepartmentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblCashCountForDepartmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblCashCountForDepartmentRowChangedEvent) Is Nothing) Then
                RaiseEvent tblCashCountForDepartmentRowChanged(Me, New tblCashCountForDepartmentRowChangeEvent(CType(e.Row,tblCashCountForDepartmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblCashCountForDepartmentRowChangingEvent) Is Nothing) Then
                RaiseEvent tblCashCountForDepartmentRowChanging(Me, New tblCashCountForDepartmentRowChangeEvent(CType(e.Row,tblCashCountForDepartmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblCashCountForDepartmentRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblCashCountForDepartmentRowDeleted(Me, New tblCashCountForDepartmentRowChangeEvent(CType(e.Row,tblCashCountForDepartmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblCashCountForDepartmentRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblCashCountForDepartmentRowDeleting(Me, New tblCashCountForDepartmentRowChangeEvent(CType(e.Row,tblCashCountForDepartmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblCashCountForDepartmentRow(ByVal row As tblCashCountForDepartmentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetCashCountNumber = New DataSetCashCountNumber
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblCashCountForDepartmentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblCashCountRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblCashCount As tblCashCountDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblCashCount = CType(Me.Table,tblCashCountDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateIn() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.DateInColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateIn' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.DateInColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US100() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.US100Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US100' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.US100Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US50() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.US50Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US50' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.US50Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US20() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.US20Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US20' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.US20Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US10() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.US10Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US10' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.US10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US5() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.US5Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US5' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.US5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.US1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US1' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.US1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R100000() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R100000Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R100000' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R100000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R50000() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R50000Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R50000' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R50000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R20000() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R20000Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R20000' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R20000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R10000() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R10000Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R10000' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R10000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R5000() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R5000Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R5000' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R5000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R2000() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R2000Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R2000' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R2000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R1000() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R1000Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R1000' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R1000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R500() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R500Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R500' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R500Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R100() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R100Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R100' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R100Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R50() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R50Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R50' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R50Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tabletblCashCount.IDColumn),Long)
            End Get
            Set
                Me(Me.tabletblCashCount.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US100T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.US100TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US100T' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.US100TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US50T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.US50TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US50T' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.US50TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US20T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.US20TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US20T' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.US20TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US10T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.US10TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US10T' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.US10TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US5T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.US5TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US5T' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.US5TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US1T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.US1TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US1T' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.US1TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R100000T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R100000TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R100000T' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R100000TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R50000T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R50000TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R50000T' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R50000TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R20000T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R20000TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R20000T' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R20000TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R10000T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R10000TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R10000T' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R10000TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R5000T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R5000TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R5000T' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R5000TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R2000T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R2000TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R2000T' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R2000TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R1000T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R1000TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R1000T' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R1000TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R500T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R500TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R500T' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R500TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R100T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R100TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R100T' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R100TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R50T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCount.R50TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R50T' in table 'tblCashCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCount.R50TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateInNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.DateInColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateInNull()
            Me(Me.tabletblCashCount.DateInColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS100Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.US100Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS100Null()
            Me(Me.tabletblCashCount.US100Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS50Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.US50Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS50Null()
            Me(Me.tabletblCashCount.US50Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS20Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.US20Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS20Null()
            Me(Me.tabletblCashCount.US20Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS10Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.US10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS10Null()
            Me(Me.tabletblCashCount.US10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS5Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.US5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS5Null()
            Me(Me.tabletblCashCount.US5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS1Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.US1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS1Null()
            Me(Me.tabletblCashCount.US1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR100000Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R100000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR100000Null()
            Me(Me.tabletblCashCount.R100000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR50000Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R50000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR50000Null()
            Me(Me.tabletblCashCount.R50000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR20000Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R20000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR20000Null()
            Me(Me.tabletblCashCount.R20000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR10000Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R10000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR10000Null()
            Me(Me.tabletblCashCount.R10000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR5000Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R5000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR5000Null()
            Me(Me.tabletblCashCount.R5000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR2000Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R2000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR2000Null()
            Me(Me.tabletblCashCount.R2000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR1000Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R1000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR1000Null()
            Me(Me.tabletblCashCount.R1000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR500Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R500Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR500Null()
            Me(Me.tabletblCashCount.R500Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR100Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R100Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR100Null()
            Me(Me.tabletblCashCount.R100Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR50Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R50Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR50Null()
            Me(Me.tabletblCashCount.R50Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS100TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.US100TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS100TNull()
            Me(Me.tabletblCashCount.US100TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS50TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.US50TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS50TNull()
            Me(Me.tabletblCashCount.US50TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS20TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.US20TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS20TNull()
            Me(Me.tabletblCashCount.US20TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS10TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.US10TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS10TNull()
            Me(Me.tabletblCashCount.US10TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS5TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.US5TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS5TNull()
            Me(Me.tabletblCashCount.US5TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS1TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.US1TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS1TNull()
            Me(Me.tabletblCashCount.US1TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR100000TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R100000TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR100000TNull()
            Me(Me.tabletblCashCount.R100000TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR50000TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R50000TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR50000TNull()
            Me(Me.tabletblCashCount.R50000TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR20000TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R20000TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR20000TNull()
            Me(Me.tabletblCashCount.R20000TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR10000TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R10000TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR10000TNull()
            Me(Me.tabletblCashCount.R10000TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR5000TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R5000TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR5000TNull()
            Me(Me.tabletblCashCount.R5000TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR2000TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R2000TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR2000TNull()
            Me(Me.tabletblCashCount.R2000TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR1000TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R1000TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR1000TNull()
            Me(Me.tabletblCashCount.R1000TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR500TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R500TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR500TNull()
            Me(Me.tabletblCashCount.R500TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR100TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R100TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR100TNull()
            Me(Me.tabletblCashCount.R100TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR50TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCount.R50TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR50TNull()
            Me(Me.tabletblCashCount.R50TColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblCashCountForDepartmentRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblCashCountForDepartment As tblCashCountForDepartmentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblCashCountForDepartment = CType(Me.Table,tblCashCountForDepartmentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateIn() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.DateInColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateIn' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.DateInColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Users() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.UsersColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Users' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.UsersColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateUpdate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.DateUpdateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateUpdate' in table 'tblCashCountForDepartment' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.DateUpdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CASH_IN_DEPART() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.CASH_IN_DEPARTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CASH_IN_DEPART' in table 'tblCashCountForDepartment' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.CASH_IN_DEPARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEPARTMENT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.DEPARTMENT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEPARTMENT_NAME' in table 'tblCashCountForDepartment' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.DEPARTMENT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US100X() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US100XColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US100X' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US100XColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US100() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US100Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US100' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US100Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US100T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US100TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US100T' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US100TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US50X() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US50XColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US50X' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US50XColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US50() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US50Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US50' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US50Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US50T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US50TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US50T' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US50TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US20X() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US20XColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US20X' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US20XColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US20() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US20Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US20' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US20Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US20T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US20TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US20T' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US20TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US10X() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US10XColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US10X' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US10XColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US10() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US10Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US10' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US10T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US10TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US10T' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US10TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US5X() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US5XColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US5X' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US5XColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US5() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US5Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US5' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US5T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US5TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US5T' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US5TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US1X() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US1XColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US1X' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US1XColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US1' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property US1T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.US1TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'US1T' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.US1TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalUSD() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.TotalUSDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalUSD' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.TotalUSDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R100000X() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R100000XColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R100000X' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R100000XColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R100000() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R100000Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R100000' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R100000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R100000T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R100000TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R100000T' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R100000TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R50000X() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R50000XColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R50000X' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R50000XColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R50000() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R50000Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R50000' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R50000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R50000T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R50000TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R50000T' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R50000TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R20000X() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R20000XColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R20000X' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R20000XColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R20000() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R20000Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R20000' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R20000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R20000T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R20000TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R20000T' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R20000TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R10000X() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R10000XColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R10000X' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R10000XColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R10000() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R10000Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R10000' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R10000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R10000T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R10000TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R10000T' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R10000TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R5000X() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R5000XColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R5000X' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R5000XColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R5000() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R5000Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R5000' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R5000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R5000T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R5000TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R5000T' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R5000TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R2000X() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R2000XColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R2000X' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R2000XColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R2000() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R2000Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R2000' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R2000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R2000T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R2000TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R2000T' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R2000TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R1000X() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R1000XColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R1000X' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R1000XColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R1000() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R1000Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R1000' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R1000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R1000T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R1000TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R1000T' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R1000TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R500X() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R500XColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R500X' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R500XColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R500() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R500Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R500' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R500Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R500T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R500TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R500T' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R500TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R100X() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R100XColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R100X' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R100XColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R100() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R100Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R100' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R100Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R100T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R100TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R100T' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R100TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R50X() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R50XColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R50X' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R50XColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R50() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R50Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R50' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R50Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R50T() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.R50TColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'R50T' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.R50TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalRIEL() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCashCountForDepartment.TotalRIELColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalRIEL' in table 'tblCashCountForDepartment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCashCountForDepartment.TotalRIELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateInNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.DateInColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateInNull()
            Me(Me.tabletblCashCountForDepartment.DateInColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsersNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.UsersColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsersNull()
            Me(Me.tabletblCashCountForDepartment.UsersColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateUpdateNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.DateUpdateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateUpdateNull()
            Me(Me.tabletblCashCountForDepartment.DateUpdateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCASH_IN_DEPARTNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.CASH_IN_DEPARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCASH_IN_DEPARTNull()
            Me(Me.tabletblCashCountForDepartment.CASH_IN_DEPARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEPARTMENT_NAMENull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.DEPARTMENT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEPARTMENT_NAMENull()
            Me(Me.tabletblCashCountForDepartment.DEPARTMENT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS100XNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US100XColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS100XNull()
            Me(Me.tabletblCashCountForDepartment.US100XColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS100Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US100Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS100Null()
            Me(Me.tabletblCashCountForDepartment.US100Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS100TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US100TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS100TNull()
            Me(Me.tabletblCashCountForDepartment.US100TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS50XNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US50XColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS50XNull()
            Me(Me.tabletblCashCountForDepartment.US50XColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS50Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US50Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS50Null()
            Me(Me.tabletblCashCountForDepartment.US50Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS50TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US50TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS50TNull()
            Me(Me.tabletblCashCountForDepartment.US50TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS20XNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US20XColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS20XNull()
            Me(Me.tabletblCashCountForDepartment.US20XColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS20Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US20Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS20Null()
            Me(Me.tabletblCashCountForDepartment.US20Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS20TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US20TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS20TNull()
            Me(Me.tabletblCashCountForDepartment.US20TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS10XNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US10XColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS10XNull()
            Me(Me.tabletblCashCountForDepartment.US10XColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS10Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS10Null()
            Me(Me.tabletblCashCountForDepartment.US10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS10TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US10TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS10TNull()
            Me(Me.tabletblCashCountForDepartment.US10TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS5XNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US5XColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS5XNull()
            Me(Me.tabletblCashCountForDepartment.US5XColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS5Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS5Null()
            Me(Me.tabletblCashCountForDepartment.US5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS5TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US5TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS5TNull()
            Me(Me.tabletblCashCountForDepartment.US5TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS1XNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US1XColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS1XNull()
            Me(Me.tabletblCashCountForDepartment.US1XColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS1Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS1Null()
            Me(Me.tabletblCashCountForDepartment.US1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUS1TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.US1TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUS1TNull()
            Me(Me.tabletblCashCountForDepartment.US1TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalUSDNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.TotalUSDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalUSDNull()
            Me(Me.tabletblCashCountForDepartment.TotalUSDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR100000XNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R100000XColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR100000XNull()
            Me(Me.tabletblCashCountForDepartment.R100000XColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR100000Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R100000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR100000Null()
            Me(Me.tabletblCashCountForDepartment.R100000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR100000TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R100000TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR100000TNull()
            Me(Me.tabletblCashCountForDepartment.R100000TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR50000XNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R50000XColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR50000XNull()
            Me(Me.tabletblCashCountForDepartment.R50000XColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR50000Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R50000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR50000Null()
            Me(Me.tabletblCashCountForDepartment.R50000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR50000TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R50000TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR50000TNull()
            Me(Me.tabletblCashCountForDepartment.R50000TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR20000XNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R20000XColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR20000XNull()
            Me(Me.tabletblCashCountForDepartment.R20000XColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR20000Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R20000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR20000Null()
            Me(Me.tabletblCashCountForDepartment.R20000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR20000TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R20000TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR20000TNull()
            Me(Me.tabletblCashCountForDepartment.R20000TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR10000XNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R10000XColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR10000XNull()
            Me(Me.tabletblCashCountForDepartment.R10000XColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR10000Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R10000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR10000Null()
            Me(Me.tabletblCashCountForDepartment.R10000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR10000TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R10000TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR10000TNull()
            Me(Me.tabletblCashCountForDepartment.R10000TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR5000XNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R5000XColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR5000XNull()
            Me(Me.tabletblCashCountForDepartment.R5000XColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR5000Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R5000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR5000Null()
            Me(Me.tabletblCashCountForDepartment.R5000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR5000TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R5000TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR5000TNull()
            Me(Me.tabletblCashCountForDepartment.R5000TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR2000XNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R2000XColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR2000XNull()
            Me(Me.tabletblCashCountForDepartment.R2000XColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR2000Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R2000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR2000Null()
            Me(Me.tabletblCashCountForDepartment.R2000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR2000TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R2000TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR2000TNull()
            Me(Me.tabletblCashCountForDepartment.R2000TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR1000XNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R1000XColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR1000XNull()
            Me(Me.tabletblCashCountForDepartment.R1000XColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR1000Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R1000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR1000Null()
            Me(Me.tabletblCashCountForDepartment.R1000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR1000TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R1000TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR1000TNull()
            Me(Me.tabletblCashCountForDepartment.R1000TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR500XNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R500XColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR500XNull()
            Me(Me.tabletblCashCountForDepartment.R500XColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR500Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R500Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR500Null()
            Me(Me.tabletblCashCountForDepartment.R500Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR500TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R500TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR500TNull()
            Me(Me.tabletblCashCountForDepartment.R500TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR100XNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R100XColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR100XNull()
            Me(Me.tabletblCashCountForDepartment.R100XColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR100Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R100Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR100Null()
            Me(Me.tabletblCashCountForDepartment.R100Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR100TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R100TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR100TNull()
            Me(Me.tabletblCashCountForDepartment.R100TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR50XNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R50XColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR50XNull()
            Me(Me.tabletblCashCountForDepartment.R50XColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR50Null() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R50Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR50Null()
            Me(Me.tabletblCashCountForDepartment.R50Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR50TNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.R50TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR50TNull()
            Me(Me.tabletblCashCountForDepartment.R50TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalRIELNull() As Boolean
            Return Me.IsNull(Me.tabletblCashCountForDepartment.TotalRIELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalRIELNull()
            Me(Me.tabletblCashCountForDepartment.TotalRIELColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblCashCountRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblCashCountRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblCashCountRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblCashCountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblCashCountForDepartmentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblCashCountForDepartmentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblCashCountForDepartmentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblCashCountForDepartmentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSetCashCountNumberTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblCashCountTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblCashCount"
            tableMapping.ColumnMappings.Add("DateIn", "DateIn")
            tableMapping.ColumnMappings.Add("US100", "US100")
            tableMapping.ColumnMappings.Add("US50", "US50")
            tableMapping.ColumnMappings.Add("US20", "US20")
            tableMapping.ColumnMappings.Add("US10", "US10")
            tableMapping.ColumnMappings.Add("US5", "US5")
            tableMapping.ColumnMappings.Add("US1", "US1")
            tableMapping.ColumnMappings.Add("R100000", "R100000")
            tableMapping.ColumnMappings.Add("R50000", "R50000")
            tableMapping.ColumnMappings.Add("R20000", "R20000")
            tableMapping.ColumnMappings.Add("R10000", "R10000")
            tableMapping.ColumnMappings.Add("R5000", "R5000")
            tableMapping.ColumnMappings.Add("R2000", "R2000")
            tableMapping.ColumnMappings.Add("R1000", "R1000")
            tableMapping.ColumnMappings.Add("R500", "R500")
            tableMapping.ColumnMappings.Add("R100", "R100")
            tableMapping.ColumnMappings.Add("R50", "R50")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("US100T", "US100T")
            tableMapping.ColumnMappings.Add("US50T", "US50T")
            tableMapping.ColumnMappings.Add("US20T", "US20T")
            tableMapping.ColumnMappings.Add("US10T", "US10T")
            tableMapping.ColumnMappings.Add("US5T", "US5T")
            tableMapping.ColumnMappings.Add("US1T", "US1T")
            tableMapping.ColumnMappings.Add("R100000T", "R100000T")
            tableMapping.ColumnMappings.Add("R50000T", "R50000T")
            tableMapping.ColumnMappings.Add("R20000T", "R20000T")
            tableMapping.ColumnMappings.Add("R10000T", "R10000T")
            tableMapping.ColumnMappings.Add("R5000T", "R5000T")
            tableMapping.ColumnMappings.Add("R2000T", "R2000T")
            tableMapping.ColumnMappings.Add("R1000T", "R1000T")
            tableMapping.ColumnMappings.Add("R500T", "R500T")
            tableMapping.ColumnMappings.Add("R100T", "R100T")
            tableMapping.ColumnMappings.Add("R50T", "R50T")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [tblCashCount] WHERE (((@IsNull_US100 = 1 AND [US100] IS NULL) OR ([U"& _ 
                "S100] = @Original_US100)) AND ((@IsNull_US100T = 1 AND [US100T] IS NULL) OR ([US"& _ 
                "100T] = @Original_US100T)) AND ((@IsNull_US50 = 1 AND [US50] IS NULL) OR ([US50]"& _ 
                " = @Original_US50)) AND ((@IsNull_US50T = 1 AND [US50T] IS NULL) OR ([US50T] = @"& _ 
                "Original_US50T)) AND ((@IsNull_US20 = 1 AND [US20] IS NULL) OR ([US20] = @Origin"& _ 
                "al_US20)) AND ((@IsNull_US20T = 1 AND [US20T] IS NULL) OR ([US20T] = @Original_U"& _ 
                "S20T)) AND ((@IsNull_US10 = 1 AND [US10] IS NULL) OR ([US10] = @Original_US10)) "& _ 
                "AND ((@IsNull_US10T = 1 AND [US10T] IS NULL) OR ([US10T] = @Original_US10T)) AND"& _ 
                " ((@IsNull_US5 = 1 AND [US5] IS NULL) OR ([US5] = @Original_US5)) AND ((@IsNull_"& _ 
                "US5T = 1 AND [US5T] IS NULL) OR ([US5T] = @Original_US5T)) AND ((@IsNull_US1 = 1"& _ 
                " AND [US1] IS NULL) OR ([US1] = @Original_US1)) AND ((@IsNull_US1T = 1 AND [US1T"& _ 
                "] IS NULL) OR ([US1T] = @Original_US1T)) AND ((@IsNull_R100000 = 1 AND [R100000]"& _ 
                " IS NULL) OR ([R100000] = @Original_R100000)) AND ((@IsNull_R100000T = 1 AND [R1"& _ 
                "00000T] IS NULL) OR ([R100000T] = @Original_R100000T)) AND ((@IsNull_R50000 = 1 "& _ 
                "AND [R50000] IS NULL) OR ([R50000] = @Original_R50000)) AND ((@IsNull_R50000T = "& _ 
                "1 AND [R50000T] IS NULL) OR ([R50000T] = @Original_R50000T)) AND ((@IsNull_R2000"& _ 
                "0 = 1 AND [R20000] IS NULL) OR ([R20000] = @Original_R20000)) AND ((@IsNull_R200"& _ 
                "00T = 1 AND [R20000T] IS NULL) OR ([R20000T] = @Original_R20000T)) AND ((@IsNull"& _ 
                "_R10000 = 1 AND [R10000] IS NULL) OR ([R10000] = @Original_R10000)) AND ((@IsNul"& _ 
                "l_R10000T = 1 AND [R10000T] IS NULL) OR ([R10000T] = @Original_R10000T)) AND ((@"& _ 
                "IsNull_R5000 = 1 AND [R5000] IS NULL) OR ([R5000] = @Original_R5000)) AND ((@IsN"& _ 
                "ull_R5000T = 1 AND [R5000T] IS NULL) OR ([R5000T] = @Original_R5000T)) AND ((@Is"& _ 
                "Null_R2000 = 1 AND [R2000] IS NULL) OR ([R2000] = @Original_R2000)) AND ((@IsNul"& _ 
                "l_R2000T = 1 AND [R2000T] IS NULL) OR ([R2000T] = @Original_R2000T)) AND ((@IsNu"& _ 
                "ll_R1000 = 1 AND [R1000] IS NULL) OR ([R1000] = @Original_R1000)) AND ((@IsNull_"& _ 
                "R1000T = 1 AND [R1000T] IS NULL) OR ([R1000T] = @Original_R1000T)) AND ((@IsNull"& _ 
                "_R500 = 1 AND [R500] IS NULL) OR ([R500] = @Original_R500)) AND ((@IsNull_R500T "& _ 
                "= 1 AND [R500T] IS NULL) OR ([R500T] = @Original_R500T)) AND ((@IsNull_R100 = 1 "& _ 
                "AND [R100] IS NULL) OR ([R100] = @Original_R100)) AND ((@IsNull_R100T = 1 AND [R"& _ 
                "100T] IS NULL) OR ([R100T] = @Original_R100T)) AND ((@IsNull_R50 = 1 AND [R50] I"& _ 
                "S NULL) OR ([R50] = @Original_R50)) AND ((@IsNull_R50T = 1 AND [R50T] IS NULL) O"& _ 
                "R ([R50T] = @Original_R50T)) AND ([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US100", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US100", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US100", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US100", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US100T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US100T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US100T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US100T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US50", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US50", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US50", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US50", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US50T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US50T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US50T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US50T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US20", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US20", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US20", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US20", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US20T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US20T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US20T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US20T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US10", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US10", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US10", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US10", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US10T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US10T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US10T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US10T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US5T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US5T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US5T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US5T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US1T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US1T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US1T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US1T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R100000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100000", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R100000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100000", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R100000T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100000T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R100000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100000T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R50000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50000", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R50000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50000", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R50000T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50000T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R50000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50000T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R20000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R20000", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R20000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R20000", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R20000T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R20000T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R20000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R20000T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R10000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R10000", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R10000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R10000", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R10000T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R10000T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R10000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R10000T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R5000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R5000", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R5000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R5000", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R5000T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R5000T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R5000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R5000T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R2000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R2000", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R2000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R2000", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R2000T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R2000T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R2000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R2000T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R1000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R1000", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R1000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R1000", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R1000T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R1000T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R1000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R1000T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R500", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R500", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R500", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R500", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R500T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R500T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R500T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R500T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R100", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R100", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R100T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R100T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R50", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R50", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R50T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R50T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [tblCashCount] ([US100], [US100T], [US50], [US50T], [US20], [US20T], "& _ 
                "[US10], [US10T], [US5], [US5T], [US1], [US1T], [R100000], [R100000T], [R50000], "& _ 
                "[R50000T], [R20000], [R20000T], [R10000], [R10000T], [R5000], [R5000T], [R2000],"& _ 
                " [R2000T], [R1000], [R1000T], [R500], [R500T], [R100], [R100T], [R50], [R50T]) V"& _ 
                "ALUES (@US100, @US100T, @US50, @US50T, @US20, @US20T, @US10, @US10T, @US5, @US5T"& _ 
                ", @US1, @US1T, @R100000, @R100000T, @R50000, @R50000T, @R20000, @R20000T, @R1000"& _ 
                "0, @R10000T, @R5000, @R5000T, @R2000, @R2000T, @R1000, @R1000T, @R500, @R500T, @"& _ 
                "R100, @R100T, @R50, @R50T);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CONVERT (VARCHAR(11), DateIn, 106) AS DateIn"& _ 
                ", US100, US100T, US50, US50T, US20, US20T, US10, US10T, US5, US5T, US1, US1T, R1"& _ 
                "00000, R100000T, R50000, R50000T, R20000, R20000T, R10000, R10000T, R5000, R5000"& _ 
                "T, R2000, R2000T, R1000, R1000T, R500, R500T, R100, R100T, R50, R50T, ID FROM tb"& _ 
                "lCashCount WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US100", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US100", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US100T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US100T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US50", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US50", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US50T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US50T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US20", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US20", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US20T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US20T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US10", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US10", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US10T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US10T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US5T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US5T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US1T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US1T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R100000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R100000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R50000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R50000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R20000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R20000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R20000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R20000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R10000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R10000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R10000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R10000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R5000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R5000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R5000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R5000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R2000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R2000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R2000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R2000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R1000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R1000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R1000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R1000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R500", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R500", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R500T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R500T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R100", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R100T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R50", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R50T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [tblCashCount] SET [US100] = @US100, [US100T] = @US100T, [US50] = @US50, ["& _ 
                "US50T] = @US50T, [US20] = @US20, [US20T] = @US20T, [US10] = @US10, [US10T] = @US"& _ 
                "10T, [US5] = @US5, [US5T] = @US5T, [US1] = @US1, [US1T] = @US1T, [R100000] = @R1"& _ 
                "00000, [R100000T] = @R100000T, [R50000] = @R50000, [R50000T] = @R50000T, [R20000"& _ 
                "] = @R20000, [R20000T] = @R20000T, [R10000] = @R10000, [R10000T] = @R10000T, [R5"& _ 
                "000] = @R5000, [R5000T] = @R5000T, [R2000] = @R2000, [R2000T] = @R2000T, [R1000]"& _ 
                " = @R1000, [R1000T] = @R1000T, [R500] = @R500, [R500T] = @R500T, [R100] = @R100,"& _ 
                " [R100T] = @R100T, [R50] = @R50, [R50T] = @R50T WHERE (((@IsNull_US100 = 1 AND ["& _ 
                "US100] IS NULL) OR ([US100] = @Original_US100)) AND ((@IsNull_US100T = 1 AND [US"& _ 
                "100T] IS NULL) OR ([US100T] = @Original_US100T)) AND ((@IsNull_US50 = 1 AND [US5"& _ 
                "0] IS NULL) OR ([US50] = @Original_US50)) AND ((@IsNull_US50T = 1 AND [US50T] IS"& _ 
                " NULL) OR ([US50T] = @Original_US50T)) AND ((@IsNull_US20 = 1 AND [US20] IS NULL"& _ 
                ") OR ([US20] = @Original_US20)) AND ((@IsNull_US20T = 1 AND [US20T] IS NULL) OR "& _ 
                "([US20T] = @Original_US20T)) AND ((@IsNull_US10 = 1 AND [US10] IS NULL) OR ([US1"& _ 
                "0] = @Original_US10)) AND ((@IsNull_US10T = 1 AND [US10T] IS NULL) OR ([US10T] ="& _ 
                " @Original_US10T)) AND ((@IsNull_US5 = 1 AND [US5] IS NULL) OR ([US5] = @Origina"& _ 
                "l_US5)) AND ((@IsNull_US5T = 1 AND [US5T] IS NULL) OR ([US5T] = @Original_US5T))"& _ 
                " AND ((@IsNull_US1 = 1 AND [US1] IS NULL) OR ([US1] = @Original_US1)) AND ((@IsN"& _ 
                "ull_US1T = 1 AND [US1T] IS NULL) OR ([US1T] = @Original_US1T)) AND ((@IsNull_R10"& _ 
                "0000 = 1 AND [R100000] IS NULL) OR ([R100000] = @Original_R100000)) AND ((@IsNul"& _ 
                "l_R100000T = 1 AND [R100000T] IS NULL) OR ([R100000T] = @Original_R100000T)) AND"& _ 
                " ((@IsNull_R50000 = 1 AND [R50000] IS NULL) OR ([R50000] = @Original_R50000)) AN"& _ 
                "D ((@IsNull_R50000T = 1 AND [R50000T] IS NULL) OR ([R50000T] = @Original_R50000T"& _ 
                ")) AND ((@IsNull_R20000 = 1 AND [R20000] IS NULL) OR ([R20000] = @Original_R2000"& _ 
                "0)) AND ((@IsNull_R20000T = 1 AND [R20000T] IS NULL) OR ([R20000T] = @Original_R"& _ 
                "20000T)) AND ((@IsNull_R10000 = 1 AND [R10000] IS NULL) OR ([R10000] = @Original"& _ 
                "_R10000)) AND ((@IsNull_R10000T = 1 AND [R10000T] IS NULL) OR ([R10000T] = @Orig"& _ 
                "inal_R10000T)) AND ((@IsNull_R5000 = 1 AND [R5000] IS NULL) OR ([R5000] = @Origi"& _ 
                "nal_R5000)) AND ((@IsNull_R5000T = 1 AND [R5000T] IS NULL) OR ([R5000T] = @Origi"& _ 
                "nal_R5000T)) AND ((@IsNull_R2000 = 1 AND [R2000] IS NULL) OR ([R2000] = @Origina"& _ 
                "l_R2000)) AND ((@IsNull_R2000T = 1 AND [R2000T] IS NULL) OR ([R2000T] = @Origina"& _ 
                "l_R2000T)) AND ((@IsNull_R1000 = 1 AND [R1000] IS NULL) OR ([R1000] = @Original_"& _ 
                "R1000)) AND ((@IsNull_R1000T = 1 AND [R1000T] IS NULL) OR ([R1000T] = @Original_"& _ 
                "R1000T)) AND ((@IsNull_R500 = 1 AND [R500] IS NULL) OR ([R500] = @Original_R500)"& _ 
                ") AND ((@IsNull_R500T = 1 AND [R500T] IS NULL) OR ([R500T] = @Original_R500T)) A"& _ 
                "ND ((@IsNull_R100 = 1 AND [R100] IS NULL) OR ([R100] = @Original_R100)) AND ((@I"& _ 
                "sNull_R100T = 1 AND [R100T] IS NULL) OR ([R100T] = @Original_R100T)) AND ((@IsNu"& _ 
                "ll_R50 = 1 AND [R50] IS NULL) OR ([R50] = @Original_R50)) AND ((@IsNull_R50T = 1"& _ 
                " AND [R50T] IS NULL) OR ([R50T] = @Original_R50T)) AND ([ID] = @Original_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT CONVERT (VARCHAR(11), DateIn, 106) AS DateIn, US100, US100T, US50, US50T,"& _ 
                " US20, US20T, US10, US10T, US5, US5T, US1, US1T, R100000, R100000T, R50000, R500"& _ 
                "00T, R20000, R20000T, R10000, R10000T, R5000, R5000T, R2000, R2000T, R1000, R100"& _ 
                "0T, R500, R500T, R100, R100T, R50, R50T, ID FROM tblCashCount WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US100", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US100", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US100T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US100T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US50", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US50", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US50T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US50T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US20", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US20", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US20T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US20T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US10", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US10", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US10T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US10T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US5T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US5T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US1T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US1T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R100000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R100000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R50000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R50000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R20000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R20000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R20000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R20000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R10000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R10000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R10000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R10000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R5000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R5000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R5000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R5000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R2000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R2000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R2000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R2000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R1000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R1000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R1000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R1000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R500", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R500", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R500T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R500T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R100", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R100T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R50", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R50T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US100", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US100", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US100", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US100", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US100T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US100T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US100T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US100T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US50", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US50", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US50", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US50", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US50T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US50T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US50T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US50T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US20", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US20", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US20", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US20", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US20T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US20T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US20T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US20T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US10", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US10", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US10", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US10", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US10T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US10T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US10T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US10T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US5T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US5T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US5T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US5T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_US1T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US1T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_US1T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US1T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R100000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100000", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R100000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100000", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R100000T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100000T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R100000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100000T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R50000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50000", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R50000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50000", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R50000T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50000T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R50000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50000T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R20000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R20000", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R20000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R20000", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R20000T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R20000T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R20000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R20000T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R10000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R10000", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R10000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R10000", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R10000T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R10000T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R10000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R10000T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R5000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R5000", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R5000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R5000", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R5000T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R5000T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R5000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R5000T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R2000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R2000", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R2000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R2000", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R2000T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R2000T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R2000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R2000T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R1000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R1000", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R1000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R1000", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R1000T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R1000T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R1000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R1000T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R500", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R500", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R500", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R500", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R500T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R500T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R500T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R500T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R100", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R100", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R100T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R100T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R50", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R50", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_R50T", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50T", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R50T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50T", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CONVERT (VARCHAR(11), DateIn, 106) AS DateIn, US100, US100T, US50, US50T, "& _ 
                "US20, US20T, US10, US10T, US5, US5T, US1, US1T, R100000, R100000T, R50000, R5000"& _ 
                "0T, R20000, R20000T, R10000, R10000T, R5000, R5000T, R2000, R2000T, R1000, R1000"& _ 
                "T, R500, R500T, R100, R100T, R50, R50T, ID FROM tblCashCount"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CONVERT (VARCHAR(11), DateIn, 106) AS DateIn, US100, US100T, US50, US50T, "& _ 
                "US20, US20T, US10, US10T, US5, US5T, US1, US1T, R100000, R100000T, R50000, R5000"& _ 
                "0T, R20000, R20000T, R10000, R10000T, R5000, R5000T, R2000, R2000T, R1000, R1000"& _ 
                "T, R500, R500T, R100, R100T, R50, R50T, ID FROM tblCashCount"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Where CAST(CONVE"& _ 
                "RT(VARCHAR(10), DateIn, 1) AS DateTime) =CAST(CONVERT(VARCHAR(10), CAST(@DateIn "& _ 
                "AS DATETIME), 1) AS Datetime) Order by DateIn ASC"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateIn", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetCashCountNumber.tblCashCountDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetCashCountNumber.tblCashCountDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetCashCountNumber.tblCashCountDataTable = New DataSetCashCountNumber.tblCashCountDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DataSetCashCountNumber.tblCashCountDataTable, ByVal DateIn As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateIn,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function CashCountByDateIn(ByVal DateIn As Date) As DataSetCashCountNumber.tblCashCountDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateIn,Date)
            Dim dataTable As DataSetCashCountNumber.tblCashCountDataTable = New DataSetCashCountNumber.tblCashCountDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetCashCountNumber.tblCashCountDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetCashCountNumber) As Integer
            Return Me.Adapter.Update(dataSet, "tblCashCount")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_US100 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US100T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US50 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US50T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US20 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US20T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US10 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US10T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US5 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US5T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US1 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US1T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R100000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R100000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R50000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R50000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R20000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R20000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R10000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R10000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R5000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R5000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R2000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R2000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R1000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R1000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R500 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R500T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R100 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R100T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R50 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R50T As Global.System.Nullable(Of Long),  _
                    ByVal Original_ID As Long) As Integer
            If (Original_US100.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_US100.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Original_US100T.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_US100T.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_US50.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_US50.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_US50T.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_US50T.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_US20.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_US20.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_US20T.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_US20T.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_US10.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_US10.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_US10T.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_US10T.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_US5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_US5.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_US5T.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_US5T.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_US1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_US1.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_US1T.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_US1T.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_R100000.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_R100000.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_R100000T.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_R100000T.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_R50000.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_R50000.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_R50000T.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_R50000T.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_R20000.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_R20000.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_R20000T.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_R20000T.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_R10000.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_R10000.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_R10000T.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_R10000T.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_R5000.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_R5000.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_R5000T.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(Original_R5000T.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_R2000.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_R2000.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original_R2000T.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_R2000T.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_R1000.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(Original_R1000.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_R1000T.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(Original_R1000T.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_R500.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(Original_R500.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_R500T.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(Original_R500T.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_R100.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(Original_R100.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_R100T.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(Original_R100T.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_R50.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(Original_R50.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original_R50T.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(Original_R50T.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal US100 As Global.System.Nullable(Of Integer),  _
                    ByVal US100T As Global.System.Nullable(Of Long),  _
                    ByVal US50 As Global.System.Nullable(Of Integer),  _
                    ByVal US50T As Global.System.Nullable(Of Long),  _
                    ByVal US20 As Global.System.Nullable(Of Integer),  _
                    ByVal US20T As Global.System.Nullable(Of Long),  _
                    ByVal US10 As Global.System.Nullable(Of Integer),  _
                    ByVal US10T As Global.System.Nullable(Of Long),  _
                    ByVal US5 As Global.System.Nullable(Of Integer),  _
                    ByVal US5T As Global.System.Nullable(Of Long),  _
                    ByVal US1 As Global.System.Nullable(Of Integer),  _
                    ByVal US1T As Global.System.Nullable(Of Long),  _
                    ByVal R100000 As Global.System.Nullable(Of Integer),  _
                    ByVal R100000T As Global.System.Nullable(Of Long),  _
                    ByVal R50000 As Global.System.Nullable(Of Integer),  _
                    ByVal R50000T As Global.System.Nullable(Of Long),  _
                    ByVal R20000 As Global.System.Nullable(Of Integer),  _
                    ByVal R20000T As Global.System.Nullable(Of Long),  _
                    ByVal R10000 As Global.System.Nullable(Of Integer),  _
                    ByVal R10000T As Global.System.Nullable(Of Long),  _
                    ByVal R5000 As Global.System.Nullable(Of Integer),  _
                    ByVal R5000T As Global.System.Nullable(Of Long),  _
                    ByVal R2000 As Global.System.Nullable(Of Integer),  _
                    ByVal R2000T As Global.System.Nullable(Of Long),  _
                    ByVal R1000 As Global.System.Nullable(Of Integer),  _
                    ByVal R1000T As Global.System.Nullable(Of Long),  _
                    ByVal R500 As Global.System.Nullable(Of Integer),  _
                    ByVal R500T As Global.System.Nullable(Of Long),  _
                    ByVal R100 As Global.System.Nullable(Of Integer),  _
                    ByVal R100T As Global.System.Nullable(Of Long),  _
                    ByVal R50 As Global.System.Nullable(Of Integer),  _
                    ByVal R50T As Global.System.Nullable(Of Long)) As Integer
            If (US100.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(US100.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (US100T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(US100T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (US50.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(US50.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (US50T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(US50T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (US20.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(US20.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (US20T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(US20T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (US10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(US10.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (US10T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(US10T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (US5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(US5.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (US5T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(US5T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (US1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(US1.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (US1T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(US1T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (R100000.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(R100000.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (R100000T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(R100000T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (R50000.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(R50000.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (R50000T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(R50000T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (R20000.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(R20000.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (R20000T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(R20000T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (R10000.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(R10000.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (R10000T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(R10000T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (R5000.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(R5000.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (R5000T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(R5000T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (R2000.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(R2000.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (R2000T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(R2000T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (R1000.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(R1000.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (R1000T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(R1000T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (R500.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(R500.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (R500T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(R500T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (R100.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(R100.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (R100T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(R100T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (R50.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(R50.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (R50T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(R50T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal US100 As Global.System.Nullable(Of Integer),  _
                    ByVal US100T As Global.System.Nullable(Of Long),  _
                    ByVal US50 As Global.System.Nullable(Of Integer),  _
                    ByVal US50T As Global.System.Nullable(Of Long),  _
                    ByVal US20 As Global.System.Nullable(Of Integer),  _
                    ByVal US20T As Global.System.Nullable(Of Long),  _
                    ByVal US10 As Global.System.Nullable(Of Integer),  _
                    ByVal US10T As Global.System.Nullable(Of Long),  _
                    ByVal US5 As Global.System.Nullable(Of Integer),  _
                    ByVal US5T As Global.System.Nullable(Of Long),  _
                    ByVal US1 As Global.System.Nullable(Of Integer),  _
                    ByVal US1T As Global.System.Nullable(Of Long),  _
                    ByVal R100000 As Global.System.Nullable(Of Integer),  _
                    ByVal R100000T As Global.System.Nullable(Of Long),  _
                    ByVal R50000 As Global.System.Nullable(Of Integer),  _
                    ByVal R50000T As Global.System.Nullable(Of Long),  _
                    ByVal R20000 As Global.System.Nullable(Of Integer),  _
                    ByVal R20000T As Global.System.Nullable(Of Long),  _
                    ByVal R10000 As Global.System.Nullable(Of Integer),  _
                    ByVal R10000T As Global.System.Nullable(Of Long),  _
                    ByVal R5000 As Global.System.Nullable(Of Integer),  _
                    ByVal R5000T As Global.System.Nullable(Of Long),  _
                    ByVal R2000 As Global.System.Nullable(Of Integer),  _
                    ByVal R2000T As Global.System.Nullable(Of Long),  _
                    ByVal R1000 As Global.System.Nullable(Of Integer),  _
                    ByVal R1000T As Global.System.Nullable(Of Long),  _
                    ByVal R500 As Global.System.Nullable(Of Integer),  _
                    ByVal R500T As Global.System.Nullable(Of Long),  _
                    ByVal R100 As Global.System.Nullable(Of Integer),  _
                    ByVal R100T As Global.System.Nullable(Of Long),  _
                    ByVal R50 As Global.System.Nullable(Of Integer),  _
                    ByVal R50T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US100 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US100T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US50 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US50T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US20 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US20T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US10 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US10T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US5 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US5T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US1 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US1T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R100000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R100000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R50000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R50000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R20000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R20000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R10000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R10000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R5000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R5000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R2000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R2000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R1000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R1000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R500 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R500T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R100 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R100T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R50 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R50T As Global.System.Nullable(Of Long),  _
                    ByVal Original_ID As Long,  _
                    ByVal ID As Integer) As Integer
            If (US100.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(US100.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (US100T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(US100T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (US50.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(US50.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (US50T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(US50T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (US20.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(US20.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (US20T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(US20T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (US10.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(US10.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (US10T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(US10T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (US5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(US5.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (US5T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(US5T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (US1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(US1.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (US1T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(US1T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (R100000.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(R100000.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (R100000T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(R100000T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (R50000.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(R50000.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (R50000T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(R50000T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (R20000.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(R20000.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (R20000T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(R20000T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (R10000.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(R10000.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (R10000T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(R10000T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (R5000.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(R5000.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (R5000T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(R5000T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (R2000.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(R2000.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (R2000T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(R2000T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (R1000.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(R1000.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (R1000T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(R1000T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (R500.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(R500.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (R500T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(R500T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (R100.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(R100.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (R100T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(R100T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (R50.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(R50.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (R50T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(R50T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_US100.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_US100.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_US100T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_US100T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_US50.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_US50.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_US50T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_US50T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_US20.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_US20.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_US20T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_US20T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_US10.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_US10.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original_US10T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_US10T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_US5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_US5.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_US5T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_US5T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_US1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_US1.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_US1T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_US1T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_R100000.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_R100000.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_R100000T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_R100000T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_R50000.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_R50000.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original_R50000T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_R50000T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Original_R20000.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_R20000.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_R20000T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_R20000T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_R10000.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_R10000.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_R10000T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_R10000T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (Original_R5000.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_R5000.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (Original_R5000T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_R5000T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (Original_R2000.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_R2000.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (Original_R2000T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_R2000T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (Original_R1000.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_R1000.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            If (Original_R1000T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_R1000T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            End If
            If (Original_R500.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original_R500.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            If (Original_R500T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original_R500T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = Global.System.DBNull.Value
            End If
            If (Original_R100.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_R100.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            End If
            If (Original_R100T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original_R100T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            If (Original_R50.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(Original_R50.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = Global.System.DBNull.Value
            End If
            If (Original_R50T.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(Original_R50T.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_ID,Long)
            Me.Adapter.UpdateCommand.Parameters(97).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal US100 As Global.System.Nullable(Of Integer),  _
                    ByVal US100T As Global.System.Nullable(Of Long),  _
                    ByVal US50 As Global.System.Nullable(Of Integer),  _
                    ByVal US50T As Global.System.Nullable(Of Long),  _
                    ByVal US20 As Global.System.Nullable(Of Integer),  _
                    ByVal US20T As Global.System.Nullable(Of Long),  _
                    ByVal US10 As Global.System.Nullable(Of Integer),  _
                    ByVal US10T As Global.System.Nullable(Of Long),  _
                    ByVal US5 As Global.System.Nullable(Of Integer),  _
                    ByVal US5T As Global.System.Nullable(Of Long),  _
                    ByVal US1 As Global.System.Nullable(Of Integer),  _
                    ByVal US1T As Global.System.Nullable(Of Long),  _
                    ByVal R100000 As Global.System.Nullable(Of Integer),  _
                    ByVal R100000T As Global.System.Nullable(Of Long),  _
                    ByVal R50000 As Global.System.Nullable(Of Integer),  _
                    ByVal R50000T As Global.System.Nullable(Of Long),  _
                    ByVal R20000 As Global.System.Nullable(Of Integer),  _
                    ByVal R20000T As Global.System.Nullable(Of Long),  _
                    ByVal R10000 As Global.System.Nullable(Of Integer),  _
                    ByVal R10000T As Global.System.Nullable(Of Long),  _
                    ByVal R5000 As Global.System.Nullable(Of Integer),  _
                    ByVal R5000T As Global.System.Nullable(Of Long),  _
                    ByVal R2000 As Global.System.Nullable(Of Integer),  _
                    ByVal R2000T As Global.System.Nullable(Of Long),  _
                    ByVal R1000 As Global.System.Nullable(Of Integer),  _
                    ByVal R1000T As Global.System.Nullable(Of Long),  _
                    ByVal R500 As Global.System.Nullable(Of Integer),  _
                    ByVal R500T As Global.System.Nullable(Of Long),  _
                    ByVal R100 As Global.System.Nullable(Of Integer),  _
                    ByVal R100T As Global.System.Nullable(Of Long),  _
                    ByVal R50 As Global.System.Nullable(Of Integer),  _
                    ByVal R50T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US100 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US100T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US50 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US50T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US20 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US20T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US10 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US10T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US5 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US5T As Global.System.Nullable(Of Long),  _
                    ByVal Original_US1 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_US1T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R100000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R100000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R50000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R50000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R20000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R20000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R10000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R10000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R5000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R5000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R2000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R2000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R1000 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R1000T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R500 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R500T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R100 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R100T As Global.System.Nullable(Of Long),  _
                    ByVal Original_R50 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_R50T As Global.System.Nullable(Of Long),  _
                    ByVal Original_ID As Long) As Integer
            Return Me.Update(US100, US100T, US50, US50T, US20, US20T, US10, US10T, US5, US5T, US1, US1T, R100000, R100000T, R50000, R50000T, R20000, R20000T, R10000, R10000T, R5000, R5000T, R2000, R2000T, R1000, R1000T, R500, R500T, R100, R100T, R50, R50T, Original_US100, Original_US100T, Original_US50, Original_US50T, Original_US20, Original_US20T, Original_US10, Original_US10T, Original_US5, Original_US5T, Original_US1, Original_US1T, Original_R100000, Original_R100000T, Original_R50000, Original_R50000T, Original_R20000, Original_R20000T, Original_R10000, Original_R10000T, Original_R5000, Original_R5000T, Original_R2000, Original_R2000T, Original_R1000, Original_R1000T, Original_R500, Original_R500T, Original_R100, Original_R100T, Original_R50, Original_R50T, Original_ID, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblCashCountForDepartmentTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblCashCountForDepartment"
            tableMapping.ColumnMappings.Add("DateIn", "DateIn")
            tableMapping.ColumnMappings.Add("Users", "Users")
            tableMapping.ColumnMappings.Add("DateUpdate", "DateUpdate")
            tableMapping.ColumnMappings.Add("CASH_IN_DEPART", "CASH_IN_DEPART")
            tableMapping.ColumnMappings.Add("DEPARTMENT_NAME", "DEPARTMENT_NAME")
            tableMapping.ColumnMappings.Add("US100X", "US100X")
            tableMapping.ColumnMappings.Add("US100", "US100")
            tableMapping.ColumnMappings.Add("US100T", "US100T")
            tableMapping.ColumnMappings.Add("US50X", "US50X")
            tableMapping.ColumnMappings.Add("US50", "US50")
            tableMapping.ColumnMappings.Add("US50T", "US50T")
            tableMapping.ColumnMappings.Add("US20X", "US20X")
            tableMapping.ColumnMappings.Add("US20", "US20")
            tableMapping.ColumnMappings.Add("US20T", "US20T")
            tableMapping.ColumnMappings.Add("US10X", "US10X")
            tableMapping.ColumnMappings.Add("US10", "US10")
            tableMapping.ColumnMappings.Add("US10T", "US10T")
            tableMapping.ColumnMappings.Add("US5X", "US5X")
            tableMapping.ColumnMappings.Add("US5", "US5")
            tableMapping.ColumnMappings.Add("US5T", "US5T")
            tableMapping.ColumnMappings.Add("US1X", "US1X")
            tableMapping.ColumnMappings.Add("US1", "US1")
            tableMapping.ColumnMappings.Add("US1T", "US1T")
            tableMapping.ColumnMappings.Add("TotalUSD", "TotalUSD")
            tableMapping.ColumnMappings.Add("R100000X", "R100000X")
            tableMapping.ColumnMappings.Add("R100000", "R100000")
            tableMapping.ColumnMappings.Add("R100000T", "R100000T")
            tableMapping.ColumnMappings.Add("R50000X", "R50000X")
            tableMapping.ColumnMappings.Add("R50000", "R50000")
            tableMapping.ColumnMappings.Add("R50000T", "R50000T")
            tableMapping.ColumnMappings.Add("R20000X", "R20000X")
            tableMapping.ColumnMappings.Add("R20000", "R20000")
            tableMapping.ColumnMappings.Add("R20000T", "R20000T")
            tableMapping.ColumnMappings.Add("R10000X", "R10000X")
            tableMapping.ColumnMappings.Add("R10000", "R10000")
            tableMapping.ColumnMappings.Add("R10000T", "R10000T")
            tableMapping.ColumnMappings.Add("R5000X", "R5000X")
            tableMapping.ColumnMappings.Add("R5000", "R5000")
            tableMapping.ColumnMappings.Add("R5000T", "R5000T")
            tableMapping.ColumnMappings.Add("R2000X", "R2000X")
            tableMapping.ColumnMappings.Add("R2000", "R2000")
            tableMapping.ColumnMappings.Add("R2000T", "R2000T")
            tableMapping.ColumnMappings.Add("R1000X", "R1000X")
            tableMapping.ColumnMappings.Add("R1000", "R1000")
            tableMapping.ColumnMappings.Add("R1000T", "R1000T")
            tableMapping.ColumnMappings.Add("R500X", "R500X")
            tableMapping.ColumnMappings.Add("R500", "R500")
            tableMapping.ColumnMappings.Add("R500T", "R500T")
            tableMapping.ColumnMappings.Add("R100X", "R100X")
            tableMapping.ColumnMappings.Add("R100", "R100")
            tableMapping.ColumnMappings.Add("R100T", "R100T")
            tableMapping.ColumnMappings.Add("R50X", "R50X")
            tableMapping.ColumnMappings.Add("R50", "R50")
            tableMapping.ColumnMappings.Add("R50T", "R50T")
            tableMapping.ColumnMappings.Add("TotalRIEL", "TotalRIEL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [tblCashCountForDepartment] ([US100X], [US100], [US100T], [US50X], [U"& _ 
                "S50], [US50T], [US20X], [US20], [US20T], [US10X], [US10], [US10T], [US5X], [US5]"& _ 
                ", [US5T], [US1X], [US1], [US1T], [TotalUSD], [R100000X], [R100000], [R100000T], "& _ 
                "[R50000X], [R50000], [R50000T], [R20000X], [R20000], [R20000T], [R10000X], [R100"& _ 
                "00], [R10000T], [R5000X], [R5000], [R5000T], [R2000X], [R2000], [R2000T], [R1000"& _ 
                "X], [R1000], [R1000T], [R500X], [R500], [R500T], [R100X], [R100], [R100T], [R50X"& _ 
                "], [R50], [R50T], [TotalRIEL], [DateIn], [Users], [DateUpdate], [CASH_IN_DEPART]"& _ 
                ", [DEPARTMENT_NAME]) VALUES (@US100X, @US100, @US100T, @US50X, @US50, @US50T, @U"& _ 
                "S20X, @US20, @US20T, @US10X, @US10, @US10T, @US5X, @US5, @US5T, @US1X, @US1, @US"& _ 
                "1T, @TotalUSD, @R100000X, @R100000, @R100000T, @R50000X, @R50000, @R50000T, @R20"& _ 
                "000X, @R20000, @R20000T, @R10000X, @R10000, @R10000T, @R5000X, @R5000, @R5000T, "& _ 
                "@R2000X, @R2000, @R2000T, @R1000X, @R1000, @R1000T, @R500X, @R500, @R500T, @R100"& _ 
                "X, @R100, @R100T, @R50X, @R50, @R50T, @TotalRIEL, @DateIn, @Users, @DateUpdate, "& _ 
                "@CASH_IN_DEPART, @DEPARTMENT_NAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US100X", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US100X", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US100", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US100", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US100T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US100T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US50X", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US50X", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US50", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US50", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US50T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US50T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US20X", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US20X", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US20", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US20", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US20T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US20T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US10X", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US10X", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US10", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US10", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US10T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US10T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US5X", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US5X", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US5T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US5T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US1X", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US1X", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@US1T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "US1T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalUSD", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalUSD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R100000X", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100000X", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R100000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R100000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R50000X", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50000X", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R50000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R50000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R20000X", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R20000X", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R20000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R20000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R20000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R20000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R10000X", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R10000X", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R10000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R10000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R10000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R10000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R5000X", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R5000X", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R5000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R5000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R5000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R5000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R2000X", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R2000X", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R2000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R2000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R2000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R2000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R1000X", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R1000X", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R1000", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R1000", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R1000T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R1000T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R500X", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R500X", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R500", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R500", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R500T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R500T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R100X", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100X", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R100", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R100T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R100T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R50X", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50X", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R50", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R50T", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R50T", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalRIEL", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalRIEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateIn", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateIn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Users", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Users", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateUpdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateUpdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CASH_IN_DEPART", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CASH_IN_DEPART", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEPARTMENT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEPARTMENT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        US100X, US100, US100T, US50X, US50, US50T, US20X, US20, US20T, US10"& _ 
                "X, US10, US10T, US5X, US5, US5T, US1X, US1, US1T, TotalUSD, R100000X, R100000, R"& _ 
                "100000T, R50000X, R50000, R50000T, R20000X, R20000, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         R"& _ 
                "20000T, R10000X, R10000, R10000T, R5000X, R5000, R5000T, R2000X, R2000, R2000T, "& _ 
                "R1000X, R1000, R1000T, R500X, R500, R500T, R100X, R100, R100T, R50X, R50, R50T, "& _ 
                "TotalRIEL, DateIn, Users, DateUpdate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CASH_IN_DEPART,"& _ 
                " DEPARTMENT_NAME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tblCashCountForDepartment"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        US100X, US100, US100T, US50X, US50, US50T, US20X, US20, US20T, US10"& _ 
                "X, US10, US10T, US5X, US5, US5T, US1X, US1, US1T, TotalUSD, R100000X, R100000, R"& _ 
                "100000T, R50000X, R50000, R50000T, R20000X, R20000, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         R"& _ 
                "20000T, R10000X, R10000, R10000T, R5000X, R5000, R5000T, R2000X, R2000, R2000T, "& _ 
                "R1000X, R1000, R1000T, R500X, R500, R500T, R100X, R100, R100T, R50X, R50, R50T, "& _ 
                "TotalRIEL, DateIn, Users, DateUpdate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CASH_IN_DEPART,"& _ 
                " DEPARTMENT_NAME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tblCashCountForDepartment"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE DateIn=@DateI"& _ 
                "n and CASH_IN_DEPART=@CASH_IN_DEPART"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateIn", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DateIn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CASH_IN_DEPART", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "CASH_IN_DEPART", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        US100X, US100, US100T, US50X, US50, US50T, US20X, US20, US20T, US10"& _ 
                "X, US10, US10T, US5X, US5, US5T, US1X, US1, US1T, TotalUSD, R100000X, R100000, R"& _ 
                "100000T, R50000X, R50000, R50000T, R20000X, R20000, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         R"& _ 
                "20000T, R10000X, R10000, R10000T, R5000X, R5000, R5000T, R2000X, R2000, R2000T, "& _ 
                "R1000X, R1000, R1000T, R500X, R500, R500T, R100X, R100, R100T, R50X, R50, R50T, "& _ 
                "TotalRIEL, DateIn, Users, DateUpdate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CASH_IN_DEPART,"& _ 
                " DEPARTMENT_NAME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tblCashCountForDepartment"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (DateIn betwe"& _ 
                "en @DFrom and @DTo) and CASH_IN_DEPART=@CASH_IN_DEPART"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DateIn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DateIn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CASH_IN_DEPART", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "CASH_IN_DEPART", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetCashCountNumber.tblCashCountForDepartmentDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetCashCountNumber.tblCashCountForDepartmentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetCashCountNumber.tblCashCountForDepartmentDataTable = New DataSetCashCountNumber.tblCashCountForDepartmentDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DataSetCashCountNumber.tblCashCountForDepartmentDataTable, ByVal DateIn As Global.System.Nullable(Of Date), ByVal CASH_IN_DEPART As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DateIn.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateIn.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CASH_IN_DEPART.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CASH_IN_DEPART.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDept(ByVal DateIn As Global.System.Nullable(Of Date), ByVal CASH_IN_DEPART As Global.System.Nullable(Of Decimal)) As DataSetCashCountNumber.tblCashCountForDepartmentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DateIn.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateIn.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CASH_IN_DEPART.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CASH_IN_DEPART.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetCashCountNumber.tblCashCountForDepartmentDataTable = New DataSetCashCountNumber.tblCashCountForDepartmentDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DataSetCashCountNumber.tblCashCountForDepartmentDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal CASH_IN_DEPART As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CASH_IN_DEPART.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CASH_IN_DEPART.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectCashCountByDepDateToDate(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal CASH_IN_DEPART As Global.System.Nullable(Of Decimal)) As DataSetCashCountNumber.tblCashCountForDepartmentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CASH_IN_DEPART.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CASH_IN_DEPART.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetCashCountNumber.tblCashCountForDepartmentDataTable = New DataSetCashCountNumber.tblCashCountForDepartmentDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetCashCountNumber.tblCashCountForDepartmentDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetCashCountNumber) As Integer
            Return Me.Adapter.Update(dataSet, "tblCashCountForDepartment")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal US100X As String,  _
                    ByVal US100 As Global.System.Nullable(Of Integer),  _
                    ByVal US100T As Global.System.Nullable(Of Long),  _
                    ByVal US50X As String,  _
                    ByVal US50 As Global.System.Nullable(Of Integer),  _
                    ByVal US50T As Global.System.Nullable(Of Long),  _
                    ByVal US20X As String,  _
                    ByVal US20 As Global.System.Nullable(Of Integer),  _
                    ByVal US20T As Global.System.Nullable(Of Long),  _
                    ByVal US10X As String,  _
                    ByVal US10 As Global.System.Nullable(Of Integer),  _
                    ByVal US10T As Global.System.Nullable(Of Long),  _
                    ByVal US5X As String,  _
                    ByVal US5 As Global.System.Nullable(Of Integer),  _
                    ByVal US5T As Global.System.Nullable(Of Long),  _
                    ByVal US1X As String,  _
                    ByVal US1 As Global.System.Nullable(Of Integer),  _
                    ByVal US1T As Global.System.Nullable(Of Long),  _
                    ByVal TotalUSD As Global.System.Nullable(Of Long),  _
                    ByVal R100000X As String,  _
                    ByVal R100000 As Global.System.Nullable(Of Integer),  _
                    ByVal R100000T As Global.System.Nullable(Of Long),  _
                    ByVal R50000X As String,  _
                    ByVal R50000 As Global.System.Nullable(Of Integer),  _
                    ByVal R50000T As Global.System.Nullable(Of Long),  _
                    ByVal R20000X As String,  _
                    ByVal R20000 As Global.System.Nullable(Of Integer),  _
                    ByVal R20000T As Global.System.Nullable(Of Long),  _
                    ByVal R10000X As String,  _
                    ByVal R10000 As Global.System.Nullable(Of Integer),  _
                    ByVal R10000T As Global.System.Nullable(Of Long),  _
                    ByVal R5000X As String,  _
                    ByVal R5000 As Global.System.Nullable(Of Integer),  _
                    ByVal R5000T As Global.System.Nullable(Of Long),  _
                    ByVal R2000X As String,  _
                    ByVal R2000 As Global.System.Nullable(Of Integer),  _
                    ByVal R2000T As Global.System.Nullable(Of Long),  _
                    ByVal R1000X As String,  _
                    ByVal R1000 As Global.System.Nullable(Of Integer),  _
                    ByVal R1000T As Global.System.Nullable(Of Long),  _
                    ByVal R500X As String,  _
                    ByVal R500 As Global.System.Nullable(Of Integer),  _
                    ByVal R500T As Global.System.Nullable(Of Long),  _
                    ByVal R100X As String,  _
                    ByVal R100 As Global.System.Nullable(Of Integer),  _
                    ByVal R100T As Global.System.Nullable(Of Long),  _
                    ByVal R50X As String,  _
                    ByVal R50 As Global.System.Nullable(Of Integer),  _
                    ByVal R50T As Global.System.Nullable(Of Long),  _
                    ByVal TotalRIEL As Global.System.Nullable(Of Long),  _
                    ByVal DateIn As Global.System.Nullable(Of Date),  _
                    ByVal Users As String,  _
                    ByVal DateUpdate As Global.System.Nullable(Of Date),  _
                    ByVal CASH_IN_DEPART As Global.System.Nullable(Of Decimal),  _
                    ByVal DEPARTMENT_NAME As String) As Integer
            If (US100X Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(US100X,String)
            End If
            If (US100.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(US100.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (US100T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(US100T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (US50X Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(US50X,String)
            End If
            If (US50.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(US50.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (US50T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(US50T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (US20X Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(US20X,String)
            End If
            If (US20.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(US20.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (US20T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(US20T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (US10X Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(US10X,String)
            End If
            If (US10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(US10.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (US10T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(US10T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (US5X Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(US5X,String)
            End If
            If (US5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(US5.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (US5T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(US5T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (US1X Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(US1X,String)
            End If
            If (US1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(US1.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (US1T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(US1T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (TotalUSD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(TotalUSD.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (R100000X Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(R100000X,String)
            End If
            If (R100000.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(R100000.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (R100000T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(R100000T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (R50000X Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(R50000X,String)
            End If
            If (R50000.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(R50000.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (R50000T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(R50000T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (R20000X Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(R20000X,String)
            End If
            If (R20000.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(R20000.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (R20000T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(R20000T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (R10000X Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(R10000X,String)
            End If
            If (R10000.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(R10000.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (R10000T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(R10000T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (R5000X Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(R5000X,String)
            End If
            If (R5000.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(R5000.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (R5000T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(R5000T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (R2000X Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(R2000X,String)
            End If
            If (R2000.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(R2000.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (R2000T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(R2000T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (R1000X Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(R1000X,String)
            End If
            If (R1000.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(R1000.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (R1000T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(R1000T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (R500X Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(R500X,String)
            End If
            If (R500.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(R500.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (R500T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(R500T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (R100X Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(R100X,String)
            End If
            If (R100.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(R100.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (R100T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(R100T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (R50X Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(R50X,String)
            End If
            If (R50.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(R50.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (R50T.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(R50T.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (TotalRIEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(TotalRIEL.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (DateIn.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(DateIn.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Users Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(Users,String)
            End If
            If (DateUpdate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(DateUpdate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (CASH_IN_DEPART.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(CASH_IN_DEPART.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (DEPARTMENT_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(DEPARTMENT_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
