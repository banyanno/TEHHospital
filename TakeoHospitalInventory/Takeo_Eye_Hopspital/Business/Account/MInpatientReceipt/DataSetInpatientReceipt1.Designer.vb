'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8794
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetInpatientReceipt"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetInpatientReceipt
    Inherits Global.System.Data.DataSet
    
    Private tabletblPatientReceipt As tblPatientReceiptDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tblPatientReceipt")) Is Nothing) Then
                MyBase.Tables.Add(New tblPatientReceiptDataTable(ds.Tables("tblPatientReceipt")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblPatientReceipt() As tblPatientReceiptDataTable
        Get
            Return Me.tabletblPatientReceipt
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSetInpatientReceipt = CType(MyBase.Clone,DataSetInpatientReceipt)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tblPatientReceipt")) Is Nothing) Then
                MyBase.Tables.Add(New tblPatientReceiptDataTable(ds.Tables("tblPatientReceipt")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletblPatientReceipt = CType(MyBase.Tables("tblPatientReceipt"),tblPatientReceiptDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblPatientReceipt) Is Nothing) Then
                Me.tabletblPatientReceipt.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetInpatientReceipt"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetInpatientReceipt.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletblPatientReceipt = New tblPatientReceiptDataTable
        MyBase.Tables.Add(Me.tabletblPatientReceipt)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblPatientReceipt() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetInpatientReceipt = New DataSetInpatientReceipt
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub tblPatientReceiptRowChangeEventHandler(ByVal sender As Object, ByVal e As tblPatientReceiptRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblPatientReceiptDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblPatientReceiptRow)
        
        Private columnHN As Global.System.Data.DataColumn
        
        Private columnPatientName As Global.System.Data.DataColumn
        
        Private columnReceiptNo As Global.System.Data.DataColumn
        
        Private columnCashUSD As Global.System.Data.DataColumn
        
        Private columnCashRiel As Global.System.Data.DataColumn
        
        Private columnTotalUSD As Global.System.Data.DataColumn
        
        Private columnTotalRiel As Global.System.Data.DataColumn
        
        Private columnDateIn As Global.System.Data.DataColumn
        
        Private columnCashierIn As Global.System.Data.DataColumn
        
        Private columnAmoutWord As Global.System.Data.DataColumn
        
        Private columnOperationFeeRiel As Global.System.Data.DataColumn
        
        Private columnOperationFeeUSD As Global.System.Data.DataColumn
        
        Private columnArtificialEyeFeeRiel As Global.System.Data.DataColumn
        
        Private columnArtificialEyeFeeUSD As Global.System.Data.DataColumn
        
        Private columnOtherFeeRiel As Global.System.Data.DataColumn
        
        Private columnOtherFeeUSD As Global.System.Data.DataColumn
        
        Private columnConOP As Global.System.Data.DataColumn
        
        Private columnConAE As Global.System.Data.DataColumn
        
        Private columnConOT As Global.System.Data.DataColumn
        
        Private columnOperation As Global.System.Data.DataColumn
        
        Private columnHN1 As Global.System.Data.DataColumn
        
        Private columnIsDonation As Global.System.Data.DataColumn
        
        Private columnDonationID As Global.System.Data.DataColumn
        
        Private columnDonationName As Global.System.Data.DataColumn
        
        Private columnDonationPay As Global.System.Data.DataColumn
        
        Private columnCashTotal As Global.System.Data.DataColumn
        
        Private columnHosFee As Global.System.Data.DataColumn
        
        Private columnFullFeeRiel As Global.System.Data.DataColumn
        
        Private columnFullFeeUSD As Global.System.Data.DataColumn
        
        Private columnTIME_CREATE As Global.System.Data.DataColumn
        
        Private columnTIME_ISSUE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblPatientReceipt"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashUSDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashUSD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashRielColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashRiel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalUSDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalUSD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalRielColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalRiel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateInColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateIn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashierInColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashierIn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmoutWordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmoutWord
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OperationFeeRielColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOperationFeeRiel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OperationFeeUSDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOperationFeeUSD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArtificialEyeFeeRielColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArtificialEyeFeeRiel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArtificialEyeFeeUSDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArtificialEyeFeeUSD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherFeeRielColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOtherFeeRiel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherFeeUSDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOtherFeeUSD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConAEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConAE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OperationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOperation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HN1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnHN1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDonationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDonation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DonationIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDonationID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DonationNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDonationName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DonationPayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDonationPay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HosFeeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHosFee
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FullFeeRielColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFullFeeRiel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FullFeeUSDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFullFeeUSD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIME_CREATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIME_CREATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIME_ISSUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIME_ISSUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblPatientReceiptRow
            Get
                Return CType(Me.Rows(index),tblPatientReceiptRow)
            End Get
        End Property
        
        Public Event tblPatientReceiptRowChanging As tblPatientReceiptRowChangeEventHandler
        
        Public Event tblPatientReceiptRowChanged As tblPatientReceiptRowChangeEventHandler
        
        Public Event tblPatientReceiptRowDeleting As tblPatientReceiptRowChangeEventHandler
        
        Public Event tblPatientReceiptRowDeleted As tblPatientReceiptRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblPatientReceiptRow(ByVal row As tblPatientReceiptRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblPatientReceiptRow( _
                    ByVal HN As Long,  _
                    ByVal PatientName As String,  _
                    ByVal ReceiptNo As Long,  _
                    ByVal CashUSD As Double,  _
                    ByVal CashRiel As Double,  _
                    ByVal TotalUSD As Double,  _
                    ByVal TotalRiel As Double,  _
                    ByVal DateIn As Date,  _
                    ByVal CashierIn As String,  _
                    ByVal AmoutWord As String,  _
                    ByVal OperationFeeRiel As Double,  _
                    ByVal OperationFeeUSD As Double,  _
                    ByVal ArtificialEyeFeeRiel As Double,  _
                    ByVal ArtificialEyeFeeUSD As Double,  _
                    ByVal OtherFeeRiel As Double,  _
                    ByVal OtherFeeUSD As Double,  _
                    ByVal ConOP As String,  _
                    ByVal ConAE As String,  _
                    ByVal ConOT As String,  _
                    ByVal Operation As String,  _
                    ByVal HN1 As Decimal,  _
                    ByVal IsDonation As Boolean,  _
                    ByVal DonationID As Decimal,  _
                    ByVal DonationName As String,  _
                    ByVal DonationPay As Double,  _
                    ByVal CashTotal As Double,  _
                    ByVal HosFee As Double,  _
                    ByVal FullFeeRiel As Double,  _
                    ByVal FullFeeUSD As Double,  _
                    ByVal TIME_CREATE As String,  _
                    ByVal TIME_ISSUE As String) As tblPatientReceiptRow
            Dim rowtblPatientReceiptRow As tblPatientReceiptRow = CType(Me.NewRow,tblPatientReceiptRow)
            Dim columnValuesArray() As Object = New Object() {HN, PatientName, ReceiptNo, CashUSD, CashRiel, TotalUSD, TotalRiel, DateIn, CashierIn, AmoutWord, OperationFeeRiel, OperationFeeUSD, ArtificialEyeFeeRiel, ArtificialEyeFeeUSD, OtherFeeRiel, OtherFeeUSD, ConOP, ConAE, ConOT, Operation, HN1, IsDonation, DonationID, DonationName, DonationPay, CashTotal, HosFee, FullFeeRiel, FullFeeUSD, TIME_CREATE, TIME_ISSUE}
            rowtblPatientReceiptRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblPatientReceiptRow)
            Return rowtblPatientReceiptRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblPatientReceiptDataTable = CType(MyBase.Clone,tblPatientReceiptDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblPatientReceiptDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnHN = MyBase.Columns("HN")
            Me.columnPatientName = MyBase.Columns("PatientName")
            Me.columnReceiptNo = MyBase.Columns("ReceiptNo")
            Me.columnCashUSD = MyBase.Columns("CashUSD")
            Me.columnCashRiel = MyBase.Columns("CashRiel")
            Me.columnTotalUSD = MyBase.Columns("TotalUSD")
            Me.columnTotalRiel = MyBase.Columns("TotalRiel")
            Me.columnDateIn = MyBase.Columns("DateIn")
            Me.columnCashierIn = MyBase.Columns("CashierIn")
            Me.columnAmoutWord = MyBase.Columns("AmoutWord")
            Me.columnOperationFeeRiel = MyBase.Columns("OperationFeeRiel")
            Me.columnOperationFeeUSD = MyBase.Columns("OperationFeeUSD")
            Me.columnArtificialEyeFeeRiel = MyBase.Columns("ArtificialEyeFeeRiel")
            Me.columnArtificialEyeFeeUSD = MyBase.Columns("ArtificialEyeFeeUSD")
            Me.columnOtherFeeRiel = MyBase.Columns("OtherFeeRiel")
            Me.columnOtherFeeUSD = MyBase.Columns("OtherFeeUSD")
            Me.columnConOP = MyBase.Columns("ConOP")
            Me.columnConAE = MyBase.Columns("ConAE")
            Me.columnConOT = MyBase.Columns("ConOT")
            Me.columnOperation = MyBase.Columns("Operation")
            Me.columnHN1 = MyBase.Columns("HN1")
            Me.columnIsDonation = MyBase.Columns("IsDonation")
            Me.columnDonationID = MyBase.Columns("DonationID")
            Me.columnDonationName = MyBase.Columns("DonationName")
            Me.columnDonationPay = MyBase.Columns("DonationPay")
            Me.columnCashTotal = MyBase.Columns("CashTotal")
            Me.columnHosFee = MyBase.Columns("HosFee")
            Me.columnFullFeeRiel = MyBase.Columns("FullFeeRiel")
            Me.columnFullFeeUSD = MyBase.Columns("FullFeeUSD")
            Me.columnTIME_CREATE = MyBase.Columns("TIME_CREATE")
            Me.columnTIME_ISSUE = MyBase.Columns("TIME_ISSUE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnHN = New Global.System.Data.DataColumn("HN", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHN)
            Me.columnPatientName = New Global.System.Data.DataColumn("PatientName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientName)
            Me.columnReceiptNo = New Global.System.Data.DataColumn("ReceiptNo", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptNo)
            Me.columnCashUSD = New Global.System.Data.DataColumn("CashUSD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashUSD)
            Me.columnCashRiel = New Global.System.Data.DataColumn("CashRiel", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashRiel)
            Me.columnTotalUSD = New Global.System.Data.DataColumn("TotalUSD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalUSD)
            Me.columnTotalRiel = New Global.System.Data.DataColumn("TotalRiel", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalRiel)
            Me.columnDateIn = New Global.System.Data.DataColumn("DateIn", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateIn)
            Me.columnCashierIn = New Global.System.Data.DataColumn("CashierIn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashierIn)
            Me.columnAmoutWord = New Global.System.Data.DataColumn("AmoutWord", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmoutWord)
            Me.columnOperationFeeRiel = New Global.System.Data.DataColumn("OperationFeeRiel", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOperationFeeRiel)
            Me.columnOperationFeeUSD = New Global.System.Data.DataColumn("OperationFeeUSD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOperationFeeUSD)
            Me.columnArtificialEyeFeeRiel = New Global.System.Data.DataColumn("ArtificialEyeFeeRiel", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArtificialEyeFeeRiel)
            Me.columnArtificialEyeFeeUSD = New Global.System.Data.DataColumn("ArtificialEyeFeeUSD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArtificialEyeFeeUSD)
            Me.columnOtherFeeRiel = New Global.System.Data.DataColumn("OtherFeeRiel", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOtherFeeRiel)
            Me.columnOtherFeeUSD = New Global.System.Data.DataColumn("OtherFeeUSD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOtherFeeUSD)
            Me.columnConOP = New Global.System.Data.DataColumn("ConOP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConOP)
            Me.columnConAE = New Global.System.Data.DataColumn("ConAE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConAE)
            Me.columnConOT = New Global.System.Data.DataColumn("ConOT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConOT)
            Me.columnOperation = New Global.System.Data.DataColumn("Operation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOperation)
            Me.columnHN1 = New Global.System.Data.DataColumn("HN1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHN1)
            Me.columnIsDonation = New Global.System.Data.DataColumn("IsDonation", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDonation)
            Me.columnDonationID = New Global.System.Data.DataColumn("DonationID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDonationID)
            Me.columnDonationName = New Global.System.Data.DataColumn("DonationName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDonationName)
            Me.columnDonationPay = New Global.System.Data.DataColumn("DonationPay", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDonationPay)
            Me.columnCashTotal = New Global.System.Data.DataColumn("CashTotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashTotal)
            Me.columnHosFee = New Global.System.Data.DataColumn("HosFee", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHosFee)
            Me.columnFullFeeRiel = New Global.System.Data.DataColumn("FullFeeRiel", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFullFeeRiel)
            Me.columnFullFeeUSD = New Global.System.Data.DataColumn("FullFeeUSD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFullFeeUSD)
            Me.columnTIME_CREATE = New Global.System.Data.DataColumn("TIME_CREATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIME_CREATE)
            Me.columnTIME_ISSUE = New Global.System.Data.DataColumn("TIME_ISSUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIME_ISSUE)
            Me.columnHN.AllowDBNull = false
            Me.columnPatientName.MaxLength = 500
            Me.columnReceiptNo.AllowDBNull = false
            Me.columnCashierIn.MaxLength = 200
            Me.columnAmoutWord.MaxLength = 2000
            Me.columnConOP.MaxLength = 1
            Me.columnConAE.MaxLength = 1
            Me.columnConOT.MaxLength = 1
            Me.columnOperation.MaxLength = 8000
            Me.columnHN1.AllowDBNull = false
            Me.columnHN1.Caption = "HN"
            Me.columnDonationName.MaxLength = 50
            Me.columnTIME_CREATE.MaxLength = 50
            Me.columnTIME_ISSUE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblPatientReceiptRow() As tblPatientReceiptRow
            Return CType(Me.NewRow,tblPatientReceiptRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblPatientReceiptRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblPatientReceiptRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblPatientReceiptRowChangedEvent) Is Nothing) Then
                RaiseEvent tblPatientReceiptRowChanged(Me, New tblPatientReceiptRowChangeEvent(CType(e.Row,tblPatientReceiptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblPatientReceiptRowChangingEvent) Is Nothing) Then
                RaiseEvent tblPatientReceiptRowChanging(Me, New tblPatientReceiptRowChangeEvent(CType(e.Row,tblPatientReceiptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblPatientReceiptRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblPatientReceiptRowDeleted(Me, New tblPatientReceiptRowChangeEvent(CType(e.Row,tblPatientReceiptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblPatientReceiptRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblPatientReceiptRowDeleting(Me, New tblPatientReceiptRowChangeEvent(CType(e.Row,tblPatientReceiptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblPatientReceiptRow(ByVal row As tblPatientReceiptRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetInpatientReceipt = New DataSetInpatientReceipt
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblPatientReceiptDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblPatientReceiptRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblPatientReceipt As tblPatientReceiptDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblPatientReceipt = CType(Me.Table,tblPatientReceiptDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HN() As Long
            Get
                Return CType(Me(Me.tabletblPatientReceipt.HNColumn),Long)
            End Get
            Set
                Me(Me.tabletblPatientReceipt.HNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.PatientNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PatientName' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.PatientNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptNo() As Long
            Get
                Return CType(Me(Me.tabletblPatientReceipt.ReceiptNoColumn),Long)
            End Get
            Set
                Me(Me.tabletblPatientReceipt.ReceiptNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CashUSD() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.CashUSDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CashUSD' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.CashUSDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CashRiel() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.CashRielColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CashRiel' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.CashRielColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalUSD() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.TotalUSDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalUSD' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.TotalUSDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalRiel() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.TotalRielColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalRiel' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.TotalRielColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateIn() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.DateInColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateIn' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.DateInColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CashierIn() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.CashierInColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CashierIn' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.CashierInColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AmoutWord() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.AmoutWordColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmoutWord' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.AmoutWordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OperationFeeRiel() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.OperationFeeRielColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OperationFeeRiel' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.OperationFeeRielColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OperationFeeUSD() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.OperationFeeUSDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OperationFeeUSD' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.OperationFeeUSDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArtificialEyeFeeRiel() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.ArtificialEyeFeeRielColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArtificialEyeFeeRiel' in table 'tblPatientReceipt' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.ArtificialEyeFeeRielColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArtificialEyeFeeUSD() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.ArtificialEyeFeeUSDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArtificialEyeFeeUSD' in table 'tblPatientReceipt' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.ArtificialEyeFeeUSDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OtherFeeRiel() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.OtherFeeRielColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OtherFeeRiel' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.OtherFeeRielColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OtherFeeUSD() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.OtherFeeUSDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OtherFeeUSD' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.OtherFeeUSDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConOP() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.ConOPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConOP' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.ConOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConAE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.ConAEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConAE' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.ConAEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConOT() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.ConOTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConOT' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.ConOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Operation() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.OperationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Operation' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.OperationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HN1() As Decimal
            Get
                Return CType(Me(Me.tabletblPatientReceipt.HN1Column),Decimal)
            End Get
            Set
                Me(Me.tabletblPatientReceipt.HN1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDonation() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.IsDonationColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsDonation' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.IsDonationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DonationID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.DonationIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DonationID' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.DonationIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DonationName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.DonationNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DonationName' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.DonationNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DonationPay() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.DonationPayColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DonationPay' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.DonationPayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CashTotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.CashTotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CashTotal' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.CashTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HosFee() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.HosFeeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HosFee' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.HosFeeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FullFeeRiel() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.FullFeeRielColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FullFeeRiel' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.FullFeeRielColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FullFeeUSD() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.FullFeeUSDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FullFeeUSD' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.FullFeeUSDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIME_CREATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.TIME_CREATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIME_CREATE' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.TIME_CREATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIME_ISSUE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPatientReceipt.TIME_ISSUEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIME_ISSUE' in table 'tblPatientReceipt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPatientReceipt.TIME_ISSUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPatientNameNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.PatientNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPatientNameNull()
            Me(Me.tabletblPatientReceipt.PatientNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCashUSDNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.CashUSDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCashUSDNull()
            Me(Me.tabletblPatientReceipt.CashUSDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCashRielNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.CashRielColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCashRielNull()
            Me(Me.tabletblPatientReceipt.CashRielColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalUSDNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.TotalUSDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalUSDNull()
            Me(Me.tabletblPatientReceipt.TotalUSDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalRielNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.TotalRielColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalRielNull()
            Me(Me.tabletblPatientReceipt.TotalRielColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateInNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.DateInColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateInNull()
            Me(Me.tabletblPatientReceipt.DateInColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCashierInNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.CashierInColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCashierInNull()
            Me(Me.tabletblPatientReceipt.CashierInColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmoutWordNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.AmoutWordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmoutWordNull()
            Me(Me.tabletblPatientReceipt.AmoutWordColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOperationFeeRielNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.OperationFeeRielColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOperationFeeRielNull()
            Me(Me.tabletblPatientReceipt.OperationFeeRielColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOperationFeeUSDNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.OperationFeeUSDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOperationFeeUSDNull()
            Me(Me.tabletblPatientReceipt.OperationFeeUSDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArtificialEyeFeeRielNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.ArtificialEyeFeeRielColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArtificialEyeFeeRielNull()
            Me(Me.tabletblPatientReceipt.ArtificialEyeFeeRielColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArtificialEyeFeeUSDNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.ArtificialEyeFeeUSDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArtificialEyeFeeUSDNull()
            Me(Me.tabletblPatientReceipt.ArtificialEyeFeeUSDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherFeeRielNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.OtherFeeRielColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherFeeRielNull()
            Me(Me.tabletblPatientReceipt.OtherFeeRielColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherFeeUSDNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.OtherFeeUSDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherFeeUSDNull()
            Me(Me.tabletblPatientReceipt.OtherFeeUSDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConOPNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.ConOPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConOPNull()
            Me(Me.tabletblPatientReceipt.ConOPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConAENull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.ConAEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConAENull()
            Me(Me.tabletblPatientReceipt.ConAEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConOTNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.ConOTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConOTNull()
            Me(Me.tabletblPatientReceipt.ConOTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOperationNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.OperationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOperationNull()
            Me(Me.tabletblPatientReceipt.OperationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsDonationNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.IsDonationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsDonationNull()
            Me(Me.tabletblPatientReceipt.IsDonationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDonationIDNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.DonationIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDonationIDNull()
            Me(Me.tabletblPatientReceipt.DonationIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDonationNameNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.DonationNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDonationNameNull()
            Me(Me.tabletblPatientReceipt.DonationNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDonationPayNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.DonationPayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDonationPayNull()
            Me(Me.tabletblPatientReceipt.DonationPayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCashTotalNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.CashTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCashTotalNull()
            Me(Me.tabletblPatientReceipt.CashTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHosFeeNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.HosFeeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHosFeeNull()
            Me(Me.tabletblPatientReceipt.HosFeeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFullFeeRielNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.FullFeeRielColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFullFeeRielNull()
            Me(Me.tabletblPatientReceipt.FullFeeRielColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFullFeeUSDNull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.FullFeeUSDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFullFeeUSDNull()
            Me(Me.tabletblPatientReceipt.FullFeeUSDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIME_CREATENull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.TIME_CREATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIME_CREATENull()
            Me(Me.tabletblPatientReceipt.TIME_CREATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIME_ISSUENull() As Boolean
            Return Me.IsNull(Me.tabletblPatientReceipt.TIME_ISSUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIME_ISSUENull()
            Me(Me.tabletblPatientReceipt.TIME_ISSUEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblPatientReceiptRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblPatientReceiptRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblPatientReceiptRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblPatientReceiptRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSetInpatientReceiptTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblPatientReceiptTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblPatientReceipt"
            tableMapping.ColumnMappings.Add("PatientName", "PatientName")
            tableMapping.ColumnMappings.Add("ReceiptNo", "ReceiptNo")
            tableMapping.ColumnMappings.Add("CashUSD", "CashUSD")
            tableMapping.ColumnMappings.Add("CashRiel", "CashRiel")
            tableMapping.ColumnMappings.Add("TotalUSD", "TotalUSD")
            tableMapping.ColumnMappings.Add("TotalRiel", "TotalRiel")
            tableMapping.ColumnMappings.Add("DateIn", "DateIn")
            tableMapping.ColumnMappings.Add("CashierIn", "CashierIn")
            tableMapping.ColumnMappings.Add("AmoutWord", "AmoutWord")
            tableMapping.ColumnMappings.Add("OperationFeeRiel", "OperationFeeRiel")
            tableMapping.ColumnMappings.Add("OperationFeeUSD", "OperationFeeUSD")
            tableMapping.ColumnMappings.Add("ArtificialEyeFeeRiel", "ArtificialEyeFeeRiel")
            tableMapping.ColumnMappings.Add("ArtificialEyeFeeUSD", "ArtificialEyeFeeUSD")
            tableMapping.ColumnMappings.Add("OtherFeeRiel", "OtherFeeRiel")
            tableMapping.ColumnMappings.Add("OtherFeeUSD", "OtherFeeUSD")
            tableMapping.ColumnMappings.Add("ConOP", "ConOP")
            tableMapping.ColumnMappings.Add("ConAE", "ConAE")
            tableMapping.ColumnMappings.Add("ConOT", "ConOT")
            tableMapping.ColumnMappings.Add("Operation", "Operation")
            tableMapping.ColumnMappings.Add("HN", "HN1")
            tableMapping.ColumnMappings.Add("IsDonation", "IsDonation")
            tableMapping.ColumnMappings.Add("DonationID", "DonationID")
            tableMapping.ColumnMappings.Add("DonationName", "DonationName")
            tableMapping.ColumnMappings.Add("DonationPay", "DonationPay")
            tableMapping.ColumnMappings.Add("CashTotal", "CashTotal")
            tableMapping.ColumnMappings.Add("HosFee", "HosFee")
            tableMapping.ColumnMappings.Add("FullFeeRiel", "FullFeeRiel")
            tableMapping.ColumnMappings.Add("FullFeeUSD", "FullFeeUSD")
            tableMapping.ColumnMappings.Add("TIME_CREATE", "TIME_CREATE")
            tableMapping.ColumnMappings.Add("TIME_ISSUE", "TIME_ISSUE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        HN, PatientName, ReceiptNo, CashUSD, CashRiel, TotalUSD, TotalRiel,"& _ 
                " DateIn, CashierIn, AmoutWord, OperationFeeRiel, OperationFeeUSD, ArtificialEyeF"& _ 
                "eeRiel, ArtificialEyeFeeUSD, OtherFeeRiel, OtherFeeUSD, ConOP, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "          ConAE, ConOT, Operation, IsDonation, DonationID, DonationName, Donatio"& _ 
                "nPay, CashTotal, HosFee, FullFeeRiel, FullFeeUSD, TIME_CREATE, TIME_ISSUE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM "& _ 
                "           tblPatientReceipt"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetInpatientReceipt.tblPatientReceiptDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetInpatientReceipt.tblPatientReceiptDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetInpatientReceipt.tblPatientReceiptDataTable = New DataSetInpatientReceipt.tblPatientReceiptDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
