'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8825
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSOutPatientReport"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSOutPatientReport
    Inherits Global.System.Data.DataSet
    
    Private tableDataTable1 As DataTable1DataTable
    
    Private tableTblOtherNewPatient As TblOtherNewPatientDataTable
    
    Private tableTblOtherOldPatient As TblOtherOldPatientDataTable
    
    Private tableV_NewOutpatientDetail As V_NewOutpatientDetailDataTable
    
    Private tableV_NewOutpatientDetail1 As V_NewOutpatientDetail1DataTable
    
    Private tableTblVA As TblVADataTable
    
    Private tableTblReferTo As TblReferToDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DataTable1")) Is Nothing) Then
                MyBase.Tables.Add(New DataTable1DataTable(ds.Tables("DataTable1")))
            End If
            If (Not (ds.Tables("TblOtherNewPatient")) Is Nothing) Then
                MyBase.Tables.Add(New TblOtherNewPatientDataTable(ds.Tables("TblOtherNewPatient")))
            End If
            If (Not (ds.Tables("TblOtherOldPatient")) Is Nothing) Then
                MyBase.Tables.Add(New TblOtherOldPatientDataTable(ds.Tables("TblOtherOldPatient")))
            End If
            If (Not (ds.Tables("V_NewOutpatientDetail")) Is Nothing) Then
                MyBase.Tables.Add(New V_NewOutpatientDetailDataTable(ds.Tables("V_NewOutpatientDetail")))
            End If
            If (Not (ds.Tables("V_NewOutpatientDetail1")) Is Nothing) Then
                MyBase.Tables.Add(New V_NewOutpatientDetail1DataTable(ds.Tables("V_NewOutpatientDetail1")))
            End If
            If (Not (ds.Tables("TblVA")) Is Nothing) Then
                MyBase.Tables.Add(New TblVADataTable(ds.Tables("TblVA")))
            End If
            If (Not (ds.Tables("TblReferTo")) Is Nothing) Then
                MyBase.Tables.Add(New TblReferToDataTable(ds.Tables("TblReferTo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataTable1() As DataTable1DataTable
        Get
            Return Me.tableDataTable1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TblOtherNewPatient() As TblOtherNewPatientDataTable
        Get
            Return Me.tableTblOtherNewPatient
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TblOtherOldPatient() As TblOtherOldPatientDataTable
        Get
            Return Me.tableTblOtherOldPatient
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_NewOutpatientDetail() As V_NewOutpatientDetailDataTable
        Get
            Return Me.tableV_NewOutpatientDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_NewOutpatientDetail1() As V_NewOutpatientDetail1DataTable
        Get
            Return Me.tableV_NewOutpatientDetail1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TblVA() As TblVADataTable
        Get
            Return Me.tableTblVA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TblReferTo() As TblReferToDataTable
        Get
            Return Me.tableTblReferTo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSOutPatientReport = CType(MyBase.Clone,DSOutPatientReport)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DataTable1")) Is Nothing) Then
                MyBase.Tables.Add(New DataTable1DataTable(ds.Tables("DataTable1")))
            End If
            If (Not (ds.Tables("TblOtherNewPatient")) Is Nothing) Then
                MyBase.Tables.Add(New TblOtherNewPatientDataTable(ds.Tables("TblOtherNewPatient")))
            End If
            If (Not (ds.Tables("TblOtherOldPatient")) Is Nothing) Then
                MyBase.Tables.Add(New TblOtherOldPatientDataTable(ds.Tables("TblOtherOldPatient")))
            End If
            If (Not (ds.Tables("V_NewOutpatientDetail")) Is Nothing) Then
                MyBase.Tables.Add(New V_NewOutpatientDetailDataTable(ds.Tables("V_NewOutpatientDetail")))
            End If
            If (Not (ds.Tables("V_NewOutpatientDetail1")) Is Nothing) Then
                MyBase.Tables.Add(New V_NewOutpatientDetail1DataTable(ds.Tables("V_NewOutpatientDetail1")))
            End If
            If (Not (ds.Tables("TblVA")) Is Nothing) Then
                MyBase.Tables.Add(New TblVADataTable(ds.Tables("TblVA")))
            End If
            If (Not (ds.Tables("TblReferTo")) Is Nothing) Then
                MyBase.Tables.Add(New TblReferToDataTable(ds.Tables("TblReferTo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDataTable1 = CType(MyBase.Tables("DataTable1"),DataTable1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataTable1) Is Nothing) Then
                Me.tableDataTable1.InitVars
            End If
        End If
        Me.tableTblOtherNewPatient = CType(MyBase.Tables("TblOtherNewPatient"),TblOtherNewPatientDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTblOtherNewPatient) Is Nothing) Then
                Me.tableTblOtherNewPatient.InitVars
            End If
        End If
        Me.tableTblOtherOldPatient = CType(MyBase.Tables("TblOtherOldPatient"),TblOtherOldPatientDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTblOtherOldPatient) Is Nothing) Then
                Me.tableTblOtherOldPatient.InitVars
            End If
        End If
        Me.tableV_NewOutpatientDetail = CType(MyBase.Tables("V_NewOutpatientDetail"),V_NewOutpatientDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_NewOutpatientDetail) Is Nothing) Then
                Me.tableV_NewOutpatientDetail.InitVars
            End If
        End If
        Me.tableV_NewOutpatientDetail1 = CType(MyBase.Tables("V_NewOutpatientDetail1"),V_NewOutpatientDetail1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_NewOutpatientDetail1) Is Nothing) Then
                Me.tableV_NewOutpatientDetail1.InitVars
            End If
        End If
        Me.tableTblVA = CType(MyBase.Tables("TblVA"),TblVADataTable)
        If (initTable = true) Then
            If (Not (Me.tableTblVA) Is Nothing) Then
                Me.tableTblVA.InitVars
            End If
        End If
        Me.tableTblReferTo = CType(MyBase.Tables("TblReferTo"),TblReferToDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTblReferTo) Is Nothing) Then
                Me.tableTblReferTo.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSOutPatientReport"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSOutPatientReport.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDataTable1 = New DataTable1DataTable
        MyBase.Tables.Add(Me.tableDataTable1)
        Me.tableTblOtherNewPatient = New TblOtherNewPatientDataTable
        MyBase.Tables.Add(Me.tableTblOtherNewPatient)
        Me.tableTblOtherOldPatient = New TblOtherOldPatientDataTable
        MyBase.Tables.Add(Me.tableTblOtherOldPatient)
        Me.tableV_NewOutpatientDetail = New V_NewOutpatientDetailDataTable
        MyBase.Tables.Add(Me.tableV_NewOutpatientDetail)
        Me.tableV_NewOutpatientDetail1 = New V_NewOutpatientDetail1DataTable
        MyBase.Tables.Add(Me.tableV_NewOutpatientDetail1)
        Me.tableTblVA = New TblVADataTable
        MyBase.Tables.Add(Me.tableTblVA)
        Me.tableTblReferTo = New TblReferToDataTable
        MyBase.Tables.Add(Me.tableTblReferTo)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataTable1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTblOtherNewPatient() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTblOtherOldPatient() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_NewOutpatientDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_NewOutpatientDetail1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTblVA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTblReferTo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSOutPatientReport = New DSOutPatientReport
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DataTable1RowChangeEventHandler(ByVal sender As Object, ByVal e As DataTable1RowChangeEvent)
    
    Public Delegate Sub TblOtherNewPatientRowChangeEventHandler(ByVal sender As Object, ByVal e As TblOtherNewPatientRowChangeEvent)
    
    Public Delegate Sub TblOtherOldPatientRowChangeEventHandler(ByVal sender As Object, ByVal e As TblOtherOldPatientRowChangeEvent)
    
    Public Delegate Sub V_NewOutpatientDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As V_NewOutpatientDetailRowChangeEvent)
    
    Public Delegate Sub V_NewOutpatientDetail1RowChangeEventHandler(ByVal sender As Object, ByVal e As V_NewOutpatientDetail1RowChangeEvent)
    
    Public Delegate Sub TblVARowChangeEventHandler(ByVal sender As Object, ByVal e As TblVARowChangeEvent)
    
    Public Delegate Sub TblReferToRowChangeEventHandler(ByVal sender As Object, ByVal e As TblReferToRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataTable1DataTable
        Inherits Global.System.Data.TypedTableBase(Of DataTable1Row)
        
        Private columnagerang As Global.System.Data.DataColumn
        
        Private columnmale As Global.System.Data.DataColumn
        
        Private columnfemale As Global.System.Data.DataColumn
        
        Private columnDiagnosis As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataTable1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property agerangColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnagerang
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property maleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property femaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfemale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataTable1Row
            Get
                Return CType(Me.Rows(index),DataTable1Row)
            End Get
        End Property
        
        Public Event DataTable1RowChanging As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowChanged As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowDeleting As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowDeleted As DataTable1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataTable1Row(ByVal row As DataTable1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataTable1Row(ByVal agerang As String, ByVal male As Integer, ByVal female As Integer, ByVal Diagnosis As String) As DataTable1Row
            Dim rowDataTable1Row As DataTable1Row = CType(Me.NewRow,DataTable1Row)
            Dim columnValuesArray() As Object = New Object() {agerang, male, female, Diagnosis}
            rowDataTable1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataTable1Row)
            Return rowDataTable1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataTable1DataTable = CType(MyBase.Clone,DataTable1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataTable1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnagerang = MyBase.Columns("agerang")
            Me.columnmale = MyBase.Columns("male")
            Me.columnfemale = MyBase.Columns("female")
            Me.columnDiagnosis = MyBase.Columns("Diagnosis")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnagerang = New Global.System.Data.DataColumn("agerang", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnagerang)
            Me.columnmale = New Global.System.Data.DataColumn("male", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmale)
            Me.columnfemale = New Global.System.Data.DataColumn("female", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfemale)
            Me.columnDiagnosis = New Global.System.Data.DataColumn("Diagnosis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiagnosis)
            Me.columnagerang.ReadOnly = true
            Me.columnagerang.MaxLength = 5
            Me.columnmale.ReadOnly = true
            Me.columnfemale.ReadOnly = true
            Me.columnDiagnosis.ReadOnly = true
            Me.columnDiagnosis.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataTable1Row() As DataTable1Row
            Return CType(Me.NewRow,DataTable1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataTable1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataTable1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataTable1RowChangedEvent) Is Nothing) Then
                RaiseEvent DataTable1RowChanged(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataTable1RowChangingEvent) Is Nothing) Then
                RaiseEvent DataTable1RowChanging(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataTable1RowDeletedEvent) Is Nothing) Then
                RaiseEvent DataTable1RowDeleted(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataTable1RowDeletingEvent) Is Nothing) Then
                RaiseEvent DataTable1RowDeleting(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataTable1Row(ByVal row As DataTable1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOutPatientReport = New DSOutPatientReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataTable1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TblOtherNewPatientDataTable
        Inherits Global.System.Data.TypedTableBase(Of TblOtherNewPatientRow)
        
        Private columnPatientNo As Global.System.Data.DataColumn
        
        Private columnNameKhmer As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnOther As Global.System.Data.DataColumn
        
        Private columnProvince As Global.System.Data.DataColumn
        
        Private columnDistrict As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TblOtherNewPatient"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameKhmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameKhmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOther
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TblOtherNewPatientRow
            Get
                Return CType(Me.Rows(index),TblOtherNewPatientRow)
            End Get
        End Property
        
        Public Event TblOtherNewPatientRowChanging As TblOtherNewPatientRowChangeEventHandler
        
        Public Event TblOtherNewPatientRowChanged As TblOtherNewPatientRowChangeEventHandler
        
        Public Event TblOtherNewPatientRowDeleting As TblOtherNewPatientRowChangeEventHandler
        
        Public Event TblOtherNewPatientRowDeleted As TblOtherNewPatientRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTblOtherNewPatientRow(ByVal row As TblOtherNewPatientRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTblOtherNewPatientRow(ByVal PatientNo As Decimal, ByVal NameKhmer As String, ByVal Age As Decimal, ByVal Sex As String, ByVal Other As String, ByVal Province As String, ByVal District As String) As TblOtherNewPatientRow
            Dim rowTblOtherNewPatientRow As TblOtherNewPatientRow = CType(Me.NewRow,TblOtherNewPatientRow)
            Dim columnValuesArray() As Object = New Object() {PatientNo, NameKhmer, Age, Sex, Other, Province, District}
            rowTblOtherNewPatientRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTblOtherNewPatientRow)
            Return rowTblOtherNewPatientRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPatientNo(ByVal PatientNo As Decimal) As TblOtherNewPatientRow
            Return CType(Me.Rows.Find(New Object() {PatientNo}),TblOtherNewPatientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TblOtherNewPatientDataTable = CType(MyBase.Clone,TblOtherNewPatientDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TblOtherNewPatientDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPatientNo = MyBase.Columns("PatientNo")
            Me.columnNameKhmer = MyBase.Columns("NameKhmer")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnOther = MyBase.Columns("Other")
            Me.columnProvince = MyBase.Columns("Province")
            Me.columnDistrict = MyBase.Columns("District")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPatientNo = New Global.System.Data.DataColumn("PatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientNo)
            Me.columnNameKhmer = New Global.System.Data.DataColumn("NameKhmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameKhmer)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnOther = New Global.System.Data.DataColumn("Other", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOther)
            Me.columnProvince = New Global.System.Data.DataColumn("Province", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvince)
            Me.columnDistrict = New Global.System.Data.DataColumn("District", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistrict)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPatientNo}, true))
            Me.columnPatientNo.AllowDBNull = false
            Me.columnPatientNo.Unique = true
            Me.columnNameKhmer.MaxLength = 50
            Me.columnSex.MaxLength = 1
            Me.columnOther.MaxLength = 50
            Me.columnProvince.MaxLength = 50
            Me.columnDistrict.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTblOtherNewPatientRow() As TblOtherNewPatientRow
            Return CType(Me.NewRow,TblOtherNewPatientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TblOtherNewPatientRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TblOtherNewPatientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TblOtherNewPatientRowChangedEvent) Is Nothing) Then
                RaiseEvent TblOtherNewPatientRowChanged(Me, New TblOtherNewPatientRowChangeEvent(CType(e.Row,TblOtherNewPatientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TblOtherNewPatientRowChangingEvent) Is Nothing) Then
                RaiseEvent TblOtherNewPatientRowChanging(Me, New TblOtherNewPatientRowChangeEvent(CType(e.Row,TblOtherNewPatientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TblOtherNewPatientRowDeletedEvent) Is Nothing) Then
                RaiseEvent TblOtherNewPatientRowDeleted(Me, New TblOtherNewPatientRowChangeEvent(CType(e.Row,TblOtherNewPatientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TblOtherNewPatientRowDeletingEvent) Is Nothing) Then
                RaiseEvent TblOtherNewPatientRowDeleting(Me, New TblOtherNewPatientRowChangeEvent(CType(e.Row,TblOtherNewPatientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTblOtherNewPatientRow(ByVal row As TblOtherNewPatientRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOutPatientReport = New DSOutPatientReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TblOtherNewPatientDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TblOtherOldPatientDataTable
        Inherits Global.System.Data.TypedTableBase(Of TblOtherOldPatientRow)
        
        Private columnPatientNo As Global.System.Data.DataColumn
        
        Private columnNameKhmer As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnOther As Global.System.Data.DataColumn
        
        Private columnProvince As Global.System.Data.DataColumn
        
        Private columnDistrict As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TblOtherOldPatient"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameKhmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameKhmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOther
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TblOtherOldPatientRow
            Get
                Return CType(Me.Rows(index),TblOtherOldPatientRow)
            End Get
        End Property
        
        Public Event TblOtherOldPatientRowChanging As TblOtherOldPatientRowChangeEventHandler
        
        Public Event TblOtherOldPatientRowChanged As TblOtherOldPatientRowChangeEventHandler
        
        Public Event TblOtherOldPatientRowDeleting As TblOtherOldPatientRowChangeEventHandler
        
        Public Event TblOtherOldPatientRowDeleted As TblOtherOldPatientRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTblOtherOldPatientRow(ByVal row As TblOtherOldPatientRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTblOtherOldPatientRow(ByVal PatientNo As Decimal, ByVal NameKhmer As String, ByVal Age As Decimal, ByVal Sex As String, ByVal Other As String, ByVal Province As String, ByVal District As String) As TblOtherOldPatientRow
            Dim rowTblOtherOldPatientRow As TblOtherOldPatientRow = CType(Me.NewRow,TblOtherOldPatientRow)
            Dim columnValuesArray() As Object = New Object() {PatientNo, NameKhmer, Age, Sex, Other, Province, District}
            rowTblOtherOldPatientRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTblOtherOldPatientRow)
            Return rowTblOtherOldPatientRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPatientNo(ByVal PatientNo As Decimal) As TblOtherOldPatientRow
            Return CType(Me.Rows.Find(New Object() {PatientNo}),TblOtherOldPatientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TblOtherOldPatientDataTable = CType(MyBase.Clone,TblOtherOldPatientDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TblOtherOldPatientDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPatientNo = MyBase.Columns("PatientNo")
            Me.columnNameKhmer = MyBase.Columns("NameKhmer")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnOther = MyBase.Columns("Other")
            Me.columnProvince = MyBase.Columns("Province")
            Me.columnDistrict = MyBase.Columns("District")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPatientNo = New Global.System.Data.DataColumn("PatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientNo)
            Me.columnNameKhmer = New Global.System.Data.DataColumn("NameKhmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameKhmer)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnOther = New Global.System.Data.DataColumn("Other", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOther)
            Me.columnProvince = New Global.System.Data.DataColumn("Province", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvince)
            Me.columnDistrict = New Global.System.Data.DataColumn("District", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistrict)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPatientNo}, true))
            Me.columnPatientNo.AllowDBNull = false
            Me.columnPatientNo.Unique = true
            Me.columnNameKhmer.MaxLength = 50
            Me.columnSex.MaxLength = 1
            Me.columnOther.MaxLength = 50
            Me.columnProvince.MaxLength = 50
            Me.columnDistrict.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTblOtherOldPatientRow() As TblOtherOldPatientRow
            Return CType(Me.NewRow,TblOtherOldPatientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TblOtherOldPatientRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TblOtherOldPatientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TblOtherOldPatientRowChangedEvent) Is Nothing) Then
                RaiseEvent TblOtherOldPatientRowChanged(Me, New TblOtherOldPatientRowChangeEvent(CType(e.Row,TblOtherOldPatientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TblOtherOldPatientRowChangingEvent) Is Nothing) Then
                RaiseEvent TblOtherOldPatientRowChanging(Me, New TblOtherOldPatientRowChangeEvent(CType(e.Row,TblOtherOldPatientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TblOtherOldPatientRowDeletedEvent) Is Nothing) Then
                RaiseEvent TblOtherOldPatientRowDeleted(Me, New TblOtherOldPatientRowChangeEvent(CType(e.Row,TblOtherOldPatientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TblOtherOldPatientRowDeletingEvent) Is Nothing) Then
                RaiseEvent TblOtherOldPatientRowDeleting(Me, New TblOtherOldPatientRowChangeEvent(CType(e.Row,TblOtherOldPatientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTblOtherOldPatientRow(ByVal row As TblOtherOldPatientRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOutPatientReport = New DSOutPatientReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TblOtherOldPatientDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_NewOutpatientDetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of V_NewOutpatientDetailRow)
        
        Private columnNewOutPatientNo As Global.System.Data.DataColumn
        
        Private columnPatientNo As Global.System.Data.DataColumn
        
        Private columnOlePatientNo As Global.System.Data.DataColumn
        
        Private columnReceiptNo As Global.System.Data.DataColumn
        
        Private columnNameEng As Global.System.Data.DataColumn
        
        Private columnNameKhmer As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnPatientFee As Global.System.Data.DataColumn
        
        Private columnPatientDolar As Global.System.Data.DataColumn
        
        Private columnDiagnosis As Global.System.Data.DataColumn
        
        Private columnPrescribed As Global.System.Data.DataColumn
        
        Private columnDispensed As Global.System.Data.DataColumn
        
        Private columnHearing As Global.System.Data.DataColumn
        
        Private columnUnderstand As Global.System.Data.DataColumn
        
        Private columnSeeing As Global.System.Data.DataColumn
        
        Private columnPhysical As Global.System.Data.DataColumn
        
        Private columnOther As Global.System.Data.DataColumn
        
        Private columnCreateDate As Global.System.Data.DataColumn
        
        Private columnTypeDiagnosis As Global.System.Data.DataColumn
        
        Private columnDeleteOption As Global.System.Data.DataColumn
        
        Private columnVAStatus As Global.System.Data.DataColumn
        
        Private columnAchieve As Global.System.Data.DataColumn
        
        Private columnMale As Global.System.Data.DataColumn
        
        Private columnFemale As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnComBindRefferal As Global.System.Data.DataColumn
        
        Private columnDeleteNote As Global.System.Data.DataColumn
        
        Private columnTelephone As Global.System.Data.DataColumn
        
        Private columnOccupation As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_NewOutpatientDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewOutPatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewOutPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OlePatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOlePatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameEngColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameEng
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameKhmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameKhmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientFeeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientFee
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrescribedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrescribed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DispensedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDispensed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HearingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHearing
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnderstandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnderstand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeeingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeeing
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhysicalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhysical
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOther
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeDiagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeDiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeleteOptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeleteOption
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VAStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVAStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AchieveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAchieve
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FemaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComBindRefferalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComBindRefferal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeleteNoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeleteNote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelephoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelephone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_NewOutpatientDetailRow
            Get
                Return CType(Me.Rows(index),V_NewOutpatientDetailRow)
            End Get
        End Property
        
        Public Event V_NewOutpatientDetailRowChanging As V_NewOutpatientDetailRowChangeEventHandler
        
        Public Event V_NewOutpatientDetailRowChanged As V_NewOutpatientDetailRowChangeEventHandler
        
        Public Event V_NewOutpatientDetailRowDeleting As V_NewOutpatientDetailRowChangeEventHandler
        
        Public Event V_NewOutpatientDetailRowDeleted As V_NewOutpatientDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_NewOutpatientDetailRow(ByVal row As V_NewOutpatientDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_NewOutpatientDetailRow( _
                    ByVal NewOutPatientNo As Decimal,  _
                    ByVal PatientNo As Decimal,  _
                    ByVal OlePatientNo As Decimal,  _
                    ByVal ReceiptNo As Decimal,  _
                    ByVal NameEng As String,  _
                    ByVal NameKhmer As String,  _
                    ByVal Age As Decimal,  _
                    ByVal Sex As String,  _
                    ByVal Address As String,  _
                    ByVal PatientFee As Double,  _
                    ByVal PatientDolar As Double,  _
                    ByVal Diagnosis As String,  _
                    ByVal Prescribed As Boolean,  _
                    ByVal Dispensed As Boolean,  _
                    ByVal Hearing As Boolean,  _
                    ByVal Understand As Boolean,  _
                    ByVal Seeing As Boolean,  _
                    ByVal Physical As Boolean,  _
                    ByVal Other As String,  _
                    ByVal CreateDate As Date,  _
                    ByVal TypeDiagnosis As Boolean,  _
                    ByVal DeleteOption As Boolean,  _
                    ByVal VAStatus As Boolean,  _
                    ByVal Achieve As Boolean,  _
                    ByVal Male As String,  _
                    ByVal Female As String,  _
                    ByVal Status As Boolean,  _
                    ByVal ComBindRefferal As String,  _
                    ByVal DeleteNote As String,  _
                    ByVal Telephone As String,  _
                    ByVal Occupation As String) As V_NewOutpatientDetailRow
            Dim rowV_NewOutpatientDetailRow As V_NewOutpatientDetailRow = CType(Me.NewRow,V_NewOutpatientDetailRow)
            Dim columnValuesArray() As Object = New Object() {NewOutPatientNo, PatientNo, OlePatientNo, ReceiptNo, NameEng, NameKhmer, Age, Sex, Address, PatientFee, PatientDolar, Diagnosis, Prescribed, Dispensed, Hearing, Understand, Seeing, Physical, Other, CreateDate, TypeDiagnosis, DeleteOption, VAStatus, Achieve, Male, Female, Status, ComBindRefferal, DeleteNote, Telephone, Occupation}
            rowV_NewOutpatientDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowV_NewOutpatientDetailRow)
            Return rowV_NewOutpatientDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNewOutPatientNo(ByVal NewOutPatientNo As Decimal) As V_NewOutpatientDetailRow
            Return CType(Me.Rows.Find(New Object() {NewOutPatientNo}),V_NewOutpatientDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As V_NewOutpatientDetailDataTable = CType(MyBase.Clone,V_NewOutpatientDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New V_NewOutpatientDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNewOutPatientNo = MyBase.Columns("NewOutPatientNo")
            Me.columnPatientNo = MyBase.Columns("PatientNo")
            Me.columnOlePatientNo = MyBase.Columns("OlePatientNo")
            Me.columnReceiptNo = MyBase.Columns("ReceiptNo")
            Me.columnNameEng = MyBase.Columns("NameEng")
            Me.columnNameKhmer = MyBase.Columns("NameKhmer")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnPatientFee = MyBase.Columns("PatientFee")
            Me.columnPatientDolar = MyBase.Columns("PatientDolar")
            Me.columnDiagnosis = MyBase.Columns("Diagnosis")
            Me.columnPrescribed = MyBase.Columns("Prescribed")
            Me.columnDispensed = MyBase.Columns("Dispensed")
            Me.columnHearing = MyBase.Columns("Hearing")
            Me.columnUnderstand = MyBase.Columns("Understand")
            Me.columnSeeing = MyBase.Columns("Seeing")
            Me.columnPhysical = MyBase.Columns("Physical")
            Me.columnOther = MyBase.Columns("Other")
            Me.columnCreateDate = MyBase.Columns("CreateDate")
            Me.columnTypeDiagnosis = MyBase.Columns("TypeDiagnosis")
            Me.columnDeleteOption = MyBase.Columns("DeleteOption")
            Me.columnVAStatus = MyBase.Columns("VAStatus")
            Me.columnAchieve = MyBase.Columns("Achieve")
            Me.columnMale = MyBase.Columns("Male")
            Me.columnFemale = MyBase.Columns("Female")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnComBindRefferal = MyBase.Columns("ComBindRefferal")
            Me.columnDeleteNote = MyBase.Columns("DeleteNote")
            Me.columnTelephone = MyBase.Columns("Telephone")
            Me.columnOccupation = MyBase.Columns("Occupation")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNewOutPatientNo = New Global.System.Data.DataColumn("NewOutPatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewOutPatientNo)
            Me.columnPatientNo = New Global.System.Data.DataColumn("PatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientNo)
            Me.columnOlePatientNo = New Global.System.Data.DataColumn("OlePatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOlePatientNo)
            Me.columnReceiptNo = New Global.System.Data.DataColumn("ReceiptNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptNo)
            Me.columnNameEng = New Global.System.Data.DataColumn("NameEng", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameEng)
            Me.columnNameKhmer = New Global.System.Data.DataColumn("NameKhmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameKhmer)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnPatientFee = New Global.System.Data.DataColumn("PatientFee", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientFee)
            Me.columnPatientDolar = New Global.System.Data.DataColumn("PatientDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientDolar)
            Me.columnDiagnosis = New Global.System.Data.DataColumn("Diagnosis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiagnosis)
            Me.columnPrescribed = New Global.System.Data.DataColumn("Prescribed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrescribed)
            Me.columnDispensed = New Global.System.Data.DataColumn("Dispensed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDispensed)
            Me.columnHearing = New Global.System.Data.DataColumn("Hearing", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHearing)
            Me.columnUnderstand = New Global.System.Data.DataColumn("Understand", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnderstand)
            Me.columnSeeing = New Global.System.Data.DataColumn("Seeing", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeeing)
            Me.columnPhysical = New Global.System.Data.DataColumn("Physical", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhysical)
            Me.columnOther = New Global.System.Data.DataColumn("Other", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOther)
            Me.columnCreateDate = New Global.System.Data.DataColumn("CreateDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDate)
            Me.columnTypeDiagnosis = New Global.System.Data.DataColumn("TypeDiagnosis", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeDiagnosis)
            Me.columnDeleteOption = New Global.System.Data.DataColumn("DeleteOption", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeleteOption)
            Me.columnVAStatus = New Global.System.Data.DataColumn("VAStatus", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVAStatus)
            Me.columnAchieve = New Global.System.Data.DataColumn("Achieve", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAchieve)
            Me.columnMale = New Global.System.Data.DataColumn("Male", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMale)
            Me.columnFemale = New Global.System.Data.DataColumn("Female", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemale)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnComBindRefferal = New Global.System.Data.DataColumn("ComBindRefferal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComBindRefferal)
            Me.columnDeleteNote = New Global.System.Data.DataColumn("DeleteNote", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeleteNote)
            Me.columnTelephone = New Global.System.Data.DataColumn("Telephone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelephone)
            Me.columnOccupation = New Global.System.Data.DataColumn("Occupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOccupation)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNewOutPatientNo}, true))
            Me.columnNewOutPatientNo.AllowDBNull = false
            Me.columnNewOutPatientNo.Unique = true
            Me.columnNameEng.MaxLength = 50
            Me.columnNameKhmer.MaxLength = 50
            Me.columnSex.MaxLength = 1
            Me.columnAddress.MaxLength = 1000
            Me.columnDiagnosis.MaxLength = 50
            Me.columnOther.MaxLength = 50
            Me.columnMale.MaxLength = 1
            Me.columnFemale.MaxLength = 1
            Me.columnComBindRefferal.MaxLength = 100
            Me.columnDeleteNote.MaxLength = 250
            Me.columnTelephone.MaxLength = 50
            Me.columnOccupation.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_NewOutpatientDetailRow() As V_NewOutpatientDetailRow
            Return CType(Me.NewRow,V_NewOutpatientDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New V_NewOutpatientDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(V_NewOutpatientDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_NewOutpatientDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent V_NewOutpatientDetailRowChanged(Me, New V_NewOutpatientDetailRowChangeEvent(CType(e.Row,V_NewOutpatientDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_NewOutpatientDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent V_NewOutpatientDetailRowChanging(Me, New V_NewOutpatientDetailRowChangeEvent(CType(e.Row,V_NewOutpatientDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_NewOutpatientDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_NewOutpatientDetailRowDeleted(Me, New V_NewOutpatientDetailRowChangeEvent(CType(e.Row,V_NewOutpatientDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_NewOutpatientDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_NewOutpatientDetailRowDeleting(Me, New V_NewOutpatientDetailRowChangeEvent(CType(e.Row,V_NewOutpatientDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_NewOutpatientDetailRow(ByVal row As V_NewOutpatientDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOutPatientReport = New DSOutPatientReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_NewOutpatientDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_NewOutpatientDetail1DataTable
        Inherits Global.System.Data.TypedTableBase(Of V_NewOutpatientDetail1Row)
        
        Private columnNewOutPatientNo As Global.System.Data.DataColumn
        
        Private columnPatientNo As Global.System.Data.DataColumn
        
        Private columnOlePatientNo As Global.System.Data.DataColumn
        
        Private columnReceiptNo As Global.System.Data.DataColumn
        
        Private columnNameEng As Global.System.Data.DataColumn
        
        Private columnNameKhmer As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnPatientFee As Global.System.Data.DataColumn
        
        Private columnPatientDolar As Global.System.Data.DataColumn
        
        Private columnDiagnosis As Global.System.Data.DataColumn
        
        Private columnPrescribed As Global.System.Data.DataColumn
        
        Private columnDispensed As Global.System.Data.DataColumn
        
        Private columnHearing As Global.System.Data.DataColumn
        
        Private columnUnderstand As Global.System.Data.DataColumn
        
        Private columnSeeing As Global.System.Data.DataColumn
        
        Private columnPhysical As Global.System.Data.DataColumn
        
        Private columnOther As Global.System.Data.DataColumn
        
        Private columnCreateDate As Global.System.Data.DataColumn
        
        Private columnTypeDiagnosis As Global.System.Data.DataColumn
        
        Private columnDeleteOption As Global.System.Data.DataColumn
        
        Private columnVAStatus As Global.System.Data.DataColumn
        
        Private columnAchieve As Global.System.Data.DataColumn
        
        Private columnMale As Global.System.Data.DataColumn
        
        Private columnFemale As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnComBindRefferal As Global.System.Data.DataColumn
        
        Private columnDeleteNote As Global.System.Data.DataColumn
        
        Private columnTelephone As Global.System.Data.DataColumn
        
        Private columnVA_PLeft As Global.System.Data.DataColumn
        
        Private columnVA_PRight As Global.System.Data.DataColumn
        
        Private columnOccupation As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_NewOutpatientDetail1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewOutPatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewOutPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OlePatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOlePatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameEngColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameEng
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameKhmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameKhmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientFeeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientFee
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrescribedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrescribed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DispensedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDispensed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HearingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHearing
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnderstandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnderstand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeeingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeeing
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhysicalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhysical
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOther
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeDiagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeDiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeleteOptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeleteOption
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VAStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVAStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AchieveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAchieve
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FemaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComBindRefferalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComBindRefferal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeleteNoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeleteNote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelephoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelephone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VA_PLeftColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVA_PLeft
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VA_PRightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVA_PRight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_NewOutpatientDetail1Row
            Get
                Return CType(Me.Rows(index),V_NewOutpatientDetail1Row)
            End Get
        End Property
        
        Public Event V_NewOutpatientDetail1RowChanging As V_NewOutpatientDetail1RowChangeEventHandler
        
        Public Event V_NewOutpatientDetail1RowChanged As V_NewOutpatientDetail1RowChangeEventHandler
        
        Public Event V_NewOutpatientDetail1RowDeleting As V_NewOutpatientDetail1RowChangeEventHandler
        
        Public Event V_NewOutpatientDetail1RowDeleted As V_NewOutpatientDetail1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_NewOutpatientDetail1Row(ByVal row As V_NewOutpatientDetail1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_NewOutpatientDetail1Row( _
                    ByVal NewOutPatientNo As Decimal,  _
                    ByVal PatientNo As Decimal,  _
                    ByVal OlePatientNo As Decimal,  _
                    ByVal ReceiptNo As Decimal,  _
                    ByVal NameEng As String,  _
                    ByVal NameKhmer As String,  _
                    ByVal Age As Decimal,  _
                    ByVal Sex As String,  _
                    ByVal Address As String,  _
                    ByVal PatientFee As Double,  _
                    ByVal PatientDolar As Double,  _
                    ByVal Diagnosis As String,  _
                    ByVal Prescribed As Boolean,  _
                    ByVal Dispensed As Boolean,  _
                    ByVal Hearing As Boolean,  _
                    ByVal Understand As Boolean,  _
                    ByVal Seeing As Boolean,  _
                    ByVal Physical As Boolean,  _
                    ByVal Other As String,  _
                    ByVal CreateDate As Date,  _
                    ByVal TypeDiagnosis As Boolean,  _
                    ByVal DeleteOption As Boolean,  _
                    ByVal VAStatus As Boolean,  _
                    ByVal Achieve As Boolean,  _
                    ByVal Male As String,  _
                    ByVal Female As String,  _
                    ByVal Status As Boolean,  _
                    ByVal ComBindRefferal As String,  _
                    ByVal DeleteNote As String,  _
                    ByVal Telephone As String,  _
                    ByVal VA_PLeft As String,  _
                    ByVal VA_PRight As String,  _
                    ByVal Occupation As String) As V_NewOutpatientDetail1Row
            Dim rowV_NewOutpatientDetail1Row As V_NewOutpatientDetail1Row = CType(Me.NewRow,V_NewOutpatientDetail1Row)
            Dim columnValuesArray() As Object = New Object() {NewOutPatientNo, PatientNo, OlePatientNo, ReceiptNo, NameEng, NameKhmer, Age, Sex, Address, PatientFee, PatientDolar, Diagnosis, Prescribed, Dispensed, Hearing, Understand, Seeing, Physical, Other, CreateDate, TypeDiagnosis, DeleteOption, VAStatus, Achieve, Male, Female, Status, ComBindRefferal, DeleteNote, Telephone, VA_PLeft, VA_PRight, Occupation}
            rowV_NewOutpatientDetail1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowV_NewOutpatientDetail1Row)
            Return rowV_NewOutpatientDetail1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNewOutPatientNo(ByVal NewOutPatientNo As Decimal) As V_NewOutpatientDetail1Row
            Return CType(Me.Rows.Find(New Object() {NewOutPatientNo}),V_NewOutpatientDetail1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As V_NewOutpatientDetail1DataTable = CType(MyBase.Clone,V_NewOutpatientDetail1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New V_NewOutpatientDetail1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNewOutPatientNo = MyBase.Columns("NewOutPatientNo")
            Me.columnPatientNo = MyBase.Columns("PatientNo")
            Me.columnOlePatientNo = MyBase.Columns("OlePatientNo")
            Me.columnReceiptNo = MyBase.Columns("ReceiptNo")
            Me.columnNameEng = MyBase.Columns("NameEng")
            Me.columnNameKhmer = MyBase.Columns("NameKhmer")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnPatientFee = MyBase.Columns("PatientFee")
            Me.columnPatientDolar = MyBase.Columns("PatientDolar")
            Me.columnDiagnosis = MyBase.Columns("Diagnosis")
            Me.columnPrescribed = MyBase.Columns("Prescribed")
            Me.columnDispensed = MyBase.Columns("Dispensed")
            Me.columnHearing = MyBase.Columns("Hearing")
            Me.columnUnderstand = MyBase.Columns("Understand")
            Me.columnSeeing = MyBase.Columns("Seeing")
            Me.columnPhysical = MyBase.Columns("Physical")
            Me.columnOther = MyBase.Columns("Other")
            Me.columnCreateDate = MyBase.Columns("CreateDate")
            Me.columnTypeDiagnosis = MyBase.Columns("TypeDiagnosis")
            Me.columnDeleteOption = MyBase.Columns("DeleteOption")
            Me.columnVAStatus = MyBase.Columns("VAStatus")
            Me.columnAchieve = MyBase.Columns("Achieve")
            Me.columnMale = MyBase.Columns("Male")
            Me.columnFemale = MyBase.Columns("Female")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnComBindRefferal = MyBase.Columns("ComBindRefferal")
            Me.columnDeleteNote = MyBase.Columns("DeleteNote")
            Me.columnTelephone = MyBase.Columns("Telephone")
            Me.columnVA_PLeft = MyBase.Columns("VA_PLeft")
            Me.columnVA_PRight = MyBase.Columns("VA_PRight")
            Me.columnOccupation = MyBase.Columns("Occupation")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNewOutPatientNo = New Global.System.Data.DataColumn("NewOutPatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewOutPatientNo)
            Me.columnPatientNo = New Global.System.Data.DataColumn("PatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientNo)
            Me.columnOlePatientNo = New Global.System.Data.DataColumn("OlePatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOlePatientNo)
            Me.columnReceiptNo = New Global.System.Data.DataColumn("ReceiptNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptNo)
            Me.columnNameEng = New Global.System.Data.DataColumn("NameEng", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameEng)
            Me.columnNameKhmer = New Global.System.Data.DataColumn("NameKhmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameKhmer)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnPatientFee = New Global.System.Data.DataColumn("PatientFee", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientFee)
            Me.columnPatientDolar = New Global.System.Data.DataColumn("PatientDolar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientDolar)
            Me.columnDiagnosis = New Global.System.Data.DataColumn("Diagnosis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiagnosis)
            Me.columnPrescribed = New Global.System.Data.DataColumn("Prescribed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrescribed)
            Me.columnDispensed = New Global.System.Data.DataColumn("Dispensed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDispensed)
            Me.columnHearing = New Global.System.Data.DataColumn("Hearing", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHearing)
            Me.columnUnderstand = New Global.System.Data.DataColumn("Understand", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnderstand)
            Me.columnSeeing = New Global.System.Data.DataColumn("Seeing", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeeing)
            Me.columnPhysical = New Global.System.Data.DataColumn("Physical", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhysical)
            Me.columnOther = New Global.System.Data.DataColumn("Other", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOther)
            Me.columnCreateDate = New Global.System.Data.DataColumn("CreateDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDate)
            Me.columnTypeDiagnosis = New Global.System.Data.DataColumn("TypeDiagnosis", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeDiagnosis)
            Me.columnDeleteOption = New Global.System.Data.DataColumn("DeleteOption", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeleteOption)
            Me.columnVAStatus = New Global.System.Data.DataColumn("VAStatus", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVAStatus)
            Me.columnAchieve = New Global.System.Data.DataColumn("Achieve", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAchieve)
            Me.columnMale = New Global.System.Data.DataColumn("Male", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMale)
            Me.columnFemale = New Global.System.Data.DataColumn("Female", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemale)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnComBindRefferal = New Global.System.Data.DataColumn("ComBindRefferal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComBindRefferal)
            Me.columnDeleteNote = New Global.System.Data.DataColumn("DeleteNote", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeleteNote)
            Me.columnTelephone = New Global.System.Data.DataColumn("Telephone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelephone)
            Me.columnVA_PLeft = New Global.System.Data.DataColumn("VA_PLeft", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVA_PLeft)
            Me.columnVA_PRight = New Global.System.Data.DataColumn("VA_PRight", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVA_PRight)
            Me.columnOccupation = New Global.System.Data.DataColumn("Occupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOccupation)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNewOutPatientNo}, true))
            Me.columnNewOutPatientNo.AllowDBNull = false
            Me.columnNewOutPatientNo.Unique = true
            Me.columnNameEng.MaxLength = 50
            Me.columnNameKhmer.MaxLength = 50
            Me.columnSex.MaxLength = 1
            Me.columnAddress.MaxLength = 1000
            Me.columnDiagnosis.MaxLength = 50
            Me.columnOther.MaxLength = 50
            Me.columnMale.MaxLength = 1
            Me.columnFemale.MaxLength = 1
            Me.columnComBindRefferal.MaxLength = 100
            Me.columnDeleteNote.MaxLength = 250
            Me.columnTelephone.MaxLength = 50
            Me.columnVA_PLeft.MaxLength = 50
            Me.columnVA_PRight.MaxLength = 50
            Me.columnOccupation.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_NewOutpatientDetail1Row() As V_NewOutpatientDetail1Row
            Return CType(Me.NewRow,V_NewOutpatientDetail1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New V_NewOutpatientDetail1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(V_NewOutpatientDetail1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_NewOutpatientDetail1RowChangedEvent) Is Nothing) Then
                RaiseEvent V_NewOutpatientDetail1RowChanged(Me, New V_NewOutpatientDetail1RowChangeEvent(CType(e.Row,V_NewOutpatientDetail1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_NewOutpatientDetail1RowChangingEvent) Is Nothing) Then
                RaiseEvent V_NewOutpatientDetail1RowChanging(Me, New V_NewOutpatientDetail1RowChangeEvent(CType(e.Row,V_NewOutpatientDetail1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_NewOutpatientDetail1RowDeletedEvent) Is Nothing) Then
                RaiseEvent V_NewOutpatientDetail1RowDeleted(Me, New V_NewOutpatientDetail1RowChangeEvent(CType(e.Row,V_NewOutpatientDetail1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_NewOutpatientDetail1RowDeletingEvent) Is Nothing) Then
                RaiseEvent V_NewOutpatientDetail1RowDeleting(Me, New V_NewOutpatientDetail1RowChangeEvent(CType(e.Row,V_NewOutpatientDetail1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_NewOutpatientDetail1Row(ByVal row As V_NewOutpatientDetail1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOutPatientReport = New DSOutPatientReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_NewOutpatientDetail1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TblVADataTable
        Inherits Global.System.Data.TypedTableBase(Of TblVARow)
        
        Private columnPatientNo As Global.System.Data.DataColumn
        
        Private columnPlainValue As Global.System.Data.DataColumn
        
        Private columnCreateDate As Global.System.Data.DataColumn
        
        Private columnEyes As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TblVA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlainValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlainValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EyesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEyes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TblVARow
            Get
                Return CType(Me.Rows(index),TblVARow)
            End Get
        End Property
        
        Public Event TblVARowChanging As TblVARowChangeEventHandler
        
        Public Event TblVARowChanged As TblVARowChangeEventHandler
        
        Public Event TblVARowDeleting As TblVARowChangeEventHandler
        
        Public Event TblVARowDeleted As TblVARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTblVARow(ByVal row As TblVARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTblVARow(ByVal PatientNo As Decimal, ByVal PlainValue As String, ByVal CreateDate As Date, ByVal Eyes As String) As TblVARow
            Dim rowTblVARow As TblVARow = CType(Me.NewRow,TblVARow)
            Dim columnValuesArray() As Object = New Object() {PatientNo, PlainValue, CreateDate, Eyes}
            rowTblVARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTblVARow)
            Return rowTblVARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TblVADataTable = CType(MyBase.Clone,TblVADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TblVADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPatientNo = MyBase.Columns("PatientNo")
            Me.columnPlainValue = MyBase.Columns("PlainValue")
            Me.columnCreateDate = MyBase.Columns("CreateDate")
            Me.columnEyes = MyBase.Columns("Eyes")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPatientNo = New Global.System.Data.DataColumn("PatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientNo)
            Me.columnPlainValue = New Global.System.Data.DataColumn("PlainValue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlainValue)
            Me.columnCreateDate = New Global.System.Data.DataColumn("CreateDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDate)
            Me.columnEyes = New Global.System.Data.DataColumn("Eyes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEyes)
            Me.columnPatientNo.ReadOnly = true
            Me.columnPlainValue.ReadOnly = true
            Me.columnPlainValue.MaxLength = 50
            Me.columnCreateDate.ReadOnly = true
            Me.columnEyes.ReadOnly = true
            Me.columnEyes.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTblVARow() As TblVARow
            Return CType(Me.NewRow,TblVARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TblVARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TblVARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TblVARowChangedEvent) Is Nothing) Then
                RaiseEvent TblVARowChanged(Me, New TblVARowChangeEvent(CType(e.Row,TblVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TblVARowChangingEvent) Is Nothing) Then
                RaiseEvent TblVARowChanging(Me, New TblVARowChangeEvent(CType(e.Row,TblVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TblVARowDeletedEvent) Is Nothing) Then
                RaiseEvent TblVARowDeleted(Me, New TblVARowChangeEvent(CType(e.Row,TblVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TblVARowDeletingEvent) Is Nothing) Then
                RaiseEvent TblVARowDeleting(Me, New TblVARowChangeEvent(CType(e.Row,TblVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTblVARow(ByVal row As TblVARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOutPatientReport = New DSOutPatientReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TblVADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TblReferToDataTable
        Inherits Global.System.Data.TypedTableBase(Of TblReferToRow)
        
        Private columnReferNo As Global.System.Data.DataColumn
        
        Private columnPatientNo As Global.System.Data.DataColumn
        
        Private columnReferTo As Global.System.Data.DataColumn
        
        Private columnReferDate As Global.System.Data.DataColumn
        
        Private columnNote As Global.System.Data.DataColumn
        
        Private columnDiagnosis As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TblReferTo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TblReferToRow
            Get
                Return CType(Me.Rows(index),TblReferToRow)
            End Get
        End Property
        
        Public Event TblReferToRowChanging As TblReferToRowChangeEventHandler
        
        Public Event TblReferToRowChanged As TblReferToRowChangeEventHandler
        
        Public Event TblReferToRowDeleting As TblReferToRowChangeEventHandler
        
        Public Event TblReferToRowDeleted As TblReferToRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTblReferToRow(ByVal row As TblReferToRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTblReferToRow(ByVal PatientNo As Decimal, ByVal ReferTo As String, ByVal ReferDate As Date, ByVal Note As String, ByVal Diagnosis As String) As TblReferToRow
            Dim rowTblReferToRow As TblReferToRow = CType(Me.NewRow,TblReferToRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PatientNo, ReferTo, ReferDate, Note, Diagnosis}
            rowTblReferToRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTblReferToRow)
            Return rowTblReferToRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByReferNo(ByVal ReferNo As Decimal) As TblReferToRow
            Return CType(Me.Rows.Find(New Object() {ReferNo}),TblReferToRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TblReferToDataTable = CType(MyBase.Clone,TblReferToDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TblReferToDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnReferNo = MyBase.Columns("ReferNo")
            Me.columnPatientNo = MyBase.Columns("PatientNo")
            Me.columnReferTo = MyBase.Columns("ReferTo")
            Me.columnReferDate = MyBase.Columns("ReferDate")
            Me.columnNote = MyBase.Columns("Note")
            Me.columnDiagnosis = MyBase.Columns("Diagnosis")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnReferNo = New Global.System.Data.DataColumn("ReferNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferNo)
            Me.columnPatientNo = New Global.System.Data.DataColumn("PatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientNo)
            Me.columnReferTo = New Global.System.Data.DataColumn("ReferTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferTo)
            Me.columnReferDate = New Global.System.Data.DataColumn("ReferDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferDate)
            Me.columnNote = New Global.System.Data.DataColumn("Note", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNote)
            Me.columnDiagnosis = New Global.System.Data.DataColumn("Diagnosis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiagnosis)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnReferNo}, true))
            Me.columnReferNo.AutoIncrement = true
            Me.columnReferNo.AutoIncrementSeed = -1
            Me.columnReferNo.AutoIncrementStep = -1
            Me.columnReferNo.AllowDBNull = false
            Me.columnReferNo.ReadOnly = true
            Me.columnReferNo.Unique = true
            Me.columnReferTo.MaxLength = 50
            Me.columnNote.MaxLength = 100
            Me.columnDiagnosis.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTblReferToRow() As TblReferToRow
            Return CType(Me.NewRow,TblReferToRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TblReferToRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TblReferToRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TblReferToRowChangedEvent) Is Nothing) Then
                RaiseEvent TblReferToRowChanged(Me, New TblReferToRowChangeEvent(CType(e.Row,TblReferToRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TblReferToRowChangingEvent) Is Nothing) Then
                RaiseEvent TblReferToRowChanging(Me, New TblReferToRowChangeEvent(CType(e.Row,TblReferToRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TblReferToRowDeletedEvent) Is Nothing) Then
                RaiseEvent TblReferToRowDeleted(Me, New TblReferToRowChangeEvent(CType(e.Row,TblReferToRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TblReferToRowDeletingEvent) Is Nothing) Then
                RaiseEvent TblReferToRowDeleting(Me, New TblReferToRowChangeEvent(CType(e.Row,TblReferToRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTblReferToRow(ByVal row As TblReferToRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSOutPatientReport = New DSOutPatientReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TblReferToDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataTable1Row
        Inherits Global.System.Data.DataRow
        
        Private tableDataTable1 As DataTable1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataTable1 = CType(Me.Table,DataTable1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property agerang() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.agerangColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'agerang' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.agerangColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property male() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.maleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'male' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.maleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property female() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.femaleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'female' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.femaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diagnosis() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.DiagnosisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diagnosis' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.DiagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsagerangNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.agerangColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetagerangNull()
            Me(Me.tableDataTable1.agerangColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmaleNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.maleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmaleNull()
            Me(Me.tableDataTable1.maleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfemaleNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.femaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfemaleNull()
            Me(Me.tableDataTable1.femaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiagnosisNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.DiagnosisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiagnosisNull()
            Me(Me.tableDataTable1.DiagnosisColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TblOtherNewPatientRow
        Inherits Global.System.Data.DataRow
        
        Private tableTblOtherNewPatient As TblOtherNewPatientDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTblOtherNewPatient = CType(Me.Table,TblOtherNewPatientDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientNo() As Decimal
            Get
                Return CType(Me(Me.tableTblOtherNewPatient.PatientNoColumn),Decimal)
            End Get
            Set
                Me(Me.tableTblOtherNewPatient.PatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameKhmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblOtherNewPatient.NameKhmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameKhmer' in table 'TblOtherNewPatient' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblOtherNewPatient.NameKhmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTblOtherNewPatient.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'TblOtherNewPatient' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblOtherNewPatient.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblOtherNewPatient.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'TblOtherNewPatient' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblOtherNewPatient.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Other() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblOtherNewPatient.OtherColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Other' in table 'TblOtherNewPatient' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblOtherNewPatient.OtherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Province() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblOtherNewPatient.ProvinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Province' in table 'TblOtherNewPatient' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblOtherNewPatient.ProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property District() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblOtherNewPatient.DistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'District' in table 'TblOtherNewPatient' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblOtherNewPatient.DistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameKhmerNull() As Boolean
            Return Me.IsNull(Me.tableTblOtherNewPatient.NameKhmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameKhmerNull()
            Me(Me.tableTblOtherNewPatient.NameKhmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableTblOtherNewPatient.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableTblOtherNewPatient.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableTblOtherNewPatient.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableTblOtherNewPatient.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherNull() As Boolean
            Return Me.IsNull(Me.tableTblOtherNewPatient.OtherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherNull()
            Me(Me.tableTblOtherNewPatient.OtherColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProvinceNull() As Boolean
            Return Me.IsNull(Me.tableTblOtherNewPatient.ProvinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProvinceNull()
            Me(Me.tableTblOtherNewPatient.ProvinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistrictNull() As Boolean
            Return Me.IsNull(Me.tableTblOtherNewPatient.DistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistrictNull()
            Me(Me.tableTblOtherNewPatient.DistrictColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TblOtherOldPatientRow
        Inherits Global.System.Data.DataRow
        
        Private tableTblOtherOldPatient As TblOtherOldPatientDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTblOtherOldPatient = CType(Me.Table,TblOtherOldPatientDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientNo() As Decimal
            Get
                Return CType(Me(Me.tableTblOtherOldPatient.PatientNoColumn),Decimal)
            End Get
            Set
                Me(Me.tableTblOtherOldPatient.PatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameKhmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblOtherOldPatient.NameKhmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameKhmer' in table 'TblOtherOldPatient' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblOtherOldPatient.NameKhmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTblOtherOldPatient.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'TblOtherOldPatient' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblOtherOldPatient.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblOtherOldPatient.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'TblOtherOldPatient' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblOtherOldPatient.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Other() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblOtherOldPatient.OtherColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Other' in table 'TblOtherOldPatient' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblOtherOldPatient.OtherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Province() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblOtherOldPatient.ProvinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Province' in table 'TblOtherOldPatient' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblOtherOldPatient.ProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property District() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblOtherOldPatient.DistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'District' in table 'TblOtherOldPatient' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblOtherOldPatient.DistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameKhmerNull() As Boolean
            Return Me.IsNull(Me.tableTblOtherOldPatient.NameKhmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameKhmerNull()
            Me(Me.tableTblOtherOldPatient.NameKhmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableTblOtherOldPatient.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableTblOtherOldPatient.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableTblOtherOldPatient.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableTblOtherOldPatient.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherNull() As Boolean
            Return Me.IsNull(Me.tableTblOtherOldPatient.OtherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherNull()
            Me(Me.tableTblOtherOldPatient.OtherColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProvinceNull() As Boolean
            Return Me.IsNull(Me.tableTblOtherOldPatient.ProvinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProvinceNull()
            Me(Me.tableTblOtherOldPatient.ProvinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistrictNull() As Boolean
            Return Me.IsNull(Me.tableTblOtherOldPatient.DistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistrictNull()
            Me(Me.tableTblOtherOldPatient.DistrictColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_NewOutpatientDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableV_NewOutpatientDetail As V_NewOutpatientDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_NewOutpatientDetail = CType(Me.Table,V_NewOutpatientDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewOutPatientNo() As Decimal
            Get
                Return CType(Me(Me.tableV_NewOutpatientDetail.NewOutPatientNoColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.NewOutPatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.PatientNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PatientNo' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.PatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OlePatientNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.OlePatientNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OlePatientNo' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.OlePatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.ReceiptNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptNo' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.ReceiptNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameEng() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.NameEngColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameEng' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.NameEngColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameKhmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.NameKhmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameKhmer' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.NameKhmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientFee() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.PatientFeeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PatientFee' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.PatientFeeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.PatientDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PatientDolar' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.PatientDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diagnosis() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.DiagnosisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diagnosis' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.DiagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prescribed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.PrescribedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Prescribed' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.PrescribedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dispensed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.DispensedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dispensed' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.DispensedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hearing() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.HearingColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Hearing' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.HearingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Understand() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.UnderstandColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Understand' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.UnderstandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Seeing() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.SeeingColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Seeing' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.SeeingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Physical() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.PhysicalColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Physical' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.PhysicalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Other() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.OtherColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Other' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.OtherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.CreateDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreateDate' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.CreateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeDiagnosis() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.TypeDiagnosisColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeDiagnosis' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.TypeDiagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeleteOption() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.DeleteOptionColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeleteOption' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.DeleteOptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VAStatus() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.VAStatusColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VAStatus' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.VAStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Achieve() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.AchieveColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Achieve' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.AchieveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Male() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.MaleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Male' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.MaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Female() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.FemaleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Female' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.FemaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.StatusColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ComBindRefferal() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.ComBindRefferalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ComBindRefferal' in table 'V_NewOutpatientDetail' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.ComBindRefferalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeleteNote() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.DeleteNoteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeleteNote' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.DeleteNoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telephone() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.TelephoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telephone' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.TelephoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Occupation() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail.OccupationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Occupation' in table 'V_NewOutpatientDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail.OccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPatientNoNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.PatientNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPatientNoNull()
            Me(Me.tableV_NewOutpatientDetail.PatientNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOlePatientNoNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.OlePatientNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOlePatientNoNull()
            Me(Me.tableV_NewOutpatientDetail.OlePatientNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptNoNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.ReceiptNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptNoNull()
            Me(Me.tableV_NewOutpatientDetail.ReceiptNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameEngNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.NameEngColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameEngNull()
            Me(Me.tableV_NewOutpatientDetail.NameEngColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameKhmerNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.NameKhmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameKhmerNull()
            Me(Me.tableV_NewOutpatientDetail.NameKhmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableV_NewOutpatientDetail.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableV_NewOutpatientDetail.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableV_NewOutpatientDetail.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPatientFeeNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.PatientFeeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPatientFeeNull()
            Me(Me.tableV_NewOutpatientDetail.PatientFeeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPatientDolarNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.PatientDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPatientDolarNull()
            Me(Me.tableV_NewOutpatientDetail.PatientDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiagnosisNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.DiagnosisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiagnosisNull()
            Me(Me.tableV_NewOutpatientDetail.DiagnosisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrescribedNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.PrescribedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrescribedNull()
            Me(Me.tableV_NewOutpatientDetail.PrescribedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDispensedNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.DispensedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDispensedNull()
            Me(Me.tableV_NewOutpatientDetail.DispensedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHearingNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.HearingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHearingNull()
            Me(Me.tableV_NewOutpatientDetail.HearingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnderstandNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.UnderstandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnderstandNull()
            Me(Me.tableV_NewOutpatientDetail.UnderstandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeeingNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.SeeingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeeingNull()
            Me(Me.tableV_NewOutpatientDetail.SeeingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhysicalNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.PhysicalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhysicalNull()
            Me(Me.tableV_NewOutpatientDetail.PhysicalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.OtherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherNull()
            Me(Me.tableV_NewOutpatientDetail.OtherColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.CreateDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreateDateNull()
            Me(Me.tableV_NewOutpatientDetail.CreateDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeDiagnosisNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.TypeDiagnosisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeDiagnosisNull()
            Me(Me.tableV_NewOutpatientDetail.TypeDiagnosisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeleteOptionNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.DeleteOptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeleteOptionNull()
            Me(Me.tableV_NewOutpatientDetail.DeleteOptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVAStatusNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.VAStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVAStatusNull()
            Me(Me.tableV_NewOutpatientDetail.VAStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAchieveNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.AchieveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAchieveNull()
            Me(Me.tableV_NewOutpatientDetail.AchieveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaleNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.MaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaleNull()
            Me(Me.tableV_NewOutpatientDetail.MaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFemaleNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.FemaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFemaleNull()
            Me(Me.tableV_NewOutpatientDetail.FemaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableV_NewOutpatientDetail.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComBindRefferalNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.ComBindRefferalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComBindRefferalNull()
            Me(Me.tableV_NewOutpatientDetail.ComBindRefferalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeleteNoteNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.DeleteNoteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeleteNoteNull()
            Me(Me.tableV_NewOutpatientDetail.DeleteNoteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelephoneNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.TelephoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelephoneNull()
            Me(Me.tableV_NewOutpatientDetail.TelephoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOccupationNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail.OccupationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOccupationNull()
            Me(Me.tableV_NewOutpatientDetail.OccupationColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_NewOutpatientDetail1Row
        Inherits Global.System.Data.DataRow
        
        Private tableV_NewOutpatientDetail1 As V_NewOutpatientDetail1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_NewOutpatientDetail1 = CType(Me.Table,V_NewOutpatientDetail1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewOutPatientNo() As Decimal
            Get
                Return CType(Me(Me.tableV_NewOutpatientDetail1.NewOutPatientNoColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.NewOutPatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.PatientNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PatientNo' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.PatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OlePatientNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.OlePatientNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OlePatientNo' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.OlePatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.ReceiptNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptNo' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.ReceiptNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameEng() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.NameEngColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameEng' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.NameEngColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameKhmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.NameKhmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameKhmer' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.NameKhmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientFee() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.PatientFeeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PatientFee' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.PatientFeeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientDolar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.PatientDolarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PatientDolar' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.PatientDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diagnosis() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.DiagnosisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diagnosis' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.DiagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prescribed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.PrescribedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Prescribed' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.PrescribedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dispensed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.DispensedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dispensed' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.DispensedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hearing() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.HearingColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Hearing' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.HearingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Understand() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.UnderstandColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Understand' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.UnderstandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Seeing() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.SeeingColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Seeing' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.SeeingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Physical() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.PhysicalColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Physical' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.PhysicalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Other() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.OtherColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Other' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.OtherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.CreateDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreateDate' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.CreateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeDiagnosis() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.TypeDiagnosisColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeDiagnosis' in table 'V_NewOutpatientDetail1' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.TypeDiagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeleteOption() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.DeleteOptionColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeleteOption' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.DeleteOptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VAStatus() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.VAStatusColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VAStatus' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.VAStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Achieve() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.AchieveColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Achieve' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.AchieveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Male() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.MaleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Male' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.MaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Female() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.FemaleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Female' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.FemaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.StatusColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ComBindRefferal() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.ComBindRefferalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ComBindRefferal' in table 'V_NewOutpatientDetail1' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.ComBindRefferalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeleteNote() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.DeleteNoteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeleteNote' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.DeleteNoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telephone() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.TelephoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telephone' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.TelephoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VA_PLeft() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.VA_PLeftColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VA_PLeft' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.VA_PLeftColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VA_PRight() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.VA_PRightColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VA_PRight' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.VA_PRightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Occupation() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewOutpatientDetail1.OccupationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Occupation' in table 'V_NewOutpatientDetail1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewOutpatientDetail1.OccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPatientNoNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.PatientNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPatientNoNull()
            Me(Me.tableV_NewOutpatientDetail1.PatientNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOlePatientNoNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.OlePatientNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOlePatientNoNull()
            Me(Me.tableV_NewOutpatientDetail1.OlePatientNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptNoNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.ReceiptNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptNoNull()
            Me(Me.tableV_NewOutpatientDetail1.ReceiptNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameEngNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.NameEngColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameEngNull()
            Me(Me.tableV_NewOutpatientDetail1.NameEngColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameKhmerNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.NameKhmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameKhmerNull()
            Me(Me.tableV_NewOutpatientDetail1.NameKhmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableV_NewOutpatientDetail1.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableV_NewOutpatientDetail1.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableV_NewOutpatientDetail1.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPatientFeeNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.PatientFeeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPatientFeeNull()
            Me(Me.tableV_NewOutpatientDetail1.PatientFeeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPatientDolarNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.PatientDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPatientDolarNull()
            Me(Me.tableV_NewOutpatientDetail1.PatientDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiagnosisNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.DiagnosisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiagnosisNull()
            Me(Me.tableV_NewOutpatientDetail1.DiagnosisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrescribedNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.PrescribedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrescribedNull()
            Me(Me.tableV_NewOutpatientDetail1.PrescribedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDispensedNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.DispensedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDispensedNull()
            Me(Me.tableV_NewOutpatientDetail1.DispensedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHearingNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.HearingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHearingNull()
            Me(Me.tableV_NewOutpatientDetail1.HearingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnderstandNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.UnderstandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnderstandNull()
            Me(Me.tableV_NewOutpatientDetail1.UnderstandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeeingNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.SeeingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeeingNull()
            Me(Me.tableV_NewOutpatientDetail1.SeeingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhysicalNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.PhysicalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhysicalNull()
            Me(Me.tableV_NewOutpatientDetail1.PhysicalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.OtherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherNull()
            Me(Me.tableV_NewOutpatientDetail1.OtherColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.CreateDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreateDateNull()
            Me(Me.tableV_NewOutpatientDetail1.CreateDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeDiagnosisNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.TypeDiagnosisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeDiagnosisNull()
            Me(Me.tableV_NewOutpatientDetail1.TypeDiagnosisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeleteOptionNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.DeleteOptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeleteOptionNull()
            Me(Me.tableV_NewOutpatientDetail1.DeleteOptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVAStatusNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.VAStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVAStatusNull()
            Me(Me.tableV_NewOutpatientDetail1.VAStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAchieveNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.AchieveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAchieveNull()
            Me(Me.tableV_NewOutpatientDetail1.AchieveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaleNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.MaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaleNull()
            Me(Me.tableV_NewOutpatientDetail1.MaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFemaleNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.FemaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFemaleNull()
            Me(Me.tableV_NewOutpatientDetail1.FemaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableV_NewOutpatientDetail1.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComBindRefferalNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.ComBindRefferalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComBindRefferalNull()
            Me(Me.tableV_NewOutpatientDetail1.ComBindRefferalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeleteNoteNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.DeleteNoteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeleteNoteNull()
            Me(Me.tableV_NewOutpatientDetail1.DeleteNoteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelephoneNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.TelephoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelephoneNull()
            Me(Me.tableV_NewOutpatientDetail1.TelephoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVA_PLeftNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.VA_PLeftColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVA_PLeftNull()
            Me(Me.tableV_NewOutpatientDetail1.VA_PLeftColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVA_PRightNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.VA_PRightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVA_PRightNull()
            Me(Me.tableV_NewOutpatientDetail1.VA_PRightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOccupationNull() As Boolean
            Return Me.IsNull(Me.tableV_NewOutpatientDetail1.OccupationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOccupationNull()
            Me(Me.tableV_NewOutpatientDetail1.OccupationColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TblVARow
        Inherits Global.System.Data.DataRow
        
        Private tableTblVA As TblVADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTblVA = CType(Me.Table,TblVADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTblVA.PatientNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PatientNo' in table 'TblVA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblVA.PatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlainValue() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblVA.PlainValueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PlainValue' in table 'TblVA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblVA.PlainValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTblVA.CreateDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreateDate' in table 'TblVA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblVA.CreateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Eyes() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblVA.EyesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Eyes' in table 'TblVA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblVA.EyesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPatientNoNull() As Boolean
            Return Me.IsNull(Me.tableTblVA.PatientNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPatientNoNull()
            Me(Me.tableTblVA.PatientNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlainValueNull() As Boolean
            Return Me.IsNull(Me.tableTblVA.PlainValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlainValueNull()
            Me(Me.tableTblVA.PlainValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableTblVA.CreateDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreateDateNull()
            Me(Me.tableTblVA.CreateDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEyesNull() As Boolean
            Return Me.IsNull(Me.tableTblVA.EyesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEyesNull()
            Me(Me.tableTblVA.EyesColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TblReferToRow
        Inherits Global.System.Data.DataRow
        
        Private tableTblReferTo As TblReferToDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTblReferTo = CType(Me.Table,TblReferToDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReferNo() As Decimal
            Get
                Return CType(Me(Me.tableTblReferTo.ReferNoColumn),Decimal)
            End Get
            Set
                Me(Me.tableTblReferTo.ReferNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTblReferTo.PatientNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PatientNo' in table 'TblReferTo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblReferTo.PatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReferTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblReferTo.ReferToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReferTo' in table 'TblReferTo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblReferTo.ReferToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReferDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTblReferTo.ReferDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReferDate' in table 'TblReferTo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblReferTo.ReferDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Note() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblReferTo.NoteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Note' in table 'TblReferTo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblReferTo.NoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diagnosis() As String
            Get
                Try 
                    Return CType(Me(Me.tableTblReferTo.DiagnosisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diagnosis' in table 'TblReferTo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTblReferTo.DiagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPatientNoNull() As Boolean
            Return Me.IsNull(Me.tableTblReferTo.PatientNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPatientNoNull()
            Me(Me.tableTblReferTo.PatientNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferToNull() As Boolean
            Return Me.IsNull(Me.tableTblReferTo.ReferToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferToNull()
            Me(Me.tableTblReferTo.ReferToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferDateNull() As Boolean
            Return Me.IsNull(Me.tableTblReferTo.ReferDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferDateNull()
            Me(Me.tableTblReferTo.ReferDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoteNull() As Boolean
            Return Me.IsNull(Me.tableTblReferTo.NoteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoteNull()
            Me(Me.tableTblReferTo.NoteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiagnosisNull() As Boolean
            Return Me.IsNull(Me.tableTblReferTo.DiagnosisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiagnosisNull()
            Me(Me.tableTblReferTo.DiagnosisColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataTable1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataTable1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataTable1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataTable1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TblOtherNewPatientRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TblOtherNewPatientRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TblOtherNewPatientRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TblOtherNewPatientRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TblOtherOldPatientRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TblOtherOldPatientRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TblOtherOldPatientRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TblOtherOldPatientRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_NewOutpatientDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As V_NewOutpatientDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_NewOutpatientDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_NewOutpatientDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_NewOutpatientDetail1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As V_NewOutpatientDetail1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_NewOutpatientDetail1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_NewOutpatientDetail1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TblVARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TblVARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TblVARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TblVARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TblReferToRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TblReferToRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TblReferToRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TblReferToRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DSOutPatientReportTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DataTable1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DataTable1"
            tableMapping.ColumnMappings.Add("agerang", "agerang")
            tableMapping.ColumnMappings.Add("male", "male")
            tableMapping.ColumnMappings.Add("female", "female")
            tableMapping.ColumnMappings.Add("Diagnosis", "Diagnosis")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Diagnosis, COUNT(Female) AS female, COUNT(Male) AS male, '0-4' AS ager"& _ 
                "ang"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         V_NewOutpatientDetail         "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Age BETWEEN 0 AND 4"& _ 
                ") AND (CAST(CONVERT(VARCHAR(10), CreateDate, 1) AS DateTime) BETWEEN CAST(CONVER"& _ 
                "T(VARCHAR(10), "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      CAST(@DateFrom AS DATETIME), 1) AS Dateti"& _ 
                "me) AND CAST(CONVERT(VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datetime)) AN"& _ 
                "D "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Diagnosis <> '') AND DeleteOption=0"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Diagnosis"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT     "& _ 
                "Diagnosis, COUNT(Female) AS female, COUNT(Male) AS male, '5-14' AS agerang"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"& _ 
                "         V_NewOutpatientDetail         "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Age BETWEEN 5 AND 14) AND (C"& _ 
                "AST(CONVERT(VARCHAR(10), CreateDate, 1) AS DateTime) BETWEEN CAST(CONVERT(VARCHA"& _ 
                "R(10), "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND "& _ 
                "CAST(CONVERT(VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datetime)) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                  (Diagnosis <> '') AND DeleteOption=0"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Diagnosis"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNIO"& _ 
                "N"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT     Diagnosis, COUNT(Female) AS female, COUNT(Male) AS malee, '15-49' "& _ 
                "AS agerang"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         V_NewOutpatientDetail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Age BETWEEN 15 AND 49"& _ 
                ") AND (CAST(CONVERT(VARCHAR(10), CreateDate, 1) AS DateTime) BETWEEN CAST(CONVER"& _ 
                "T(VARCHAR(10), "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      CAST(@DateFrom AS DATETIME), 1) AS Dateti"& _ 
                "me) AND CAST(CONVERT(VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datetime)) AN"& _ 
                "D "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (Diagnosis <> '') AND DeleteOption=0"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Diagnos"& _ 
                "is"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT     Diagnosis, COUNT(Female) AS female, COUNT(Male) AS male, '"& _ 
                ">=50' AS agerang"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         V_NewOutpatientDetail         "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Age >="& _ 
                " 50) AND (CAST(CONVERT(VARCHAR(10), CreateDate, 1) AS DateTime) BETWEEN CAST(CON"& _ 
                "VERT(VARCHAR(10), "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      CAST(@DateFrom AS DATETIME), 1) AS Dat"& _ 
                "etime) AND CAST(CONVERT(VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datetime))"& _ 
                " AND (Diagnosis <> '') AND DeleteOption=0"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Diagnosis"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Diagnosis,  COUNT(Female) AS female, COUNT(Male) AS male,'0-4' AS agerang "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         V_NewOutpatientDetail                     "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Age BETWEE"& _ 
                "N 0 AND 4) AND (CAST(CONVERT (VARCHAR(10), CreateDate, 1) AS DateTime) BETWEEN C"& _ 
                "AST(CONVERT (VARCHAR(10), CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST("& _ 
                "CONVERT (VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datetime)) AND (Diagnosis"& _ 
                " <> '') AND (DeleteOption = 'False') "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Diagnosis "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Diagn"& _ 
                "osis, COUNT(Female) AS female, COUNT(Male) AS male, '5-14' AS agerang "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    "& _ 
                "     V_NewOutpatientDetail             "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE      (Age BETWEEN 5 AND 14) AND ("& _ 
                "CAST(CONVERT (VARCHAR(10), CreateDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VAR"& _ 
                "CHAR(10), CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR"& _ 
                "(10), CAST(@DateTO AS DATETIME), 1) AS Datetime)) AND (Diagnosis <> '') AND (Del"& _ 
                "eteOption = 'False') "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Diagnosis "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Diagnosis, COUNT(Fema"& _ 
                "le) AS female, COUNT(Male) AS malee, '15-49' AS agerang "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         V_NewOutp"& _ 
                "atientDetail             "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE    (Age BETWEEN 15 AND 49) AND (CAST(CONVERT (V"& _ 
                "ARCHAR(10), CreateDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST("& _ 
                "@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@Dat"& _ 
                "eTO AS DATETIME), 1) AS Datetime)) AND (Diagnosis <> '') AND (DeleteOption = 'Fa"& _ 
                "lse') "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Diagnosis "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Diagnosis, COUNT(Female) AS female, "& _ 
                "COUNT(Male) AS male, '>=50' AS agerang "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         V_NewOutpatientDetail     "& _ 
                "  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Age >= 50) AND (CAST(CONVERT (VARCHAR(10), CreateDate, 1) AS Date"& _ 
                "Time) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@DateFrom AS DATETIME), 1) AS Date"& _ 
                "time) AND CAST(CONVERT (VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datetime))"& _ 
                " AND (Diagnosis <> '') AND (DeleteOption = 'False') "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Diagnosis"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Diagnosis,  COUNT(Female) AS female, COUNT(Male) AS male,'0-4' AS agerang "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM          V_NewOutpatientDetail          "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Age BETWEEN 0 AND 4)"& _ 
                " AND (CAST(CONVERT (VARCHAR(10), CreateDate, 1) AS DateTime) BETWEEN CAST(CONVER"& _ 
                "T (VARCHAR(10), CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (V"& _ 
                "ARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datetime)) AND (Diagnosis <> '') AN"& _ 
                "D (Status = 'False')  AND (DeleteOption = 'False') "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Diagnosis "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Diagnosis, COUNT(Female) AS female, COUNT(Male) AS male, '5-14' AS ager"& _ 
                "ang "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM          V_NewOutpatientDetail            "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Age BETWEEN 5 "& _ 
                "AND 14) AND (CAST(CONVERT (VARCHAR(10), CreateDate, 1) AS DateTime) BETWEEN CAST"& _ 
                "(CONVERT (VARCHAR(10), CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CON"& _ 
                "VERT (VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datetime)) AND (Diagnosis <>"& _ 
                " '') AND (Status = 'False') AND (DeleteOption = 'False') "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Diagnosis "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "UNION "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Diagnosis, COUNT(Female) AS female, COUNT(Male) AS male, '15-49' "& _ 
                "AS agerang "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         V_NewOutpatientDetail            "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Age BETW"& _ 
                "EEN 15 AND 49) AND (CAST(CONVERT (VARCHAR(10), CreateDate, 1) AS DateTime) BETWE"& _ 
                "EN CAST(CONVERT (VARCHAR(10), CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND C"& _ 
                "AST(CONVERT (VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datetime)) AND (Diagn"& _ 
                "osis <> '') AND (Status = 'False') AND (DeleteOption = 'False')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Diagno"& _ 
                "sis "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Diagnosis, COUNT(Female) AS female, COUNT(Male) AS male, '>"& _ 
                "=50' AS agerang "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         V_NewOutpatientDetail           "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE      (Age"& _ 
                " >= 50) AND (CAST(CONVERT (VARCHAR(10), CreateDate, 1) AS DateTime) BETWEEN CAST"& _ 
                "(CONVERT (VARCHAR(10), CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CON"& _ 
                "VERT (VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datetime)) AND (Diagnosis <>"& _ 
                " '') AND (Status = 'False')  AND (DeleteOption = 'False') "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Diagnosis"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT Diagnosis, COUNT(Female) AS female, COUNT(Male) AS male, '0-4' AS agerang "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM V_NewOutpatientDetail "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Age BETWEEN 0 AND 4) AND (CAST(CONVERT (VA"& _ 
                "RCHAR(10), CreateDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@"& _ 
                "DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@Date"& _ 
                "TO AS DATETIME), 1) AS Datetime)) AND (Diagnosis <> '') AND (Status = 'True')  A"& _ 
                "ND (DeleteOption = 'False')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Diagnosis "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Diagnosis, COUN"& _ 
                "T(Female) AS female, COUNT(Male) AS male, '5-14' AS agerang "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM V_NewOutpatie"& _ 
                "ntDetail "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Age BETWEEN 5 AND 14) AND (CAST(CONVERT (VARCHAR(10), CreateDa"& _ 
                "te, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@DateFrom AS DATETIM"& _ 
                "E), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@DateTO AS DATETIME), 1)"& _ 
                " AS Datetime)) AND (Diagnosis <> '') AND (Status = 'True')  AND (DeleteOption = "& _ 
                "'False')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Diagnosis "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Diagnosis, COUNT(Female) AS female,"& _ 
                " COUNT(Male) AS male, '15-49' AS agerang "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM V_NewOutpatientDetail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Ag"& _ 
                "e BETWEEN 15 AND 49) AND (CAST(CONVERT (VARCHAR(10), CreateDate, 1) AS DateTime)"& _ 
                " BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@DateFrom AS DATETIME), 1) AS Datetime)"& _ 
                " AND CAST(CONVERT (VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datetime)) AND "& _ 
                "(Diagnosis <> '') AND (Status = 'True')  AND (DeleteOption = 'False')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY "& _ 
                "Diagnosis "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Diagnosis, COUNT(Female) AS female, COUNT(Male) AS ma"& _ 
                "le, '>=50' AS agerang "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM V_NewOutpatientDetail "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Age >= 50) AND (CAST"& _ 
                "(CONVERT (VARCHAR(10), CreateDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR"& _ 
                "(10), CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10)"& _ 
                ", CAST(@DateTO AS DATETIME), 1) AS Datetime)) AND (Diagnosis <> '') AND (Status "& _ 
                "= 'True')  AND (DeleteOption = 'False')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Diagnosis"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOutPatientReport.DataTable1DataTable, ByVal DateTO As Date, ByVal DateFrom As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateTO,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DateTO As Date, ByVal DateFrom As Date) As DSOutPatientReport.DataTable1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateTO,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            Dim dataTable As DSOutPatientReport.DataTable1DataTable = New DSOutPatientReport.DataTable1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSOutPatientReport.DataTable1DataTable, ByVal DateTO As Date, ByVal DateFrom As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateTO,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByMonth(ByVal DateTO As Date, ByVal DateFrom As Date) As DSOutPatientReport.DataTable1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateTO,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            Dim dataTable As DSOutPatientReport.DataTable1DataTable = New DSOutPatientReport.DataTable1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByNewOut(ByVal dataTable As DSOutPatientReport.DataTable1DataTable, ByVal DateTO As Date, ByVal DateFrom As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateTO,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByNewOut(ByVal DateTO As Date, ByVal DateFrom As Date) As DSOutPatientReport.DataTable1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateTO,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            Dim dataTable As DSOutPatientReport.DataTable1DataTable = New DSOutPatientReport.DataTable1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByOld(ByVal dataTable As DSOutPatientReport.DataTable1DataTable, ByVal DateTO As Date, ByVal DateFrom As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateTO,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByOldOut(ByVal DateTO As Date, ByVal DateFrom As Date) As DSOutPatientReport.DataTable1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateTO,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            Dim dataTable As DSOutPatientReport.DataTable1DataTable = New DSOutPatientReport.DataTable1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TblOtherNewPatientTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TblOtherNewPatient"
            tableMapping.ColumnMappings.Add("PatientNo", "PatientNo")
            tableMapping.ColumnMappings.Add("NameKhmer", "NameKhmer")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Other", "Other")
            tableMapping.ColumnMappings.Add("Province", "Province")
            tableMapping.ColumnMappings.Add("District", "District")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     TblPatients.PatientNo, TblPatients.NameKhmer, TblPatients.Age, TblPati"& _ 
                "ents.Sex, TblNew_Old_OutPatient.Other, TblPatients.Province, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "     TblPatients.District"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         TblPatients INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "      TblNew_Old_OutPatient ON TblPatients.PatientNo = TblNew_Old_OutPatient.Pat"& _ 
                "ientNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (TblNew_Old_OutPatient.Other <> '') AND (TblNew_Old_OutPatient"& _ 
                ".Status = 'False')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND (CAST(CONVERT(VARCHAR(10), TblNew_Old_OutPatient.CreateD"& _ 
                "ate, 1) AS DateTime) BETWEEN CAST(CONVERT(VARCHAR(10), "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      C"& _ 
                "AST(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVERT(VARCHAR(10), CAST(@"& _ 
                "DateTO AS DATETIME), 1) AS Datetime))"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOutPatientReport.TblOtherNewPatientDataTable, ByVal DateFrom As Date, ByVal DateTO As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DateFrom As Date, ByVal DateTO As Date) As DSOutPatientReport.TblOtherNewPatientDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            Dim dataTable As DSOutPatientReport.TblOtherNewPatientDataTable = New DSOutPatientReport.TblOtherNewPatientDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TblOtherOldPatientTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TblOtherOldPatient"
            tableMapping.ColumnMappings.Add("PatientNo", "PatientNo")
            tableMapping.ColumnMappings.Add("NameKhmer", "NameKhmer")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Other", "Other")
            tableMapping.ColumnMappings.Add("Province", "Province")
            tableMapping.ColumnMappings.Add("District", "District")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     TblPatients.PatientNo, TblPatients.NameKhmer, TblPatients.Age, TblPati"& _ 
                "ents.Sex, TblNew_Old_OutPatient.Other, TblPatients.Province, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "     TblPatients.District"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         TblPatients INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "      TblNew_Old_OutPatient ON TblPatients.PatientNo = TblNew_Old_OutPatient.Pat"& _ 
                "ientNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (TblNew_Old_OutPatient.Other <> '') AND (TblNew_Old_OutPatient"& _ 
                ".Status = 'True') AND (CAST(CONVERT(VARCHAR(10), "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      TblNew_"& _ 
                "Old_OutPatient.CreateDate, 1) AS DateTime) BETWEEN CAST(CONVERT(VARCHAR(10), CAS"& _ 
                "T(@DateFrom AS DATETIME), 1) AS Datetime) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      CAST(CONVE"& _ 
                "RT(VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datetime))"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOutPatientReport.TblOtherOldPatientDataTable, ByVal DateFrom As Date, ByVal DateTO As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DateFrom As Date, ByVal DateTO As Date) As DSOutPatientReport.TblOtherOldPatientDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            Dim dataTable As DSOutPatientReport.TblOtherOldPatientDataTable = New DSOutPatientReport.TblOtherOldPatientDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class V_NewOutpatientDetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "V_NewOutpatientDetail"
            tableMapping.ColumnMappings.Add("NewOutPatientNo", "NewOutPatientNo")
            tableMapping.ColumnMappings.Add("PatientNo", "PatientNo")
            tableMapping.ColumnMappings.Add("OlePatientNo", "OlePatientNo")
            tableMapping.ColumnMappings.Add("ReceiptNo", "ReceiptNo")
            tableMapping.ColumnMappings.Add("NameEng", "NameEng")
            tableMapping.ColumnMappings.Add("NameKhmer", "NameKhmer")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("PatientFee", "PatientFee")
            tableMapping.ColumnMappings.Add("PatientDolar", "PatientDolar")
            tableMapping.ColumnMappings.Add("Diagnosis", "Diagnosis")
            tableMapping.ColumnMappings.Add("Prescribed", "Prescribed")
            tableMapping.ColumnMappings.Add("Dispensed", "Dispensed")
            tableMapping.ColumnMappings.Add("Hearing", "Hearing")
            tableMapping.ColumnMappings.Add("Understand", "Understand")
            tableMapping.ColumnMappings.Add("Seeing", "Seeing")
            tableMapping.ColumnMappings.Add("Physical", "Physical")
            tableMapping.ColumnMappings.Add("Other", "Other")
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate")
            tableMapping.ColumnMappings.Add("TypeDiagnosis", "TypeDiagnosis")
            tableMapping.ColumnMappings.Add("DeleteOption", "DeleteOption")
            tableMapping.ColumnMappings.Add("VAStatus", "VAStatus")
            tableMapping.ColumnMappings.Add("Achieve", "Achieve")
            tableMapping.ColumnMappings.Add("Male", "Male")
            tableMapping.ColumnMappings.Add("Female", "Female")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("ComBindRefferal", "ComBindRefferal")
            tableMapping.ColumnMappings.Add("DeleteNote", "DeleteNote")
            tableMapping.ColumnMappings.Add("Telephone", "Telephone")
            tableMapping.ColumnMappings.Add("Occupation", "Occupation")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        NewOutPatientNo, PatientNo, OlePatientNo, ReceiptNo, NameEng, NameK"& _ 
                "hmer, Age, Sex, Address, PatientFee, PatientDolar, Diagnosis, Prescribed, Dispen"& _ 
                "sed, Hearing, Understand, Seeing, Physical, Other, CreateDate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "          TypeDiagnosis, DeleteOption, VAStatus, Achieve, Male, Female, Status, "& _ 
                "ComBindRefferal, DeleteNote, Telephone, Occupation"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            V_NewOutpati"& _ 
                "entDetail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Achieve, Address, Age, ComBindRefferal, CreateDate, DeleteNote, DeleteOpti"& _ 
                "on, Diagnosis, Dispensed, Female, Hearing, Male, NameEng, NameKhmer, NewOutPatie"& _ 
                "ntNo, Occupation, OlePatientNo, Other, PatientDolar, PatientFee, PatientNo, Phys"& _ 
                "ical, Prescribed, ReceiptNo, Seeing, Sex, Status, Telephone, TypeDiagnosis, Unde"& _ 
                "rstand, VAStatus FROM V_NewOutpatientDetail WHERE (CAST(CONVERT (VARCHAR(10), Cr"& _ 
                "eateDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@DateFrom AS D"& _ 
                "ATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@DateTo AS DATETIM"& _ 
                "E), 1) AS Datetime)) AND (Status = @Status) AND (RTRIM(LTRIM(Diagnosis)) = RTRIM"& _ 
                "(LTRIM(''))) ORDER BY NewOutPatientNo"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTo", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Achieve, Address, Age, ComBindRefferal, CreateDate, DeleteNote, DeleteOpti"& _ 
                "on, Diagnosis, Dispensed, Female, Hearing, Male, NameEng, NameKhmer, NewOutPatie"& _ 
                "ntNo, Occupation, OlePatientNo, Other, PatientDolar, PatientFee, PatientNo, Phys"& _ 
                "ical, Prescribed, ReceiptNo, Seeing, Sex, Status, Telephone, TypeDiagnosis, Unde"& _ 
                "rstand, VAStatus FROM V_NewOutpatientDetail WHERE (CAST(CONVERT (VARCHAR(10), Cr"& _ 
                "eateDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@DateFrom AS D"& _ 
                "ATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@DateTo AS DATETIM"& _ 
                "E), 1) AS Datetime)) AND (Status = @Status)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTo", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT Achieve, Address, Age, ComBindRefferal, CreateDate, DeleteNote, DeleteOpti"& _ 
                "on, Diagnosis, Dispensed, Female, Hearing, Male, NameEng, NameKhmer, NewOutPatie"& _ 
                "ntNo, Occupation, OlePatientNo, Other, PatientDolar, PatientFee, PatientNo, Phys"& _ 
                "ical, Prescribed, ReceiptNo, Seeing, Sex, Status, Telephone, TypeDiagnosis, Unde"& _ 
                "rstand, VAStatus FROM V_NewOutpatientDetail WHERE (CAST(CONVERT (VARCHAR(10), Cr"& _ 
                "eateDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@DateFrom AS D"& _ 
                "ATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@DateTo AS DATETIM"& _ 
                "E), 1) AS Datetime)) AND (Diagnosis = @Diagnosis) AND (Status = @Status)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTo", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Diagnosis", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Diagnosis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT Achieve, Address, Age, ComBindRefferal, CreateDate, DeleteNote, DeleteOpti"& _ 
                "on, Diagnosis, Dispensed, Female, Hearing, Male, NameEng, NameKhmer, NewOutPatie"& _ 
                "ntNo, Occupation, OlePatientNo, Other, PatientDolar, PatientFee, PatientNo, Phys"& _ 
                "ical, Prescribed, ReceiptNo, Seeing, Sex, Status, Telephone, TypeDiagnosis, Unde"& _ 
                "rstand, VAStatus FROM V_NewOutpatientDetail WHERE (CAST(CONVERT (VARCHAR(10), Cr"& _ 
                "eateDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAST(@DateFrom AS D"& _ 
                "ATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@DateTo AS DATETIM"& _ 
                "E), 1) AS Datetime)) AND (DeleteOption = 1) AND (Status = @Status)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTo", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOutPatientReport.V_NewOutpatientDetailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOutPatientReport.V_NewOutpatientDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOutPatientReport.V_NewOutpatientDetailDataTable = New DSOutPatientReport.V_NewOutpatientDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSOutPatientReport.V_NewOutpatientDetailDataTable, ByVal DateFrom As Date, ByVal DateTo As Date, ByVal Status As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTo,Date)
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Status.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectPatientNotFillDiagnosis(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal Status As Global.System.Nullable(Of Boolean)) As DSOutPatientReport.V_NewOutpatientDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTo,Date)
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Status.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSOutPatientReport.V_NewOutpatientDetailDataTable = New DSOutPatientReport.V_NewOutpatientDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSOutPatientReport.V_NewOutpatientDetailDataTable, ByVal DateFrom As Date, ByVal DateTo As Date, ByVal Status As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTo,Date)
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Status.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectAllDiagnosis(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal Status As Global.System.Nullable(Of Boolean)) As DSOutPatientReport.V_NewOutpatientDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTo,Date)
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Status.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSOutPatientReport.V_NewOutpatientDetailDataTable = New DSOutPatientReport.V_NewOutpatientDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy2(ByVal dataTable As DSOutPatientReport.V_NewOutpatientDetailDataTable, ByVal DateFrom As Date, ByVal DateTo As Date, ByVal Diagnosis As String, ByVal Status As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTo,Date)
            If (Diagnosis Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Diagnosis,String)
            End If
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Status.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectWithDiagnosis(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal Diagnosis As String, ByVal Status As Global.System.Nullable(Of Boolean)) As DSOutPatientReport.V_NewOutpatientDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTo,Date)
            If (Diagnosis Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Diagnosis,String)
            End If
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Status.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSOutPatientReport.V_NewOutpatientDetailDataTable = New DSOutPatientReport.V_NewOutpatientDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy3(ByVal dataTable As DSOutPatientReport.V_NewOutpatientDetailDataTable, ByVal DateFrom As Date, ByVal DateTo As Date, ByVal Status As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTo,Date)
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Status.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectPatientCancelBook(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal Status As Global.System.Nullable(Of Boolean)) As DSOutPatientReport.V_NewOutpatientDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTo,Date)
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Status.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSOutPatientReport.V_NewOutpatientDetailDataTable = New DSOutPatientReport.V_NewOutpatientDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class V_NewOutpatientDetail1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "V_NewOutpatientDetail1"
            tableMapping.ColumnMappings.Add("NewOutPatientNo", "NewOutPatientNo")
            tableMapping.ColumnMappings.Add("PatientNo", "PatientNo")
            tableMapping.ColumnMappings.Add("OlePatientNo", "OlePatientNo")
            tableMapping.ColumnMappings.Add("ReceiptNo", "ReceiptNo")
            tableMapping.ColumnMappings.Add("NameEng", "NameEng")
            tableMapping.ColumnMappings.Add("NameKhmer", "NameKhmer")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("PatientFee", "PatientFee")
            tableMapping.ColumnMappings.Add("PatientDolar", "PatientDolar")
            tableMapping.ColumnMappings.Add("Diagnosis", "Diagnosis")
            tableMapping.ColumnMappings.Add("Prescribed", "Prescribed")
            tableMapping.ColumnMappings.Add("Dispensed", "Dispensed")
            tableMapping.ColumnMappings.Add("Hearing", "Hearing")
            tableMapping.ColumnMappings.Add("Understand", "Understand")
            tableMapping.ColumnMappings.Add("Seeing", "Seeing")
            tableMapping.ColumnMappings.Add("Physical", "Physical")
            tableMapping.ColumnMappings.Add("Other", "Other")
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate")
            tableMapping.ColumnMappings.Add("TypeDiagnosis", "TypeDiagnosis")
            tableMapping.ColumnMappings.Add("DeleteOption", "DeleteOption")
            tableMapping.ColumnMappings.Add("VAStatus", "VAStatus")
            tableMapping.ColumnMappings.Add("Achieve", "Achieve")
            tableMapping.ColumnMappings.Add("Male", "Male")
            tableMapping.ColumnMappings.Add("Female", "Female")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("ComBindRefferal", "ComBindRefferal")
            tableMapping.ColumnMappings.Add("DeleteNote", "DeleteNote")
            tableMapping.ColumnMappings.Add("Telephone", "Telephone")
            tableMapping.ColumnMappings.Add("VA_PLeft", "VA_PLeft")
            tableMapping.ColumnMappings.Add("VA_PRight", "VA_PRight")
            tableMapping.ColumnMappings.Add("Occupation", "Occupation")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Achieve, Address, Age, ComBindRefferal, CreateDate, DeleteNote, Del"& _ 
                "eteOption, Diagnosis, Dispensed, Female, Hearing, Male, NameEng, NameKhmer, NewO"& _ 
                "utPatientNo, OlePatientNo, Other, PatientDolar, PatientFee, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "       PatientNo, Physical, Prescribed, ReceiptNo, Seeing, Sex, Status, Telephon"& _ 
                "e, TypeDiagnosis, Understand, VAStatus, VA_PLeft, VA_PRight, Occupation"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         V_NewOutpatientDetail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Status = 0) AND (Diagnosis <> '') "& _ 
                "AND (DeleteOption = 0) AND (PatientNo NOT IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                             (SELE"& _ 
                "CT        PatientNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                               FROM            VIEW_PATIENT"& _ 
                "_OPERATORED))"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Achieve, Address, Age, ComBindRefferal, CreateDate, DeleteNote, DeleteOpti"& _ 
                "on, Diagnosis, Dispensed, Female, Hearing, Male, NameEng, NameKhmer, NewOutPatie"& _ 
                "ntNo, Occupation, OlePatientNo, Other, PatientDolar, PatientFee, PatientNo, Phys"& _ 
                "ical, Prescribed, ReceiptNo, Seeing, Sex, Status, Telephone, TypeDiagnosis, Unde"& _ 
                "rstand, VAStatus, VA_PLeft, VA_PRight FROM V_NewOutpatientDetail WHERE (Status ="& _ 
                " 0) AND (Diagnosis <> '') AND (DeleteOption = 0) AND (PatientNo NOT IN (SELECT P"& _ 
                "atientNo FROM VIEW_PATIENT_OPERATORED WHERE (DeleteOption = 0))) AND (CAST(CONVE"& _ 
                "RT (VARCHAR(10), CreateDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), "& _ 
                "CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST"& _ 
                "(@DateTo AS DATETIME), 1) AS Datetime)) ORDER BY PatientNo"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTo", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOutPatientReport.V_NewOutpatientDetail1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOutPatientReport.V_NewOutpatientDetail1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOutPatientReport.V_NewOutpatientDetail1DataTable = New DSOutPatientReport.V_NewOutpatientDetail1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSOutPatientReport.V_NewOutpatientDetail1DataTable, ByVal DateFrom As Date, ByVal DateTo As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTo,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectPatientNotOP(ByVal DateFrom As Date, ByVal DateTo As Date) As DSOutPatientReport.V_NewOutpatientDetail1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTo,Date)
            Dim dataTable As DSOutPatientReport.V_NewOutpatientDetail1DataTable = New DSOutPatientReport.V_NewOutpatientDetail1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TblVATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TblVA"
            tableMapping.ColumnMappings.Add("PatientNo", "PatientNo")
            tableMapping.ColumnMappings.Add("PlainValue", "PlainValue")
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate")
            tableMapping.ColumnMappings.Add("Eyes", "Eyes")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select PatientNo,PlainValue ,CreateDate, 'Left' as Eyes from TblVALeft "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION al"& _ 
                "l"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"select PatientNo,PlainValue ,CreateDate, 'Right' as Eyes from TblVARight "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"or"& _ 
                "der by CreateDate"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PatientNo, PlainValue, CreateDate, 'Left' AS Eyes FROM TblVALeft "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE ("& _ 
                "CAST(CONVERT (VARCHAR(10), CreateDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VAR"& _ 
                "CHAR(10), CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR"& _ 
                "(10), CAST(@DateTo AS DATETIME), 1) AS Datetime)) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION ALL "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PatientNo"& _ 
                ", PlainValue, CreateDate, 'Right' AS Eyes FROM TblVARight "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (CAST(CONVERT "& _ 
                "(VARCHAR(10), CreateDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), CAS"& _ 
                "T(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST(@D"& _ 
                "ateTo AS DATETIME), 1) AS Datetime)) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY CreateDate,Eyes"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTo", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOutPatientReport.TblVADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOutPatientReport.TblVADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOutPatientReport.TblVADataTable = New DSOutPatientReport.TblVADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSOutPatientReport.TblVADataTable, ByVal DateFrom As Date, ByVal DateTo As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTo,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectVA(ByVal DateFrom As Date, ByVal DateTo As Date) As DSOutPatientReport.TblVADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTo,Date)
            Dim dataTable As DSOutPatientReport.TblVADataTable = New DSOutPatientReport.TblVADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TblReferToTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TblReferTo"
            tableMapping.ColumnMappings.Add("ReferNo", "ReferNo")
            tableMapping.ColumnMappings.Add("PatientNo", "PatientNo")
            tableMapping.ColumnMappings.Add("ReferTo", "ReferTo")
            tableMapping.ColumnMappings.Add("ReferDate", "ReferDate")
            tableMapping.ColumnMappings.Add("Note", "Note")
            tableMapping.ColumnMappings.Add("Diagnosis", "Diagnosis")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [TblReferTo] WHERE (([ReferNo] = @Original_ReferNo) AND ((@IsNull_Pat"& _ 
                "ientNo = 1 AND [PatientNo] IS NULL) OR ([PatientNo] = @Original_PatientNo)) AND "& _ 
                "((@IsNull_ReferTo = 1 AND [ReferTo] IS NULL) OR ([ReferTo] = @Original_ReferTo))"& _ 
                " AND ((@IsNull_ReferDate = 1 AND [ReferDate] IS NULL) OR ([ReferDate] = @Origina"& _ 
                "l_ReferDate)) AND ((@IsNull_Note = 1 AND [Note] IS NULL) OR ([Note] = @Original_"& _ 
                "Note)) AND ((@IsNull_Diagnosis = 1 AND [Diagnosis] IS NULL) OR ([Diagnosis] = @O"& _ 
                "riginal_Diagnosis)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReferNo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ReferNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PatientNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PatientNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PatientNo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PatientNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReferTo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferTo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReferTo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferTo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReferDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReferDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Note", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Note", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Note", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Note", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Diagnosis", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Diagnosis", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Diagnosis", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Diagnosis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TblReferTo] ([PatientNo], [ReferTo], [ReferDate], [Note], [Diagnosis"& _ 
                "]) VALUES (@PatientNo, @ReferTo, @ReferDate, @Note, @Diagnosis);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ReferNo"& _ 
                ", PatientNo, ReferTo, ReferDate, Note, Diagnosis FROM TblReferTo WHERE (ReferNo "& _ 
                "= SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PatientNo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PatientNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReferTo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferTo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReferDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Note", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Note", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Diagnosis", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Diagnosis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [TblReferTo] SET [PatientNo] = @PatientNo, [ReferTo] = @ReferTo, [ReferDat"& _ 
                "e] = @ReferDate, [Note] = @Note, [Diagnosis] = @Diagnosis WHERE (([ReferNo] = @O"& _ 
                "riginal_ReferNo) AND ((@IsNull_PatientNo = 1 AND [PatientNo] IS NULL) OR ([Patie"& _ 
                "ntNo] = @Original_PatientNo)) AND ((@IsNull_ReferTo = 1 AND [ReferTo] IS NULL) O"& _ 
                "R ([ReferTo] = @Original_ReferTo)) AND ((@IsNull_ReferDate = 1 AND [ReferDate] I"& _ 
                "S NULL) OR ([ReferDate] = @Original_ReferDate)) AND ((@IsNull_Note = 1 AND [Note"& _ 
                "] IS NULL) OR ([Note] = @Original_Note)) AND ((@IsNull_Diagnosis = 1 AND [Diagno"& _ 
                "sis] IS NULL) OR ([Diagnosis] = @Original_Diagnosis)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ReferNo, Patient"& _ 
                "No, ReferTo, ReferDate, Note, Diagnosis FROM TblReferTo WHERE (ReferNo = @ReferN"& _ 
                "o)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PatientNo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PatientNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReferTo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferTo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReferDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Note", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Note", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Diagnosis", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Diagnosis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReferNo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ReferNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PatientNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PatientNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PatientNo", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PatientNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReferTo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferTo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReferTo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferTo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReferDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReferDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReferDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Note", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Note", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Note", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Note", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Diagnosis", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Diagnosis", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Diagnosis", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Diagnosis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReferNo", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ReferNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ReferNo, PatientNo, ReferTo, ReferDate, Note, Diagnosis"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM      "& _ 
                "      TblReferTo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSOutPatientReport.TblReferToDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSOutPatientReport.TblReferToDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSOutPatientReport.TblReferToDataTable = New DSOutPatientReport.TblReferToDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSOutPatientReport.TblReferToDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSOutPatientReport) As Integer
            Return Me.Adapter.Update(dataSet, "TblReferTo")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ReferNo As Decimal, ByVal Original_PatientNo As Global.System.Nullable(Of Decimal), ByVal Original_ReferTo As String, ByVal Original_ReferDate As Global.System.Nullable(Of Date), ByVal Original_Note As String, ByVal Original_Diagnosis As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ReferNo,Decimal)
            If (Original_PatientNo.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PatientNo.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_ReferTo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ReferTo,String)
            End If
            If (Original_ReferDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ReferDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Note Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Note,String)
            End If
            If (Original_Diagnosis Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Diagnosis,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PatientNo As Global.System.Nullable(Of Decimal), ByVal ReferTo As String, ByVal ReferDate As Global.System.Nullable(Of Date), ByVal Note As String, ByVal Diagnosis As String) As Integer
            If (PatientNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PatientNo.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ReferTo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ReferTo,String)
            End If
            If (ReferDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ReferDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Note Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Note,String)
            End If
            If (Diagnosis Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Diagnosis,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PatientNo As Global.System.Nullable(Of Decimal), ByVal ReferTo As String, ByVal ReferDate As Global.System.Nullable(Of Date), ByVal Note As String, ByVal Diagnosis As String, ByVal Original_ReferNo As Decimal, ByVal Original_PatientNo As Global.System.Nullable(Of Decimal), ByVal Original_ReferTo As String, ByVal Original_ReferDate As Global.System.Nullable(Of Date), ByVal Original_Note As String, ByVal Original_Diagnosis As String, ByVal ReferNo As Decimal) As Integer
            If (PatientNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PatientNo.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ReferTo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ReferTo,String)
            End If
            If (ReferDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ReferDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Note Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Note,String)
            End If
            If (Diagnosis Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Diagnosis,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ReferNo,Decimal)
            If (Original_PatientNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PatientNo.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_ReferTo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ReferTo,String)
            End If
            If (Original_ReferDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ReferDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_Note Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Note,String)
            End If
            If (Original_Diagnosis Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Diagnosis,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(ReferNo,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PatientNo As Global.System.Nullable(Of Decimal), ByVal ReferTo As String, ByVal ReferDate As Global.System.Nullable(Of Date), ByVal Note As String, ByVal Diagnosis As String, ByVal Original_ReferNo As Decimal, ByVal Original_PatientNo As Global.System.Nullable(Of Decimal), ByVal Original_ReferTo As String, ByVal Original_ReferDate As Global.System.Nullable(Of Date), ByVal Original_Note As String, ByVal Original_Diagnosis As String) As Integer
            Return Me.Update(PatientNo, ReferTo, ReferDate, Note, Diagnosis, Original_ReferNo, Original_PatientNo, Original_ReferTo, Original_ReferDate, Original_Note, Original_Diagnosis, Original_ReferNo)
        End Function
    End Class
End Namespace
