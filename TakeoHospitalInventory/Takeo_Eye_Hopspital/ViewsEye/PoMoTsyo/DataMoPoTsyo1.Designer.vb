'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5448
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataMoPoTsyo"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataMoPoTsyo
    Inherits Global.System.Data.DataSet
    
    Private tableV_MoPoTyso As V_MoPoTysoDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("V_MoPoTyso")) Is Nothing) Then
                MyBase.Tables.Add(New V_MoPoTysoDataTable(ds.Tables("V_MoPoTyso")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_MoPoTyso() As V_MoPoTysoDataTable
        Get
            Return Me.tableV_MoPoTyso
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataMoPoTsyo = CType(MyBase.Clone,DataMoPoTsyo)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("V_MoPoTyso")) Is Nothing) Then
                MyBase.Tables.Add(New V_MoPoTysoDataTable(ds.Tables("V_MoPoTyso")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableV_MoPoTyso = CType(MyBase.Tables("V_MoPoTyso"),V_MoPoTysoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_MoPoTyso) Is Nothing) Then
                Me.tableV_MoPoTyso.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataMoPoTsyo"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataMoPoTsyo.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableV_MoPoTyso = New V_MoPoTysoDataTable
        MyBase.Tables.Add(Me.tableV_MoPoTyso)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_MoPoTyso() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataMoPoTsyo = New DataMoPoTsyo
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub V_MoPoTysoRowChangeEventHandler(ByVal sender As Object, ByVal e As V_MoPoTysoRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_MoPoTysoDataTable
        Inherits Global.System.Data.TypedTableBase(Of V_MoPoTysoRow)
        
        Private columnPatientNo As Global.System.Data.DataColumn
        
        Private columnMoPoTsyCode As Global.System.Data.DataColumn
        
        Private columnNameEng As Global.System.Data.DataColumn
        
        Private columnNameKhmer As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnMale As Global.System.Data.DataColumn
        
        Private columnFemale As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnDiagnosis As Global.System.Data.DataColumn
        
        Private columnTreatment As Global.System.Data.DataColumn
        
        Private columnTreatmentFee As Global.System.Data.DataColumn
        
        Private columnAppDate As Global.System.Data.DataColumn
        
        Private columnFilled As Global.System.Data.DataColumn
        
        Private columnMoPoID As Global.System.Data.DataColumn
        
        Private columnDRetina_desease As Global.System.Data.DataColumn
        
        Private columnDCataract As Global.System.Data.DataColumn
        
        Private columnDPteriguim As Global.System.Data.DataColumn
        
        Private columnDGlaucom As Global.System.Data.DataColumn
        
        Private columnDRefractive_error As Global.System.Data.DataColumn
        
        Private columnDOther_deseases As Global.System.Data.DataColumn
        
        Private columnCreateDate As Global.System.Data.DataColumn
        
        Private columnOPTReceipt As Global.System.Data.DataColumn
        
        Private columnOPTReceiptNo As Global.System.Data.DataColumn
        
        Private columnInReceipt As Global.System.Data.DataColumn
        
        Private columnInReceiptNo As Global.System.Data.DataColumn
        
        Private columnOldReceipt As Global.System.Data.DataColumn
        
        Private columnOldReceiptNo As Global.System.Data.DataColumn
        
        Private columnNewReceipt As Global.System.Data.DataColumn
        
        Private columnNewReceiptNo As Global.System.Data.DataColumn
        
        Private columnPeriodDiabete As Global.System.Data.DataColumn
        
        Private columnTyeOfDR As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_MoPoTyso"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MoPoTsyCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoPoTsyCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameEngColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameEng
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameKhmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameKhmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FemaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TreatmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTreatment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TreatmentFeeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTreatmentFee
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AppDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAppDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FilledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFilled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MoPoIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoPoID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DRetina_deseaseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDRetina_desease
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DCataractColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDCataract
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPteriguimColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPteriguim
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DGlaucomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDGlaucom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DRefractive_errorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDRefractive_error
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOther_deseasesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOther_deseases
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTReceiptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTReceipt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTReceiptNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTReceiptNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InReceiptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInReceipt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InReceiptNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInReceiptNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OldReceiptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldReceipt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OldReceiptNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldReceiptNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewReceiptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewReceipt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewReceiptNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewReceiptNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodDiabeteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodDiabete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TyeOfDRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTyeOfDR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_MoPoTysoRow
            Get
                Return CType(Me.Rows(index),V_MoPoTysoRow)
            End Get
        End Property
        
        Public Event V_MoPoTysoRowChanging As V_MoPoTysoRowChangeEventHandler
        
        Public Event V_MoPoTysoRowChanged As V_MoPoTysoRowChangeEventHandler
        
        Public Event V_MoPoTysoRowDeleting As V_MoPoTysoRowChangeEventHandler
        
        Public Event V_MoPoTysoRowDeleted As V_MoPoTysoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_MoPoTysoRow(ByVal row As V_MoPoTysoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_MoPoTysoRow( _
                    ByVal PatientNo As Decimal,  _
                    ByVal MoPoTsyCode As String,  _
                    ByVal NameEng As String,  _
                    ByVal NameKhmer As String,  _
                    ByVal Age As Decimal,  _
                    ByVal Male As String,  _
                    ByVal Female As String,  _
                    ByVal Sex As String,  _
                    ByVal Address As String,  _
                    ByVal Diagnosis As String,  _
                    ByVal Treatment As String,  _
                    ByVal TreatmentFee As Decimal,  _
                    ByVal AppDate As Date,  _
                    ByVal Filled As Boolean,  _
                    ByVal MoPoID As Decimal,  _
                    ByVal DRetina_desease As Boolean,  _
                    ByVal DCataract As Boolean,  _
                    ByVal DPteriguim As Boolean,  _
                    ByVal DGlaucom As Boolean,  _
                    ByVal DRefractive_error As Boolean,  _
                    ByVal DOther_deseases As Boolean,  _
                    ByVal CreateDate As Date,  _
                    ByVal OPTReceipt As Decimal,  _
                    ByVal OPTReceiptNo As Decimal,  _
                    ByVal InReceipt As Decimal,  _
                    ByVal InReceiptNo As Decimal,  _
                    ByVal OldReceipt As Decimal,  _
                    ByVal OldReceiptNo As Decimal,  _
                    ByVal NewReceipt As Decimal,  _
                    ByVal NewReceiptNo As Decimal,  _
                    ByVal PeriodDiabete As String,  _
                    ByVal TyeOfDR As String) As V_MoPoTysoRow
            Dim rowV_MoPoTysoRow As V_MoPoTysoRow = CType(Me.NewRow,V_MoPoTysoRow)
            Dim columnValuesArray() As Object = New Object() {PatientNo, MoPoTsyCode, NameEng, NameKhmer, Age, Male, Female, Sex, Address, Diagnosis, Treatment, TreatmentFee, AppDate, Filled, MoPoID, DRetina_desease, DCataract, DPteriguim, DGlaucom, DRefractive_error, DOther_deseases, CreateDate, OPTReceipt, OPTReceiptNo, InReceipt, InReceiptNo, OldReceipt, OldReceiptNo, NewReceipt, NewReceiptNo, PeriodDiabete, TyeOfDR}
            rowV_MoPoTysoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowV_MoPoTysoRow)
            Return rowV_MoPoTysoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As V_MoPoTysoDataTable = CType(MyBase.Clone,V_MoPoTysoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New V_MoPoTysoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPatientNo = MyBase.Columns("PatientNo")
            Me.columnMoPoTsyCode = MyBase.Columns("MoPoTsyCode")
            Me.columnNameEng = MyBase.Columns("NameEng")
            Me.columnNameKhmer = MyBase.Columns("NameKhmer")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnMale = MyBase.Columns("Male")
            Me.columnFemale = MyBase.Columns("Female")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnDiagnosis = MyBase.Columns("Diagnosis")
            Me.columnTreatment = MyBase.Columns("Treatment")
            Me.columnTreatmentFee = MyBase.Columns("TreatmentFee")
            Me.columnAppDate = MyBase.Columns("AppDate")
            Me.columnFilled = MyBase.Columns("Filled")
            Me.columnMoPoID = MyBase.Columns("MoPoID")
            Me.columnDRetina_desease = MyBase.Columns("DRetina_desease")
            Me.columnDCataract = MyBase.Columns("DCataract")
            Me.columnDPteriguim = MyBase.Columns("DPteriguim")
            Me.columnDGlaucom = MyBase.Columns("DGlaucom")
            Me.columnDRefractive_error = MyBase.Columns("DRefractive_error")
            Me.columnDOther_deseases = MyBase.Columns("DOther_deseases")
            Me.columnCreateDate = MyBase.Columns("CreateDate")
            Me.columnOPTReceipt = MyBase.Columns("OPTReceipt")
            Me.columnOPTReceiptNo = MyBase.Columns("OPTReceiptNo")
            Me.columnInReceipt = MyBase.Columns("InReceipt")
            Me.columnInReceiptNo = MyBase.Columns("InReceiptNo")
            Me.columnOldReceipt = MyBase.Columns("OldReceipt")
            Me.columnOldReceiptNo = MyBase.Columns("OldReceiptNo")
            Me.columnNewReceipt = MyBase.Columns("NewReceipt")
            Me.columnNewReceiptNo = MyBase.Columns("NewReceiptNo")
            Me.columnPeriodDiabete = MyBase.Columns("PeriodDiabete")
            Me.columnTyeOfDR = MyBase.Columns("TyeOfDR")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPatientNo = New Global.System.Data.DataColumn("PatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientNo)
            Me.columnMoPoTsyCode = New Global.System.Data.DataColumn("MoPoTsyCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoPoTsyCode)
            Me.columnNameEng = New Global.System.Data.DataColumn("NameEng", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameEng)
            Me.columnNameKhmer = New Global.System.Data.DataColumn("NameKhmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameKhmer)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnMale = New Global.System.Data.DataColumn("Male", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMale)
            Me.columnFemale = New Global.System.Data.DataColumn("Female", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemale)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnDiagnosis = New Global.System.Data.DataColumn("Diagnosis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiagnosis)
            Me.columnTreatment = New Global.System.Data.DataColumn("Treatment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTreatment)
            Me.columnTreatmentFee = New Global.System.Data.DataColumn("TreatmentFee", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTreatmentFee)
            Me.columnAppDate = New Global.System.Data.DataColumn("AppDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAppDate)
            Me.columnFilled = New Global.System.Data.DataColumn("Filled", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFilled)
            Me.columnMoPoID = New Global.System.Data.DataColumn("MoPoID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoPoID)
            Me.columnDRetina_desease = New Global.System.Data.DataColumn("DRetina_desease", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDRetina_desease)
            Me.columnDCataract = New Global.System.Data.DataColumn("DCataract", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDCataract)
            Me.columnDPteriguim = New Global.System.Data.DataColumn("DPteriguim", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPteriguim)
            Me.columnDGlaucom = New Global.System.Data.DataColumn("DGlaucom", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDGlaucom)
            Me.columnDRefractive_error = New Global.System.Data.DataColumn("DRefractive_error", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDRefractive_error)
            Me.columnDOther_deseases = New Global.System.Data.DataColumn("DOther_deseases", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOther_deseases)
            Me.columnCreateDate = New Global.System.Data.DataColumn("CreateDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDate)
            Me.columnOPTReceipt = New Global.System.Data.DataColumn("OPTReceipt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTReceipt)
            Me.columnOPTReceiptNo = New Global.System.Data.DataColumn("OPTReceiptNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTReceiptNo)
            Me.columnInReceipt = New Global.System.Data.DataColumn("InReceipt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInReceipt)
            Me.columnInReceiptNo = New Global.System.Data.DataColumn("InReceiptNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInReceiptNo)
            Me.columnOldReceipt = New Global.System.Data.DataColumn("OldReceipt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldReceipt)
            Me.columnOldReceiptNo = New Global.System.Data.DataColumn("OldReceiptNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldReceiptNo)
            Me.columnNewReceipt = New Global.System.Data.DataColumn("NewReceipt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewReceipt)
            Me.columnNewReceiptNo = New Global.System.Data.DataColumn("NewReceiptNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewReceiptNo)
            Me.columnPeriodDiabete = New Global.System.Data.DataColumn("PeriodDiabete", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodDiabete)
            Me.columnTyeOfDR = New Global.System.Data.DataColumn("TyeOfDR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTyeOfDR)
            Me.columnPatientNo.AllowDBNull = false
            Me.columnMoPoTsyCode.MaxLength = 50
            Me.columnNameEng.MaxLength = 50
            Me.columnNameKhmer.MaxLength = 50
            Me.columnMale.MaxLength = 1
            Me.columnFemale.MaxLength = 1
            Me.columnSex.MaxLength = 1
            Me.columnAddress.MaxLength = 1000
            Me.columnTreatment.MaxLength = 100
            Me.columnMoPoID.AllowDBNull = false
            Me.columnPeriodDiabete.MaxLength = 10
            Me.columnTyeOfDR.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_MoPoTysoRow() As V_MoPoTysoRow
            Return CType(Me.NewRow,V_MoPoTysoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New V_MoPoTysoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(V_MoPoTysoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_MoPoTysoRowChangedEvent) Is Nothing) Then
                RaiseEvent V_MoPoTysoRowChanged(Me, New V_MoPoTysoRowChangeEvent(CType(e.Row,V_MoPoTysoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_MoPoTysoRowChangingEvent) Is Nothing) Then
                RaiseEvent V_MoPoTysoRowChanging(Me, New V_MoPoTysoRowChangeEvent(CType(e.Row,V_MoPoTysoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_MoPoTysoRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_MoPoTysoRowDeleted(Me, New V_MoPoTysoRowChangeEvent(CType(e.Row,V_MoPoTysoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_MoPoTysoRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_MoPoTysoRowDeleting(Me, New V_MoPoTysoRowChangeEvent(CType(e.Row,V_MoPoTysoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_MoPoTysoRow(ByVal row As V_MoPoTysoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataMoPoTsyo = New DataMoPoTsyo
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_MoPoTysoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_MoPoTysoRow
        Inherits Global.System.Data.DataRow
        
        Private tableV_MoPoTyso As V_MoPoTysoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_MoPoTyso = CType(Me.Table,V_MoPoTysoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientNo() As Decimal
            Get
                Return CType(Me(Me.tableV_MoPoTyso.PatientNoColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_MoPoTyso.PatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MoPoTsyCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.MoPoTsyCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MoPoTsyCode' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.MoPoTsyCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameEng() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.NameEngColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameEng' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.NameEngColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameKhmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.NameKhmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameKhmer' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.NameKhmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Male() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.MaleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Male' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.MaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Female() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.FemaleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Female' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.FemaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diagnosis() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.DiagnosisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diagnosis' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.DiagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Treatment() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.TreatmentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Treatment' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.TreatmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TreatmentFee() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.TreatmentFeeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TreatmentFee' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.TreatmentFeeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AppDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.AppDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AppDate' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.AppDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Filled() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.FilledColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Filled' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.FilledColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MoPoID() As Decimal
            Get
                Return CType(Me(Me.tableV_MoPoTyso.MoPoIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_MoPoTyso.MoPoIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DRetina_desease() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.DRetina_deseaseColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DRetina_desease' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.DRetina_deseaseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DCataract() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.DCataractColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DCataract' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.DCataractColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPteriguim() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.DPteriguimColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DPteriguim' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.DPteriguimColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DGlaucom() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.DGlaucomColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DGlaucom' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.DGlaucomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DRefractive_error() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.DRefractive_errorColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DRefractive_error' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.DRefractive_errorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOther_deseases() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.DOther_deseasesColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOther_deseases' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.DOther_deseasesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.CreateDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreateDate' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.CreateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTReceipt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.OPTReceiptColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPTReceipt' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.OPTReceiptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTReceiptNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.OPTReceiptNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPTReceiptNo' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.OPTReceiptNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InReceipt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.InReceiptColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InReceipt' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.InReceiptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InReceiptNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.InReceiptNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InReceiptNo' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.InReceiptNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OldReceipt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.OldReceiptColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OldReceipt' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.OldReceiptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OldReceiptNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.OldReceiptNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OldReceiptNo' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.OldReceiptNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewReceipt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.NewReceiptColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NewReceipt' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.NewReceiptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewReceiptNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.NewReceiptNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NewReceiptNo' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.NewReceiptNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PeriodDiabete() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.PeriodDiabeteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PeriodDiabete' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.PeriodDiabeteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TyeOfDR() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_MoPoTyso.TyeOfDRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TyeOfDR' in table 'V_MoPoTyso' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MoPoTyso.TyeOfDRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoPoTsyCodeNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.MoPoTsyCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoPoTsyCodeNull()
            Me(Me.tableV_MoPoTyso.MoPoTsyCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameEngNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.NameEngColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameEngNull()
            Me(Me.tableV_MoPoTyso.NameEngColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameKhmerNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.NameKhmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameKhmerNull()
            Me(Me.tableV_MoPoTyso.NameKhmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableV_MoPoTyso.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaleNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.MaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaleNull()
            Me(Me.tableV_MoPoTyso.MaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFemaleNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.FemaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFemaleNull()
            Me(Me.tableV_MoPoTyso.FemaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableV_MoPoTyso.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableV_MoPoTyso.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiagnosisNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.DiagnosisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiagnosisNull()
            Me(Me.tableV_MoPoTyso.DiagnosisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTreatmentNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.TreatmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTreatmentNull()
            Me(Me.tableV_MoPoTyso.TreatmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTreatmentFeeNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.TreatmentFeeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTreatmentFeeNull()
            Me(Me.tableV_MoPoTyso.TreatmentFeeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAppDateNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.AppDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAppDateNull()
            Me(Me.tableV_MoPoTyso.AppDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFilledNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.FilledColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFilledNull()
            Me(Me.tableV_MoPoTyso.FilledColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDRetina_deseaseNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.DRetina_deseaseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDRetina_deseaseNull()
            Me(Me.tableV_MoPoTyso.DRetina_deseaseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDCataractNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.DCataractColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDCataractNull()
            Me(Me.tableV_MoPoTyso.DCataractColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPteriguimNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.DPteriguimColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPteriguimNull()
            Me(Me.tableV_MoPoTyso.DPteriguimColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDGlaucomNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.DGlaucomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDGlaucomNull()
            Me(Me.tableV_MoPoTyso.DGlaucomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDRefractive_errorNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.DRefractive_errorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDRefractive_errorNull()
            Me(Me.tableV_MoPoTyso.DRefractive_errorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOther_deseasesNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.DOther_deseasesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOther_deseasesNull()
            Me(Me.tableV_MoPoTyso.DOther_deseasesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.CreateDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreateDateNull()
            Me(Me.tableV_MoPoTyso.CreateDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPTReceiptNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.OPTReceiptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPTReceiptNull()
            Me(Me.tableV_MoPoTyso.OPTReceiptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPTReceiptNoNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.OPTReceiptNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPTReceiptNoNull()
            Me(Me.tableV_MoPoTyso.OPTReceiptNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInReceiptNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.InReceiptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInReceiptNull()
            Me(Me.tableV_MoPoTyso.InReceiptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInReceiptNoNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.InReceiptNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInReceiptNoNull()
            Me(Me.tableV_MoPoTyso.InReceiptNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOldReceiptNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.OldReceiptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOldReceiptNull()
            Me(Me.tableV_MoPoTyso.OldReceiptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOldReceiptNoNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.OldReceiptNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOldReceiptNoNull()
            Me(Me.tableV_MoPoTyso.OldReceiptNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNewReceiptNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.NewReceiptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNewReceiptNull()
            Me(Me.tableV_MoPoTyso.NewReceiptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNewReceiptNoNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.NewReceiptNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNewReceiptNoNull()
            Me(Me.tableV_MoPoTyso.NewReceiptNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodDiabeteNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.PeriodDiabeteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodDiabeteNull()
            Me(Me.tableV_MoPoTyso.PeriodDiabeteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTyeOfDRNull() As Boolean
            Return Me.IsNull(Me.tableV_MoPoTyso.TyeOfDRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTyeOfDRNull()
            Me(Me.tableV_MoPoTyso.TyeOfDRColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_MoPoTysoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As V_MoPoTysoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_MoPoTysoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_MoPoTysoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataMoPoTsyoTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class V_MoPoTysoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "V_MoPoTyso"
            tableMapping.ColumnMappings.Add("PatientNo", "PatientNo")
            tableMapping.ColumnMappings.Add("MoPoTsyCode", "MoPoTsyCode")
            tableMapping.ColumnMappings.Add("NameEng", "NameEng")
            tableMapping.ColumnMappings.Add("NameKhmer", "NameKhmer")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Male", "Male")
            tableMapping.ColumnMappings.Add("Female", "Female")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("Treatment", "Treatment")
            tableMapping.ColumnMappings.Add("TreatmentFee", "TreatmentFee")
            tableMapping.ColumnMappings.Add("AppDate", "AppDate")
            tableMapping.ColumnMappings.Add("Filled", "Filled")
            tableMapping.ColumnMappings.Add("MoPoID", "MoPoID")
            tableMapping.ColumnMappings.Add("DRetina_desease", "DRetina_desease")
            tableMapping.ColumnMappings.Add("DCataract", "DCataract")
            tableMapping.ColumnMappings.Add("DPteriguim", "DPteriguim")
            tableMapping.ColumnMappings.Add("DGlaucom", "DGlaucom")
            tableMapping.ColumnMappings.Add("DRefractive_error", "DRefractive_error")
            tableMapping.ColumnMappings.Add("DOther_deseases", "DOther_deseases")
            tableMapping.ColumnMappings.Add("Diagnosis", "Diagnosis")
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate")
            tableMapping.ColumnMappings.Add("OPTReceipt", "OPTReceipt")
            tableMapping.ColumnMappings.Add("OPTReceiptNo", "OPTReceiptNo")
            tableMapping.ColumnMappings.Add("InReceipt", "InReceipt")
            tableMapping.ColumnMappings.Add("InReceiptNo", "InReceiptNo")
            tableMapping.ColumnMappings.Add("OldReceipt", "OldReceipt")
            tableMapping.ColumnMappings.Add("OldReceiptNo", "OldReceiptNo")
            tableMapping.ColumnMappings.Add("NewReceipt", "NewReceipt")
            tableMapping.ColumnMappings.Add("NewReceiptNo", "NewReceiptNo")
            tableMapping.ColumnMappings.Add("PeriodDiabete", "PeriodDiabete")
            tableMapping.ColumnMappings.Add("TyeOfDR", "TyeOfDR")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     PatientNo, MoPoTsyCode, NameEng, NameKhmer, Age, Male, Female, Sex, Ad"& _ 
                "dress, Treatment, TreatmentFee, AppDate, Filled, MoPoID, DRetina_desease, DCatar"& _ 
                "act,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       DPteriguim, DGlaucom, DRefractive_error, DOther_des"& _ 
                "eases, Diagnosis, CreateDate, OPTReceipt, OPTReceiptNo, InReceipt, InReceiptNo, "& _ 
                "OldReceipt, OldReceiptNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      NewReceipt, NewReceiptNo, Peri"& _ 
                "odDiabete, TyeOfDR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         V_MoPoTyso"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Address, Age, AppDate, CreateDate, DCataract, DGlaucom, DOther_deseases, D"& _ 
                "Pteriguim, DRefractive_error, DRetina_desease, Diagnosis, Female, Filled, InRece"& _ 
                "ipt, InReceiptNo, Male, MoPoID, MoPoTsyCode, NameEng, NameKhmer, NewReceipt, New"& _ 
                "ReceiptNo, OPTReceipt, OPTReceiptNo, OldReceipt, OldReceiptNo, PatientNo, Period"& _ 
                "Diabete, Sex, Treatment, TreatmentFee, TyeOfDR FROM V_MoPoTyso WHERE (CAST(CONVE"& _ 
                "RT (VARCHAR(10), CreateDate, 1) AS DateTime) BETWEEN CAST(CONVERT (VARCHAR(10), "& _ 
                "CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND CAST(CONVERT (VARCHAR(10), CAST"& _ 
                "(@DateTO AS DATETIME), 1) AS Datetime))"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Address, Age, AppDate, CreateDate, DCataract, DGlaucom, DOther_deseases, D"& _ 
                "Pteriguim, DRefractive_error, DRetina_desease, Diagnosis, Female, Filled, InRece"& _ 
                "ipt, InReceiptNo, Male, MoPoID, MoPoTsyCode, NameEng, NameKhmer, NewReceipt, New"& _ 
                "ReceiptNo, OPTReceipt, OPTReceiptNo, OldReceipt, OldReceiptNo, PatientNo, Period"& _ 
                "Diabete, Sex, Treatment, TreatmentFee, TyeOfDR FROM V_MoPoTyso WHERE (PatientNo "& _ 
                "= @PatientNo) AND (CAST(CONVERT (VARCHAR(10), CreateDate, 1) AS DateTime) BETWEE"& _ 
                "N CAST(CONVERT (VARCHAR(10), CAST(@DateFrom AS DATETIME), 1) AS Datetime) AND CA"& _ 
                "ST(CONVERT (VARCHAR(10), CAST(@DateTO AS DATETIME), 1) AS Datetime))"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PatientNo", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "PatientNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataMoPoTsyo.V_MoPoTysoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataMoPoTsyo.V_MoPoTysoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataMoPoTsyo.V_MoPoTysoDataTable = New DataMoPoTsyo.V_MoPoTysoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByByDate(ByVal dataTable As DataMoPoTsyo.V_MoPoTysoDataTable, ByVal DateFrom As Date, ByVal DateTO As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDate(ByVal DateFrom As Date, ByVal DateTO As Date) As DataMoPoTsyo.V_MoPoTysoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateTO,Date)
            Dim dataTable As DataMoPoTsyo.V_MoPoTysoDataTable = New DataMoPoTsyo.V_MoPoTysoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByDateAndPatientNo(ByVal dataTable As DataMoPoTsyo.V_MoPoTysoDataTable, ByVal PatientNo As Decimal, ByVal DateFrom As Date, ByVal DateTO As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(PatientNo,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTO,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDateAndPatientNo(ByVal PatientNo As Decimal, ByVal DateFrom As Date, ByVal DateTO As Date) As DataMoPoTsyo.V_MoPoTysoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(PatientNo,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTO,Date)
            Dim dataTable As DataMoPoTsyo.V_MoPoTysoDataTable = New DataMoPoTsyo.V_MoPoTysoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
