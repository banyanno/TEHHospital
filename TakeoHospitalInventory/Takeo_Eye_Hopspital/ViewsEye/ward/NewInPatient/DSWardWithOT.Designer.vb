'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8794
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSWardWithOT"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSWardWithOT
    Inherits Global.System.Data.DataSet
    
    Private tableV_NewInpatientDetial As V_NewInpatientDetialDataTable
    
    Private tableView_OTRegistration As View_OTRegistrationDataTable
    
    Private tableV_IOLRegistration As V_IOLRegistrationDataTable
    
    Private tableV_NewInpatientDetialLeave As V_NewInpatientDetialLeaveDataTable
    
    Private relationV_NewInpatientDetial_View_OTRegistration As Global.System.Data.DataRelation
    
    Private relationView_OTRegistration_V_IOLRegistration As Global.System.Data.DataRelation
    
    Private relationV_NewInpatientDetialLeave_View_OTRegistration As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("V_NewInpatientDetial")) Is Nothing) Then
                MyBase.Tables.Add(New V_NewInpatientDetialDataTable(ds.Tables("V_NewInpatientDetial")))
            End If
            If (Not (ds.Tables("View_OTRegistration")) Is Nothing) Then
                MyBase.Tables.Add(New View_OTRegistrationDataTable(ds.Tables("View_OTRegistration")))
            End If
            If (Not (ds.Tables("V_IOLRegistration")) Is Nothing) Then
                MyBase.Tables.Add(New V_IOLRegistrationDataTable(ds.Tables("V_IOLRegistration")))
            End If
            If (Not (ds.Tables("V_NewInpatientDetialLeave")) Is Nothing) Then
                MyBase.Tables.Add(New V_NewInpatientDetialLeaveDataTable(ds.Tables("V_NewInpatientDetialLeave")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_NewInpatientDetial() As V_NewInpatientDetialDataTable
        Get
            Return Me.tableV_NewInpatientDetial
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property View_OTRegistration() As View_OTRegistrationDataTable
        Get
            Return Me.tableView_OTRegistration
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_IOLRegistration() As V_IOLRegistrationDataTable
        Get
            Return Me.tableV_IOLRegistration
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_NewInpatientDetialLeave() As V_NewInpatientDetialLeaveDataTable
        Get
            Return Me.tableV_NewInpatientDetialLeave
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSWardWithOT = CType(MyBase.Clone,DSWardWithOT)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("V_NewInpatientDetial")) Is Nothing) Then
                MyBase.Tables.Add(New V_NewInpatientDetialDataTable(ds.Tables("V_NewInpatientDetial")))
            End If
            If (Not (ds.Tables("View_OTRegistration")) Is Nothing) Then
                MyBase.Tables.Add(New View_OTRegistrationDataTable(ds.Tables("View_OTRegistration")))
            End If
            If (Not (ds.Tables("V_IOLRegistration")) Is Nothing) Then
                MyBase.Tables.Add(New V_IOLRegistrationDataTable(ds.Tables("V_IOLRegistration")))
            End If
            If (Not (ds.Tables("V_NewInpatientDetialLeave")) Is Nothing) Then
                MyBase.Tables.Add(New V_NewInpatientDetialLeaveDataTable(ds.Tables("V_NewInpatientDetialLeave")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableV_NewInpatientDetial = CType(MyBase.Tables("V_NewInpatientDetial"),V_NewInpatientDetialDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_NewInpatientDetial) Is Nothing) Then
                Me.tableV_NewInpatientDetial.InitVars
            End If
        End If
        Me.tableView_OTRegistration = CType(MyBase.Tables("View_OTRegistration"),View_OTRegistrationDataTable)
        If (initTable = true) Then
            If (Not (Me.tableView_OTRegistration) Is Nothing) Then
                Me.tableView_OTRegistration.InitVars
            End If
        End If
        Me.tableV_IOLRegistration = CType(MyBase.Tables("V_IOLRegistration"),V_IOLRegistrationDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_IOLRegistration) Is Nothing) Then
                Me.tableV_IOLRegistration.InitVars
            End If
        End If
        Me.tableV_NewInpatientDetialLeave = CType(MyBase.Tables("V_NewInpatientDetialLeave"),V_NewInpatientDetialLeaveDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_NewInpatientDetialLeave) Is Nothing) Then
                Me.tableV_NewInpatientDetialLeave.InitVars
            End If
        End If
        Me.relationV_NewInpatientDetial_View_OTRegistration = Me.Relations("V_NewInpatientDetial_View_OTRegistration")
        Me.relationView_OTRegistration_V_IOLRegistration = Me.Relations("View_OTRegistration_V_IOLRegistration")
        Me.relationV_NewInpatientDetialLeave_View_OTRegistration = Me.Relations("V_NewInpatientDetialLeave_View_OTRegistration")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSWardWithOT"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSWard.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableV_NewInpatientDetial = New V_NewInpatientDetialDataTable
        MyBase.Tables.Add(Me.tableV_NewInpatientDetial)
        Me.tableView_OTRegistration = New View_OTRegistrationDataTable
        MyBase.Tables.Add(Me.tableView_OTRegistration)
        Me.tableV_IOLRegistration = New V_IOLRegistrationDataTable
        MyBase.Tables.Add(Me.tableV_IOLRegistration)
        Me.tableV_NewInpatientDetialLeave = New V_NewInpatientDetialLeaveDataTable
        MyBase.Tables.Add(Me.tableV_NewInpatientDetialLeave)
        Me.relationV_NewInpatientDetial_View_OTRegistration = New Global.System.Data.DataRelation("V_NewInpatientDetial_View_OTRegistration", New Global.System.Data.DataColumn() {Me.tableV_NewInpatientDetial.NewInPatientNoColumn}, New Global.System.Data.DataColumn() {Me.tableView_OTRegistration.NewInPatientNoColumn}, false)
        Me.Relations.Add(Me.relationV_NewInpatientDetial_View_OTRegistration)
        Me.relationView_OTRegistration_V_IOLRegistration = New Global.System.Data.DataRelation("View_OTRegistration_V_IOLRegistration", New Global.System.Data.DataColumn() {Me.tableView_OTRegistration.OTNoColumn}, New Global.System.Data.DataColumn() {Me.tableV_IOLRegistration.OTNoColumn}, false)
        Me.Relations.Add(Me.relationView_OTRegistration_V_IOLRegistration)
        Me.relationV_NewInpatientDetialLeave_View_OTRegistration = New Global.System.Data.DataRelation("V_NewInpatientDetialLeave_View_OTRegistration", New Global.System.Data.DataColumn() {Me.tableV_NewInpatientDetialLeave.NewInPatientNoColumn}, New Global.System.Data.DataColumn() {Me.tableView_OTRegistration.NewInPatientNoColumn}, false)
        Me.Relations.Add(Me.relationV_NewInpatientDetialLeave_View_OTRegistration)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_NewInpatientDetial() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeView_OTRegistration() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_IOLRegistration() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_NewInpatientDetialLeave() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSWardWithOT = New DSWardWithOT
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub V_NewInpatientDetialRowChangeEventHandler(ByVal sender As Object, ByVal e As V_NewInpatientDetialRowChangeEvent)
    
    Public Delegate Sub View_OTRegistrationRowChangeEventHandler(ByVal sender As Object, ByVal e As View_OTRegistrationRowChangeEvent)
    
    Public Delegate Sub V_IOLRegistrationRowChangeEventHandler(ByVal sender As Object, ByVal e As V_IOLRegistrationRowChangeEvent)
    
    Public Delegate Sub V_NewInpatientDetialLeaveRowChangeEventHandler(ByVal sender As Object, ByVal e As V_NewInpatientDetialLeaveRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_NewInpatientDetialDataTable
        Inherits Global.System.Data.TypedTableBase(Of V_NewInpatientDetialRow)
        
        Private columnNewInPatientNo As Global.System.Data.DataColumn
        
        Private columnPatientNo As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnEye As Global.System.Data.DataColumn
        
        Private columnDiagnosis As Global.System.Data.DataColumn
        
        Private columnVA_RE As Global.System.Data.DataColumn
        
        Private columnVA_LE As Global.System.Data.DataColumn
        
        Private columnDateDischarge As Global.System.Data.DataColumn
        
        Private columnDateFollowUp As Global.System.Data.DataColumn
        
        Private columnSignature As Global.System.Data.DataColumn
        
        Private columnLeave As Global.System.Data.DataColumn
        
        Private columnCreateDate As Global.System.Data.DataColumn
        
        Private columnNameKhmer As Global.System.Data.DataColumn
        
        Private columnTypeDiagnosis As Global.System.Data.DataColumn
        
        Private columnWaiting As Global.System.Data.DataColumn
        
        Private columnTIME_CREATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_NewInpatientDetial"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewInPatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewInPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EyeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEye
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VA_REColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVA_RE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VA_LEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVA_LE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateDischargeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateDischarge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFollowUpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFollowUp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SignatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSignature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LeaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameKhmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameKhmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeDiagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeDiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WaitingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWaiting
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIME_CREATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIME_CREATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_NewInpatientDetialRow
            Get
                Return CType(Me.Rows(index),V_NewInpatientDetialRow)
            End Get
        End Property
        
        Public Event V_NewInpatientDetialRowChanging As V_NewInpatientDetialRowChangeEventHandler
        
        Public Event V_NewInpatientDetialRowChanged As V_NewInpatientDetialRowChangeEventHandler
        
        Public Event V_NewInpatientDetialRowDeleting As V_NewInpatientDetialRowChangeEventHandler
        
        Public Event V_NewInpatientDetialRowDeleted As V_NewInpatientDetialRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_NewInpatientDetialRow(ByVal row As V_NewInpatientDetialRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_NewInpatientDetialRow( _
                    ByVal NewInPatientNo As Decimal,  _
                    ByVal PatientNo As Decimal,  _
                    ByVal Age As Decimal,  _
                    ByVal Sex As String,  _
                    ByVal Address As String,  _
                    ByVal Eye As String,  _
                    ByVal Diagnosis As String,  _
                    ByVal VA_RE As String,  _
                    ByVal VA_LE As String,  _
                    ByVal DateDischarge As Date,  _
                    ByVal DateFollowUp As Date,  _
                    ByVal Signature As Boolean,  _
                    ByVal Leave As String,  _
                    ByVal CreateDate As Date,  _
                    ByVal NameKhmer As String,  _
                    ByVal TypeDiagnosis As Boolean,  _
                    ByVal Waiting As Decimal,  _
                    ByVal TIME_CREATE As String) As V_NewInpatientDetialRow
            Dim rowV_NewInpatientDetialRow As V_NewInpatientDetialRow = CType(Me.NewRow,V_NewInpatientDetialRow)
            Dim columnValuesArray() As Object = New Object() {NewInPatientNo, PatientNo, Age, Sex, Address, Eye, Diagnosis, VA_RE, VA_LE, DateDischarge, DateFollowUp, Signature, Leave, CreateDate, NameKhmer, TypeDiagnosis, Waiting, TIME_CREATE}
            rowV_NewInpatientDetialRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowV_NewInpatientDetialRow)
            Return rowV_NewInpatientDetialRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As V_NewInpatientDetialDataTable = CType(MyBase.Clone,V_NewInpatientDetialDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New V_NewInpatientDetialDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNewInPatientNo = MyBase.Columns("NewInPatientNo")
            Me.columnPatientNo = MyBase.Columns("PatientNo")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnEye = MyBase.Columns("Eye")
            Me.columnDiagnosis = MyBase.Columns("Diagnosis")
            Me.columnVA_RE = MyBase.Columns("VA_RE")
            Me.columnVA_LE = MyBase.Columns("VA_LE")
            Me.columnDateDischarge = MyBase.Columns("DateDischarge")
            Me.columnDateFollowUp = MyBase.Columns("DateFollowUp")
            Me.columnSignature = MyBase.Columns("Signature")
            Me.columnLeave = MyBase.Columns("Leave")
            Me.columnCreateDate = MyBase.Columns("CreateDate")
            Me.columnNameKhmer = MyBase.Columns("NameKhmer")
            Me.columnTypeDiagnosis = MyBase.Columns("TypeDiagnosis")
            Me.columnWaiting = MyBase.Columns("Waiting")
            Me.columnTIME_CREATE = MyBase.Columns("TIME_CREATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNewInPatientNo = New Global.System.Data.DataColumn("NewInPatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewInPatientNo)
            Me.columnPatientNo = New Global.System.Data.DataColumn("PatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientNo)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnEye = New Global.System.Data.DataColumn("Eye", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEye)
            Me.columnDiagnosis = New Global.System.Data.DataColumn("Diagnosis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiagnosis)
            Me.columnVA_RE = New Global.System.Data.DataColumn("VA_RE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVA_RE)
            Me.columnVA_LE = New Global.System.Data.DataColumn("VA_LE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVA_LE)
            Me.columnDateDischarge = New Global.System.Data.DataColumn("DateDischarge", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateDischarge)
            Me.columnDateFollowUp = New Global.System.Data.DataColumn("DateFollowUp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFollowUp)
            Me.columnSignature = New Global.System.Data.DataColumn("Signature", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSignature)
            Me.columnLeave = New Global.System.Data.DataColumn("Leave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeave)
            Me.columnCreateDate = New Global.System.Data.DataColumn("CreateDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDate)
            Me.columnNameKhmer = New Global.System.Data.DataColumn("NameKhmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameKhmer)
            Me.columnTypeDiagnosis = New Global.System.Data.DataColumn("TypeDiagnosis", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeDiagnosis)
            Me.columnWaiting = New Global.System.Data.DataColumn("Waiting", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWaiting)
            Me.columnTIME_CREATE = New Global.System.Data.DataColumn("TIME_CREATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIME_CREATE)
            Me.columnNewInPatientNo.AllowDBNull = false
            Me.columnPatientNo.AllowDBNull = false
            Me.columnSex.MaxLength = 1
            Me.columnAddress.MaxLength = 1000
            Me.columnEye.MaxLength = 50
            Me.columnDiagnosis.MaxLength = 50
            Me.columnVA_RE.MaxLength = 50
            Me.columnVA_LE.MaxLength = 50
            Me.columnLeave.MaxLength = 1
            Me.columnNameKhmer.MaxLength = 50
            Me.columnTIME_CREATE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_NewInpatientDetialRow() As V_NewInpatientDetialRow
            Return CType(Me.NewRow,V_NewInpatientDetialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New V_NewInpatientDetialRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(V_NewInpatientDetialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_NewInpatientDetialRowChangedEvent) Is Nothing) Then
                RaiseEvent V_NewInpatientDetialRowChanged(Me, New V_NewInpatientDetialRowChangeEvent(CType(e.Row,V_NewInpatientDetialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_NewInpatientDetialRowChangingEvent) Is Nothing) Then
                RaiseEvent V_NewInpatientDetialRowChanging(Me, New V_NewInpatientDetialRowChangeEvent(CType(e.Row,V_NewInpatientDetialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_NewInpatientDetialRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_NewInpatientDetialRowDeleted(Me, New V_NewInpatientDetialRowChangeEvent(CType(e.Row,V_NewInpatientDetialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_NewInpatientDetialRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_NewInpatientDetialRowDeleting(Me, New V_NewInpatientDetialRowChangeEvent(CType(e.Row,V_NewInpatientDetialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_NewInpatientDetialRow(ByVal row As V_NewInpatientDetialRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSWardWithOT = New DSWardWithOT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_NewInpatientDetialDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class View_OTRegistrationDataTable
        Inherits Global.System.Data.TypedTableBase(Of View_OTRegistrationRow)
        
        Private columnOTNo As Global.System.Data.DataColumn
        
        Private columnNewInPatientNo As Global.System.Data.DataColumn
        
        Private columnPatientNo As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnOperationTime As Global.System.Data.DataColumn
        
        Private columnAnesthesia As Global.System.Data.DataColumn
        
        Private columnEye As Global.System.Data.DataColumn
        
        Private columnOperationType As Global.System.Data.DataColumn
        
        Private columnSurgeon As Global.System.Data.DataColumn
        
        Private columnAssistant As Global.System.Data.DataColumn
        
        Private columnCirculation As Global.System.Data.DataColumn
        
        Private columnCompli As Global.System.Data.DataColumn
        
        Private columnCreateDate As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnNameKhmer As Global.System.Data.DataColumn
        
        Private columnAnesthetist As Global.System.Data.DataColumn
        
        Private columnIOL As Global.System.Data.DataColumn
        
        Private columnDateOperated As Global.System.Data.DataColumn
        
        Private columnOthers As Global.System.Data.DataColumn
        
        Private columnDR_NAME As Global.System.Data.DataColumn
        
        Private columnTIME_CREATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "View_OTRegistration"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewInPatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewInPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OperationTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOperationTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnesthesiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnesthesia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EyeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEye
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OperationTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOperationType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurgeonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurgeon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssistantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssistant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CirculationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCirculation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameKhmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameKhmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnesthetistColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnesthetist
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateOperatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateOperated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OthersColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOthers
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DR_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDR_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIME_CREATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIME_CREATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As View_OTRegistrationRow
            Get
                Return CType(Me.Rows(index),View_OTRegistrationRow)
            End Get
        End Property
        
        Public Event View_OTRegistrationRowChanging As View_OTRegistrationRowChangeEventHandler
        
        Public Event View_OTRegistrationRowChanged As View_OTRegistrationRowChangeEventHandler
        
        Public Event View_OTRegistrationRowDeleting As View_OTRegistrationRowChangeEventHandler
        
        Public Event View_OTRegistrationRowDeleted As View_OTRegistrationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddView_OTRegistrationRow(ByVal row As View_OTRegistrationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddView_OTRegistrationRow( _
                    ByVal OTNo As Decimal,  _
                    ByVal parentV_NewInpatientDetialRowByV_NewInpatientDetial_View_OTRegistration As V_NewInpatientDetialRow,  _
                    ByVal PatientNo As Decimal,  _
                    ByVal Age As Decimal,  _
                    ByVal Sex As String,  _
                    ByVal Address As String,  _
                    ByVal OperationTime As String,  _
                    ByVal Anesthesia As String,  _
                    ByVal Eye As String,  _
                    ByVal OperationType As String,  _
                    ByVal Surgeon As String,  _
                    ByVal Assistant As String,  _
                    ByVal Circulation As String,  _
                    ByVal Compli As String,  _
                    ByVal CreateDate As Date,  _
                    ByVal Status As Boolean,  _
                    ByVal NameKhmer As String,  _
                    ByVal Anesthetist As String,  _
                    ByVal IOL As String,  _
                    ByVal DateOperated As Date,  _
                    ByVal Others As String,  _
                    ByVal DR_NAME As String,  _
                    ByVal TIME_CREATE As String) As View_OTRegistrationRow
            Dim rowView_OTRegistrationRow As View_OTRegistrationRow = CType(Me.NewRow,View_OTRegistrationRow)
            Dim columnValuesArray() As Object = New Object() {OTNo, Nothing, PatientNo, Age, Sex, Address, OperationTime, Anesthesia, Eye, OperationType, Surgeon, Assistant, Circulation, Compli, CreateDate, Status, NameKhmer, Anesthetist, IOL, DateOperated, Others, DR_NAME, TIME_CREATE}
            If (Not (parentV_NewInpatientDetialRowByV_NewInpatientDetial_View_OTRegistration) Is Nothing) Then
                columnValuesArray(1) = parentV_NewInpatientDetialRowByV_NewInpatientDetial_View_OTRegistration(0)
            End If
            rowView_OTRegistrationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowView_OTRegistrationRow)
            Return rowView_OTRegistrationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOTNoNewInPatientNoPatientNo(ByVal OTNo As Decimal, ByVal NewInPatientNo As Decimal, ByVal PatientNo As Decimal) As View_OTRegistrationRow
            Return CType(Me.Rows.Find(New Object() {OTNo, NewInPatientNo, PatientNo}),View_OTRegistrationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As View_OTRegistrationDataTable = CType(MyBase.Clone,View_OTRegistrationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New View_OTRegistrationDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOTNo = MyBase.Columns("OTNo")
            Me.columnNewInPatientNo = MyBase.Columns("NewInPatientNo")
            Me.columnPatientNo = MyBase.Columns("PatientNo")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnOperationTime = MyBase.Columns("OperationTime")
            Me.columnAnesthesia = MyBase.Columns("Anesthesia")
            Me.columnEye = MyBase.Columns("Eye")
            Me.columnOperationType = MyBase.Columns("OperationType")
            Me.columnSurgeon = MyBase.Columns("Surgeon")
            Me.columnAssistant = MyBase.Columns("Assistant")
            Me.columnCirculation = MyBase.Columns("Circulation")
            Me.columnCompli = MyBase.Columns("Compli")
            Me.columnCreateDate = MyBase.Columns("CreateDate")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnNameKhmer = MyBase.Columns("NameKhmer")
            Me.columnAnesthetist = MyBase.Columns("Anesthetist")
            Me.columnIOL = MyBase.Columns("IOL")
            Me.columnDateOperated = MyBase.Columns("DateOperated")
            Me.columnOthers = MyBase.Columns("Others")
            Me.columnDR_NAME = MyBase.Columns("DR_NAME")
            Me.columnTIME_CREATE = MyBase.Columns("TIME_CREATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOTNo = New Global.System.Data.DataColumn("OTNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTNo)
            Me.columnNewInPatientNo = New Global.System.Data.DataColumn("NewInPatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewInPatientNo)
            Me.columnPatientNo = New Global.System.Data.DataColumn("PatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientNo)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnOperationTime = New Global.System.Data.DataColumn("OperationTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOperationTime)
            Me.columnAnesthesia = New Global.System.Data.DataColumn("Anesthesia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnesthesia)
            Me.columnEye = New Global.System.Data.DataColumn("Eye", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEye)
            Me.columnOperationType = New Global.System.Data.DataColumn("OperationType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOperationType)
            Me.columnSurgeon = New Global.System.Data.DataColumn("Surgeon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurgeon)
            Me.columnAssistant = New Global.System.Data.DataColumn("Assistant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssistant)
            Me.columnCirculation = New Global.System.Data.DataColumn("Circulation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCirculation)
            Me.columnCompli = New Global.System.Data.DataColumn("Compli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompli)
            Me.columnCreateDate = New Global.System.Data.DataColumn("CreateDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDate)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnNameKhmer = New Global.System.Data.DataColumn("NameKhmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameKhmer)
            Me.columnAnesthetist = New Global.System.Data.DataColumn("Anesthetist", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnesthetist)
            Me.columnIOL = New Global.System.Data.DataColumn("IOL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOL)
            Me.columnDateOperated = New Global.System.Data.DataColumn("DateOperated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateOperated)
            Me.columnOthers = New Global.System.Data.DataColumn("Others", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOthers)
            Me.columnDR_NAME = New Global.System.Data.DataColumn("DR_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDR_NAME)
            Me.columnTIME_CREATE = New Global.System.Data.DataColumn("TIME_CREATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIME_CREATE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnOTNo, Me.columnNewInPatientNo, Me.columnPatientNo}, true))
            Me.columnOTNo.AllowDBNull = false
            Me.columnNewInPatientNo.AllowDBNull = false
            Me.columnPatientNo.AllowDBNull = false
            Me.columnSex.MaxLength = 1
            Me.columnAddress.MaxLength = 1000
            Me.columnOperationTime.MaxLength = 50
            Me.columnAnesthesia.MaxLength = 50
            Me.columnEye.MaxLength = 50
            Me.columnOperationType.MaxLength = 50
            Me.columnSurgeon.MaxLength = 50
            Me.columnAssistant.MaxLength = 50
            Me.columnCirculation.MaxLength = 50
            Me.columnCompli.MaxLength = 50
            Me.columnNameKhmer.MaxLength = 50
            Me.columnAnesthetist.MaxLength = 50
            Me.columnIOL.MaxLength = 50
            Me.columnOthers.MaxLength = 200
            Me.columnDR_NAME.MaxLength = 50
            Me.columnTIME_CREATE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewView_OTRegistrationRow() As View_OTRegistrationRow
            Return CType(Me.NewRow,View_OTRegistrationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New View_OTRegistrationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(View_OTRegistrationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.View_OTRegistrationRowChangedEvent) Is Nothing) Then
                RaiseEvent View_OTRegistrationRowChanged(Me, New View_OTRegistrationRowChangeEvent(CType(e.Row,View_OTRegistrationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.View_OTRegistrationRowChangingEvent) Is Nothing) Then
                RaiseEvent View_OTRegistrationRowChanging(Me, New View_OTRegistrationRowChangeEvent(CType(e.Row,View_OTRegistrationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.View_OTRegistrationRowDeletedEvent) Is Nothing) Then
                RaiseEvent View_OTRegistrationRowDeleted(Me, New View_OTRegistrationRowChangeEvent(CType(e.Row,View_OTRegistrationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.View_OTRegistrationRowDeletingEvent) Is Nothing) Then
                RaiseEvent View_OTRegistrationRowDeleting(Me, New View_OTRegistrationRowChangeEvent(CType(e.Row,View_OTRegistrationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveView_OTRegistrationRow(ByVal row As View_OTRegistrationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSWardWithOT = New DSWardWithOT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "View_OTRegistrationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_IOLRegistrationDataTable
        Inherits Global.System.Data.TypedTableBase(Of V_IOLRegistrationRow)
        
        Private columnIOLNo As Global.System.Data.DataColumn
        
        Private columnOTNo As Global.System.Data.DataColumn
        
        Private columnPatientNo As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnSurgeon As Global.System.Data.DataColumn
        
        Private columnEye As Global.System.Data.DataColumn
        
        Private columnIOLNumber As Global.System.Data.DataColumn
        
        Private columnCreateDate As Global.System.Data.DataColumn
        
        Private columnNameKhmer As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_IOLRegistration"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOLNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOLNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurgeonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurgeon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EyeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEye
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOLNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOLNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameKhmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameKhmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_IOLRegistrationRow
            Get
                Return CType(Me.Rows(index),V_IOLRegistrationRow)
            End Get
        End Property
        
        Public Event V_IOLRegistrationRowChanging As V_IOLRegistrationRowChangeEventHandler
        
        Public Event V_IOLRegistrationRowChanged As V_IOLRegistrationRowChangeEventHandler
        
        Public Event V_IOLRegistrationRowDeleting As V_IOLRegistrationRowChangeEventHandler
        
        Public Event V_IOLRegistrationRowDeleted As V_IOLRegistrationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_IOLRegistrationRow(ByVal row As V_IOLRegistrationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_IOLRegistrationRow(ByVal IOLNo As Decimal, ByVal parentView_OTRegistrationRowByView_OTRegistration_V_IOLRegistration As View_OTRegistrationRow, ByVal PatientNo As Decimal, ByVal Age As Decimal, ByVal Sex As String, ByVal Surgeon As String, ByVal Eye As String, ByVal IOLNumber As String, ByVal CreateDate As Date, ByVal NameKhmer As String) As V_IOLRegistrationRow
            Dim rowV_IOLRegistrationRow As V_IOLRegistrationRow = CType(Me.NewRow,V_IOLRegistrationRow)
            Dim columnValuesArray() As Object = New Object() {IOLNo, Nothing, PatientNo, Age, Sex, Surgeon, Eye, IOLNumber, CreateDate, NameKhmer}
            If (Not (parentView_OTRegistrationRowByView_OTRegistration_V_IOLRegistration) Is Nothing) Then
                columnValuesArray(1) = parentView_OTRegistrationRowByView_OTRegistration_V_IOLRegistration(0)
            End If
            rowV_IOLRegistrationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowV_IOLRegistrationRow)
            Return rowV_IOLRegistrationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIOLNoPatientNo(ByVal IOLNo As Decimal, ByVal PatientNo As Decimal) As V_IOLRegistrationRow
            Return CType(Me.Rows.Find(New Object() {IOLNo, PatientNo}),V_IOLRegistrationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As V_IOLRegistrationDataTable = CType(MyBase.Clone,V_IOLRegistrationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New V_IOLRegistrationDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIOLNo = MyBase.Columns("IOLNo")
            Me.columnOTNo = MyBase.Columns("OTNo")
            Me.columnPatientNo = MyBase.Columns("PatientNo")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnSurgeon = MyBase.Columns("Surgeon")
            Me.columnEye = MyBase.Columns("Eye")
            Me.columnIOLNumber = MyBase.Columns("IOLNumber")
            Me.columnCreateDate = MyBase.Columns("CreateDate")
            Me.columnNameKhmer = MyBase.Columns("NameKhmer")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIOLNo = New Global.System.Data.DataColumn("IOLNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOLNo)
            Me.columnOTNo = New Global.System.Data.DataColumn("OTNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTNo)
            Me.columnPatientNo = New Global.System.Data.DataColumn("PatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientNo)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnSurgeon = New Global.System.Data.DataColumn("Surgeon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurgeon)
            Me.columnEye = New Global.System.Data.DataColumn("Eye", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEye)
            Me.columnIOLNumber = New Global.System.Data.DataColumn("IOLNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOLNumber)
            Me.columnCreateDate = New Global.System.Data.DataColumn("CreateDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDate)
            Me.columnNameKhmer = New Global.System.Data.DataColumn("NameKhmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameKhmer)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIOLNo, Me.columnPatientNo}, true))
            Me.columnIOLNo.AllowDBNull = false
            Me.columnPatientNo.AllowDBNull = false
            Me.columnSex.MaxLength = 1
            Me.columnSurgeon.MaxLength = 50
            Me.columnEye.MaxLength = 50
            Me.columnIOLNumber.MaxLength = 50
            Me.columnNameKhmer.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_IOLRegistrationRow() As V_IOLRegistrationRow
            Return CType(Me.NewRow,V_IOLRegistrationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New V_IOLRegistrationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(V_IOLRegistrationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_IOLRegistrationRowChangedEvent) Is Nothing) Then
                RaiseEvent V_IOLRegistrationRowChanged(Me, New V_IOLRegistrationRowChangeEvent(CType(e.Row,V_IOLRegistrationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_IOLRegistrationRowChangingEvent) Is Nothing) Then
                RaiseEvent V_IOLRegistrationRowChanging(Me, New V_IOLRegistrationRowChangeEvent(CType(e.Row,V_IOLRegistrationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_IOLRegistrationRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_IOLRegistrationRowDeleted(Me, New V_IOLRegistrationRowChangeEvent(CType(e.Row,V_IOLRegistrationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_IOLRegistrationRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_IOLRegistrationRowDeleting(Me, New V_IOLRegistrationRowChangeEvent(CType(e.Row,V_IOLRegistrationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_IOLRegistrationRow(ByVal row As V_IOLRegistrationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSWardWithOT = New DSWardWithOT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_IOLRegistrationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_NewInpatientDetialLeaveDataTable
        Inherits Global.System.Data.TypedTableBase(Of V_NewInpatientDetialLeaveRow)
        
        Private columnNewInPatientNo As Global.System.Data.DataColumn
        
        Private columnPatientNo As Global.System.Data.DataColumn
        
        Private columnNameKhmer As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnEye As Global.System.Data.DataColumn
        
        Private columnDiagnosis As Global.System.Data.DataColumn
        
        Private columnVA_RE As Global.System.Data.DataColumn
        
        Private columnVA_LE As Global.System.Data.DataColumn
        
        Private columnDateDischarge As Global.System.Data.DataColumn
        
        Private columnDateFollowUp As Global.System.Data.DataColumn
        
        Private columnSignature As Global.System.Data.DataColumn
        
        Private columnLeave As Global.System.Data.DataColumn
        
        Private columnCreateDate As Global.System.Data.DataColumn
        
        Private columnWaiting As Global.System.Data.DataColumn
        
        Private columnTypeDiagnosis As Global.System.Data.DataColumn
        
        Private columnDR_NAME As Global.System.Data.DataColumn
        
        Private columnTelephone As Global.System.Data.DataColumn
        
        Private columnIS_CALL As Global.System.Data.DataColumn
        
        Private columnCALL_DATE As Global.System.Data.DataColumn
        
        Private columnCALL_NOTED As Global.System.Data.DataColumn
        
        Private columnOTCANCEL As Global.System.Data.DataColumn
        
        Private columnOTCANCEL_DATE As Global.System.Data.DataColumn
        
        Private columnOTCANCEL_NOTE As Global.System.Data.DataColumn
        
        Private columnOT_ISCANCEL As Global.System.Data.DataColumn
        
        Private columnRECEIPT_NOM As Global.System.Data.DataColumn
        
        Private columnDONATE_NAME As Global.System.Data.DataColumn
        
        Private columnSURGERY_NAME As Global.System.Data.DataColumn
        
        Private columnNameEng As Global.System.Data.DataColumn
        
        Private columnIS_CALL_POSTPONE As Global.System.Data.DataColumn
        
        Private columnIS_PATIEN_FOLLOWUP As Global.System.Data.DataColumn
        
        Private columnIS_POSTPONE_DELETE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_NewInpatientDetialLeave"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewInPatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewInPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PatientNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameKhmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameKhmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EyeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEye
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VA_REColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVA_RE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VA_LEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVA_LE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateDischargeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateDischarge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFollowUpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFollowUp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SignatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSignature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LeaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WaitingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWaiting
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeDiagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeDiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DR_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDR_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelephoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelephone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_CALLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_CALL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CALL_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCALL_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CALL_NOTEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCALL_NOTED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTCANCELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTCANCEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTCANCEL_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTCANCEL_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTCANCEL_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTCANCEL_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_ISCANCELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_ISCANCEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIPT_NOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIPT_NOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DONATE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDONATE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SURGERY_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSURGERY_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameEngColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameEng
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_CALL_POSTPONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_CALL_POSTPONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_PATIEN_FOLLOWUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_PATIEN_FOLLOWUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_POSTPONE_DELETEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_POSTPONE_DELETE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_NewInpatientDetialLeaveRow
            Get
                Return CType(Me.Rows(index),V_NewInpatientDetialLeaveRow)
            End Get
        End Property
        
        Public Event V_NewInpatientDetialLeaveRowChanging As V_NewInpatientDetialLeaveRowChangeEventHandler
        
        Public Event V_NewInpatientDetialLeaveRowChanged As V_NewInpatientDetialLeaveRowChangeEventHandler
        
        Public Event V_NewInpatientDetialLeaveRowDeleting As V_NewInpatientDetialLeaveRowChangeEventHandler
        
        Public Event V_NewInpatientDetialLeaveRowDeleted As V_NewInpatientDetialLeaveRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_NewInpatientDetialLeaveRow(ByVal row As V_NewInpatientDetialLeaveRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_NewInpatientDetialLeaveRow( _
                    ByVal NewInPatientNo As Decimal,  _
                    ByVal PatientNo As Decimal,  _
                    ByVal NameKhmer As String,  _
                    ByVal Age As Decimal,  _
                    ByVal Sex As String,  _
                    ByVal Address As String,  _
                    ByVal Eye As String,  _
                    ByVal Diagnosis As String,  _
                    ByVal VA_RE As String,  _
                    ByVal VA_LE As String,  _
                    ByVal DateDischarge As Date,  _
                    ByVal DateFollowUp As Date,  _
                    ByVal Signature As Boolean,  _
                    ByVal Leave As String,  _
                    ByVal CreateDate As Date,  _
                    ByVal Waiting As Decimal,  _
                    ByVal TypeDiagnosis As Boolean,  _
                    ByVal DR_NAME As String,  _
                    ByVal Telephone As String,  _
                    ByVal IS_CALL As Boolean,  _
                    ByVal CALL_DATE As Date,  _
                    ByVal CALL_NOTED As String,  _
                    ByVal OTCANCEL As String,  _
                    ByVal OTCANCEL_DATE As Date,  _
                    ByVal OTCANCEL_NOTE As String,  _
                    ByVal OT_ISCANCEL As Boolean,  _
                    ByVal RECEIPT_NOM As String,  _
                    ByVal DONATE_NAME As String,  _
                    ByVal SURGERY_NAME As String,  _
                    ByVal NameEng As String,  _
                    ByVal IS_CALL_POSTPONE As Boolean,  _
                    ByVal IS_PATIEN_FOLLOWUP As Boolean,  _
                    ByVal IS_POSTPONE_DELETE As Boolean) As V_NewInpatientDetialLeaveRow
            Dim rowV_NewInpatientDetialLeaveRow As V_NewInpatientDetialLeaveRow = CType(Me.NewRow,V_NewInpatientDetialLeaveRow)
            Dim columnValuesArray() As Object = New Object() {NewInPatientNo, PatientNo, NameKhmer, Age, Sex, Address, Eye, Diagnosis, VA_RE, VA_LE, DateDischarge, DateFollowUp, Signature, Leave, CreateDate, Waiting, TypeDiagnosis, DR_NAME, Telephone, IS_CALL, CALL_DATE, CALL_NOTED, OTCANCEL, OTCANCEL_DATE, OTCANCEL_NOTE, OT_ISCANCEL, RECEIPT_NOM, DONATE_NAME, SURGERY_NAME, NameEng, IS_CALL_POSTPONE, IS_PATIEN_FOLLOWUP, IS_POSTPONE_DELETE}
            rowV_NewInpatientDetialLeaveRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowV_NewInpatientDetialLeaveRow)
            Return rowV_NewInpatientDetialLeaveRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As V_NewInpatientDetialLeaveDataTable = CType(MyBase.Clone,V_NewInpatientDetialLeaveDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New V_NewInpatientDetialLeaveDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNewInPatientNo = MyBase.Columns("NewInPatientNo")
            Me.columnPatientNo = MyBase.Columns("PatientNo")
            Me.columnNameKhmer = MyBase.Columns("NameKhmer")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnEye = MyBase.Columns("Eye")
            Me.columnDiagnosis = MyBase.Columns("Diagnosis")
            Me.columnVA_RE = MyBase.Columns("VA_RE")
            Me.columnVA_LE = MyBase.Columns("VA_LE")
            Me.columnDateDischarge = MyBase.Columns("DateDischarge")
            Me.columnDateFollowUp = MyBase.Columns("DateFollowUp")
            Me.columnSignature = MyBase.Columns("Signature")
            Me.columnLeave = MyBase.Columns("Leave")
            Me.columnCreateDate = MyBase.Columns("CreateDate")
            Me.columnWaiting = MyBase.Columns("Waiting")
            Me.columnTypeDiagnosis = MyBase.Columns("TypeDiagnosis")
            Me.columnDR_NAME = MyBase.Columns("DR_NAME")
            Me.columnTelephone = MyBase.Columns("Telephone")
            Me.columnIS_CALL = MyBase.Columns("IS_CALL")
            Me.columnCALL_DATE = MyBase.Columns("CALL_DATE")
            Me.columnCALL_NOTED = MyBase.Columns("CALL_NOTED")
            Me.columnOTCANCEL = MyBase.Columns("OTCANCEL")
            Me.columnOTCANCEL_DATE = MyBase.Columns("OTCANCEL_DATE")
            Me.columnOTCANCEL_NOTE = MyBase.Columns("OTCANCEL_NOTE")
            Me.columnOT_ISCANCEL = MyBase.Columns("OT_ISCANCEL")
            Me.columnRECEIPT_NOM = MyBase.Columns("RECEIPT_NOM")
            Me.columnDONATE_NAME = MyBase.Columns("DONATE_NAME")
            Me.columnSURGERY_NAME = MyBase.Columns("SURGERY_NAME")
            Me.columnNameEng = MyBase.Columns("NameEng")
            Me.columnIS_CALL_POSTPONE = MyBase.Columns("IS_CALL_POSTPONE")
            Me.columnIS_PATIEN_FOLLOWUP = MyBase.Columns("IS_PATIEN_FOLLOWUP")
            Me.columnIS_POSTPONE_DELETE = MyBase.Columns("IS_POSTPONE_DELETE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNewInPatientNo = New Global.System.Data.DataColumn("NewInPatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewInPatientNo)
            Me.columnPatientNo = New Global.System.Data.DataColumn("PatientNo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientNo)
            Me.columnNameKhmer = New Global.System.Data.DataColumn("NameKhmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameKhmer)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnEye = New Global.System.Data.DataColumn("Eye", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEye)
            Me.columnDiagnosis = New Global.System.Data.DataColumn("Diagnosis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiagnosis)
            Me.columnVA_RE = New Global.System.Data.DataColumn("VA_RE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVA_RE)
            Me.columnVA_LE = New Global.System.Data.DataColumn("VA_LE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVA_LE)
            Me.columnDateDischarge = New Global.System.Data.DataColumn("DateDischarge", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateDischarge)
            Me.columnDateFollowUp = New Global.System.Data.DataColumn("DateFollowUp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFollowUp)
            Me.columnSignature = New Global.System.Data.DataColumn("Signature", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSignature)
            Me.columnLeave = New Global.System.Data.DataColumn("Leave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeave)
            Me.columnCreateDate = New Global.System.Data.DataColumn("CreateDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDate)
            Me.columnWaiting = New Global.System.Data.DataColumn("Waiting", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWaiting)
            Me.columnTypeDiagnosis = New Global.System.Data.DataColumn("TypeDiagnosis", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeDiagnosis)
            Me.columnDR_NAME = New Global.System.Data.DataColumn("DR_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDR_NAME)
            Me.columnTelephone = New Global.System.Data.DataColumn("Telephone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelephone)
            Me.columnIS_CALL = New Global.System.Data.DataColumn("IS_CALL", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_CALL)
            Me.columnCALL_DATE = New Global.System.Data.DataColumn("CALL_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCALL_DATE)
            Me.columnCALL_NOTED = New Global.System.Data.DataColumn("CALL_NOTED", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCALL_NOTED)
            Me.columnOTCANCEL = New Global.System.Data.DataColumn("OTCANCEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTCANCEL)
            Me.columnOTCANCEL_DATE = New Global.System.Data.DataColumn("OTCANCEL_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTCANCEL_DATE)
            Me.columnOTCANCEL_NOTE = New Global.System.Data.DataColumn("OTCANCEL_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTCANCEL_NOTE)
            Me.columnOT_ISCANCEL = New Global.System.Data.DataColumn("OT_ISCANCEL", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_ISCANCEL)
            Me.columnRECEIPT_NOM = New Global.System.Data.DataColumn("RECEIPT_NOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIPT_NOM)
            Me.columnDONATE_NAME = New Global.System.Data.DataColumn("DONATE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDONATE_NAME)
            Me.columnSURGERY_NAME = New Global.System.Data.DataColumn("SURGERY_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSURGERY_NAME)
            Me.columnNameEng = New Global.System.Data.DataColumn("NameEng", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameEng)
            Me.columnIS_CALL_POSTPONE = New Global.System.Data.DataColumn("IS_CALL_POSTPONE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_CALL_POSTPONE)
            Me.columnIS_PATIEN_FOLLOWUP = New Global.System.Data.DataColumn("IS_PATIEN_FOLLOWUP", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_PATIEN_FOLLOWUP)
            Me.columnIS_POSTPONE_DELETE = New Global.System.Data.DataColumn("IS_POSTPONE_DELETE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_POSTPONE_DELETE)
            Me.columnNewInPatientNo.AllowDBNull = false
            Me.columnPatientNo.AllowDBNull = false
            Me.columnNameKhmer.MaxLength = 50
            Me.columnSex.MaxLength = 1
            Me.columnAddress.MaxLength = 1000
            Me.columnEye.MaxLength = 50
            Me.columnDiagnosis.MaxLength = 50
            Me.columnVA_RE.MaxLength = 50
            Me.columnVA_LE.MaxLength = 50
            Me.columnLeave.MaxLength = 1
            Me.columnDR_NAME.MaxLength = 50
            Me.columnTelephone.MaxLength = 50
            Me.columnCALL_NOTED.MaxLength = 50
            Me.columnOTCANCEL.MaxLength = 50
            Me.columnOTCANCEL_NOTE.MaxLength = 150
            Me.columnRECEIPT_NOM.MaxLength = 50
            Me.columnDONATE_NAME.MaxLength = 50
            Me.columnSURGERY_NAME.MaxLength = 50
            Me.columnNameEng.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_NewInpatientDetialLeaveRow() As V_NewInpatientDetialLeaveRow
            Return CType(Me.NewRow,V_NewInpatientDetialLeaveRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New V_NewInpatientDetialLeaveRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(V_NewInpatientDetialLeaveRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_NewInpatientDetialLeaveRowChangedEvent) Is Nothing) Then
                RaiseEvent V_NewInpatientDetialLeaveRowChanged(Me, New V_NewInpatientDetialLeaveRowChangeEvent(CType(e.Row,V_NewInpatientDetialLeaveRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_NewInpatientDetialLeaveRowChangingEvent) Is Nothing) Then
                RaiseEvent V_NewInpatientDetialLeaveRowChanging(Me, New V_NewInpatientDetialLeaveRowChangeEvent(CType(e.Row,V_NewInpatientDetialLeaveRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_NewInpatientDetialLeaveRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_NewInpatientDetialLeaveRowDeleted(Me, New V_NewInpatientDetialLeaveRowChangeEvent(CType(e.Row,V_NewInpatientDetialLeaveRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_NewInpatientDetialLeaveRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_NewInpatientDetialLeaveRowDeleting(Me, New V_NewInpatientDetialLeaveRowChangeEvent(CType(e.Row,V_NewInpatientDetialLeaveRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_NewInpatientDetialLeaveRow(ByVal row As V_NewInpatientDetialLeaveRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSWardWithOT = New DSWardWithOT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_NewInpatientDetialLeaveDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_NewInpatientDetialRow
        Inherits Global.System.Data.DataRow
        
        Private tableV_NewInpatientDetial As V_NewInpatientDetialDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_NewInpatientDetial = CType(Me.Table,V_NewInpatientDetialDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewInPatientNo() As Decimal
            Get
                Return CType(Me(Me.tableV_NewInpatientDetial.NewInPatientNoColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.NewInPatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientNo() As Decimal
            Get
                Return CType(Me(Me.tableV_NewInpatientDetial.PatientNoColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.PatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetial.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'V_NewInpatientDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetial.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'V_NewInpatientDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetial.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'V_NewInpatientDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Eye() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetial.EyeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Eye' in table 'V_NewInpatientDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.EyeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diagnosis() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetial.DiagnosisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diagnosis' in table 'V_NewInpatientDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.DiagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VA_RE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetial.VA_REColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VA_RE' in table 'V_NewInpatientDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.VA_REColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VA_LE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetial.VA_LEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VA_LE' in table 'V_NewInpatientDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.VA_LEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateDischarge() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetial.DateDischargeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateDischarge' in table 'V_NewInpatientDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.DateDischargeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFollowUp() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetial.DateFollowUpColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateFollowUp' in table 'V_NewInpatientDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.DateFollowUpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Signature() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetial.SignatureColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Signature' in table 'V_NewInpatientDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.SignatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Leave() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetial.LeaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Leave' in table 'V_NewInpatientDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.LeaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetial.CreateDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreateDate' in table 'V_NewInpatientDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.CreateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameKhmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetial.NameKhmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameKhmer' in table 'V_NewInpatientDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.NameKhmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeDiagnosis() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetial.TypeDiagnosisColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeDiagnosis' in table 'V_NewInpatientDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.TypeDiagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Waiting() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetial.WaitingColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Waiting' in table 'V_NewInpatientDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.WaitingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIME_CREATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetial.TIME_CREATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIME_CREATE' in table 'V_NewInpatientDetial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetial.TIME_CREATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetial.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableV_NewInpatientDetial.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetial.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableV_NewInpatientDetial.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetial.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableV_NewInpatientDetial.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEyeNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetial.EyeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEyeNull()
            Me(Me.tableV_NewInpatientDetial.EyeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiagnosisNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetial.DiagnosisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiagnosisNull()
            Me(Me.tableV_NewInpatientDetial.DiagnosisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVA_RENull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetial.VA_REColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVA_RENull()
            Me(Me.tableV_NewInpatientDetial.VA_REColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVA_LENull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetial.VA_LEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVA_LENull()
            Me(Me.tableV_NewInpatientDetial.VA_LEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateDischargeNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetial.DateDischargeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateDischargeNull()
            Me(Me.tableV_NewInpatientDetial.DateDischargeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFollowUpNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetial.DateFollowUpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFollowUpNull()
            Me(Me.tableV_NewInpatientDetial.DateFollowUpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSignatureNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetial.SignatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSignatureNull()
            Me(Me.tableV_NewInpatientDetial.SignatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLeaveNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetial.LeaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLeaveNull()
            Me(Me.tableV_NewInpatientDetial.LeaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetial.CreateDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreateDateNull()
            Me(Me.tableV_NewInpatientDetial.CreateDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameKhmerNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetial.NameKhmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameKhmerNull()
            Me(Me.tableV_NewInpatientDetial.NameKhmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeDiagnosisNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetial.TypeDiagnosisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeDiagnosisNull()
            Me(Me.tableV_NewInpatientDetial.TypeDiagnosisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWaitingNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetial.WaitingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWaitingNull()
            Me(Me.tableV_NewInpatientDetial.WaitingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIME_CREATENull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetial.TIME_CREATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIME_CREATENull()
            Me(Me.tableV_NewInpatientDetial.TIME_CREATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetView_OTRegistrationRows() As View_OTRegistrationRow()
            If (Me.Table.ChildRelations("V_NewInpatientDetial_View_OTRegistration") Is Nothing) Then
                Return New View_OTRegistrationRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("V_NewInpatientDetial_View_OTRegistration")),View_OTRegistrationRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class View_OTRegistrationRow
        Inherits Global.System.Data.DataRow
        
        Private tableView_OTRegistration As View_OTRegistrationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableView_OTRegistration = CType(Me.Table,View_OTRegistrationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTNo() As Decimal
            Get
                Return CType(Me(Me.tableView_OTRegistration.OTNoColumn),Decimal)
            End Get
            Set
                Me(Me.tableView_OTRegistration.OTNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewInPatientNo() As Decimal
            Get
                Return CType(Me(Me.tableView_OTRegistration.NewInPatientNoColumn),Decimal)
            End Get
            Set
                Me(Me.tableView_OTRegistration.NewInPatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientNo() As Decimal
            Get
                Return CType(Me(Me.tableView_OTRegistration.PatientNoColumn),Decimal)
            End Get
            Set
                Me(Me.tableView_OTRegistration.PatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OperationTime() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.OperationTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OperationTime' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.OperationTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anesthesia() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.AnesthesiaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anesthesia' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.AnesthesiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Eye() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.EyeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Eye' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.EyeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OperationType() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.OperationTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OperationType' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.OperationTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Surgeon() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.SurgeonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Surgeon' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.SurgeonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Assistant() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.AssistantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Assistant' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.AssistantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Circulation() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.CirculationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Circulation' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.CirculationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Compli() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.CompliColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Compli' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.CompliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.CreateDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreateDate' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.CreateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.StatusColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameKhmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.NameKhmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameKhmer' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.NameKhmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anesthetist() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.AnesthetistColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anesthetist' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.AnesthetistColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOL() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.IOLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IOL' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.IOLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateOperated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.DateOperatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateOperated' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.DateOperatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Others() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.OthersColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Others' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.OthersColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DR_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.DR_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DR_NAME' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.DR_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIME_CREATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableView_OTRegistration.TIME_CREATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIME_CREATE' in table 'View_OTRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_OTRegistration.TIME_CREATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property V_NewInpatientDetialRow() As V_NewInpatientDetialRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("V_NewInpatientDetial_View_OTRegistration")),V_NewInpatientDetialRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("V_NewInpatientDetial_View_OTRegistration"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property V_NewInpatientDetialLeaveRow() As V_NewInpatientDetialLeaveRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("V_NewInpatientDetialLeave_View_OTRegistration")),V_NewInpatientDetialLeaveRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("V_NewInpatientDetialLeave_View_OTRegistration"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableView_OTRegistration.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableView_OTRegistration.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableView_OTRegistration.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOperationTimeNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.OperationTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOperationTimeNull()
            Me(Me.tableView_OTRegistration.OperationTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnesthesiaNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.AnesthesiaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnesthesiaNull()
            Me(Me.tableView_OTRegistration.AnesthesiaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEyeNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.EyeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEyeNull()
            Me(Me.tableView_OTRegistration.EyeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOperationTypeNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.OperationTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOperationTypeNull()
            Me(Me.tableView_OTRegistration.OperationTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSurgeonNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.SurgeonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSurgeonNull()
            Me(Me.tableView_OTRegistration.SurgeonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssistantNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.AssistantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssistantNull()
            Me(Me.tableView_OTRegistration.AssistantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCirculationNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.CirculationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCirculationNull()
            Me(Me.tableView_OTRegistration.CirculationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompliNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.CompliColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompliNull()
            Me(Me.tableView_OTRegistration.CompliColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.CreateDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreateDateNull()
            Me(Me.tableView_OTRegistration.CreateDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableView_OTRegistration.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameKhmerNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.NameKhmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameKhmerNull()
            Me(Me.tableView_OTRegistration.NameKhmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnesthetistNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.AnesthetistColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnesthetistNull()
            Me(Me.tableView_OTRegistration.AnesthetistColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOLNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.IOLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOLNull()
            Me(Me.tableView_OTRegistration.IOLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateOperatedNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.DateOperatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateOperatedNull()
            Me(Me.tableView_OTRegistration.DateOperatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOthersNull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.OthersColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOthersNull()
            Me(Me.tableView_OTRegistration.OthersColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDR_NAMENull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.DR_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDR_NAMENull()
            Me(Me.tableView_OTRegistration.DR_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIME_CREATENull() As Boolean
            Return Me.IsNull(Me.tableView_OTRegistration.TIME_CREATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIME_CREATENull()
            Me(Me.tableView_OTRegistration.TIME_CREATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetV_IOLRegistrationRows() As V_IOLRegistrationRow()
            If (Me.Table.ChildRelations("View_OTRegistration_V_IOLRegistration") Is Nothing) Then
                Return New V_IOLRegistrationRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("View_OTRegistration_V_IOLRegistration")),V_IOLRegistrationRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_IOLRegistrationRow
        Inherits Global.System.Data.DataRow
        
        Private tableV_IOLRegistration As V_IOLRegistrationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_IOLRegistration = CType(Me.Table,V_IOLRegistrationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOLNo() As Decimal
            Get
                Return CType(Me(Me.tableV_IOLRegistration.IOLNoColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_IOLRegistration.IOLNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTNo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_IOLRegistration.OTNoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OTNo' in table 'V_IOLRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_IOLRegistration.OTNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientNo() As Decimal
            Get
                Return CType(Me(Me.tableV_IOLRegistration.PatientNoColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_IOLRegistration.PatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_IOLRegistration.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'V_IOLRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_IOLRegistration.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_IOLRegistration.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'V_IOLRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_IOLRegistration.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Surgeon() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_IOLRegistration.SurgeonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Surgeon' in table 'V_IOLRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_IOLRegistration.SurgeonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Eye() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_IOLRegistration.EyeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Eye' in table 'V_IOLRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_IOLRegistration.EyeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOLNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_IOLRegistration.IOLNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IOLNumber' in table 'V_IOLRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_IOLRegistration.IOLNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_IOLRegistration.CreateDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreateDate' in table 'V_IOLRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_IOLRegistration.CreateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameKhmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_IOLRegistration.NameKhmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameKhmer' in table 'V_IOLRegistration' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_IOLRegistration.NameKhmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property View_OTRegistrationRow() As View_OTRegistrationRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("View_OTRegistration_V_IOLRegistration")),View_OTRegistrationRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("View_OTRegistration_V_IOLRegistration"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTNoNull() As Boolean
            Return Me.IsNull(Me.tableV_IOLRegistration.OTNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTNoNull()
            Me(Me.tableV_IOLRegistration.OTNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableV_IOLRegistration.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableV_IOLRegistration.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableV_IOLRegistration.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableV_IOLRegistration.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSurgeonNull() As Boolean
            Return Me.IsNull(Me.tableV_IOLRegistration.SurgeonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSurgeonNull()
            Me(Me.tableV_IOLRegistration.SurgeonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEyeNull() As Boolean
            Return Me.IsNull(Me.tableV_IOLRegistration.EyeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEyeNull()
            Me(Me.tableV_IOLRegistration.EyeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOLNumberNull() As Boolean
            Return Me.IsNull(Me.tableV_IOLRegistration.IOLNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOLNumberNull()
            Me(Me.tableV_IOLRegistration.IOLNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableV_IOLRegistration.CreateDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreateDateNull()
            Me(Me.tableV_IOLRegistration.CreateDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameKhmerNull() As Boolean
            Return Me.IsNull(Me.tableV_IOLRegistration.NameKhmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameKhmerNull()
            Me(Me.tableV_IOLRegistration.NameKhmerColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_NewInpatientDetialLeaveRow
        Inherits Global.System.Data.DataRow
        
        Private tableV_NewInpatientDetialLeave As V_NewInpatientDetialLeaveDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_NewInpatientDetialLeave = CType(Me.Table,V_NewInpatientDetialLeaveDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewInPatientNo() As Decimal
            Get
                Return CType(Me(Me.tableV_NewInpatientDetialLeave.NewInPatientNoColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.NewInPatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PatientNo() As Decimal
            Get
                Return CType(Me(Me.tableV_NewInpatientDetialLeave.PatientNoColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.PatientNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameKhmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.NameKhmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameKhmer' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.NameKhmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Eye() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.EyeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Eye' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.EyeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diagnosis() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.DiagnosisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diagnosis' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.DiagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VA_RE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.VA_REColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VA_RE' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.VA_REColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VA_LE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.VA_LEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VA_LE' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.VA_LEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateDischarge() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.DateDischargeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateDischarge' in table 'V_NewInpatientDetialLeave' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.DateDischargeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFollowUp() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.DateFollowUpColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateFollowUp' in table 'V_NewInpatientDetialLeave' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.DateFollowUpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Signature() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.SignatureColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Signature' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.SignatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Leave() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.LeaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Leave' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.LeaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.CreateDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreateDate' in table 'V_NewInpatientDetialLeave' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.CreateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Waiting() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.WaitingColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Waiting' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.WaitingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeDiagnosis() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.TypeDiagnosisColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeDiagnosis' in table 'V_NewInpatientDetialLeave' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.TypeDiagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DR_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.DR_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DR_NAME' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.DR_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telephone() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.TelephoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telephone' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.TelephoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_CALL() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.IS_CALLColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_CALL' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.IS_CALLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CALL_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.CALL_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CALL_DATE' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.CALL_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CALL_NOTED() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.CALL_NOTEDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CALL_NOTED' in table 'V_NewInpatientDetialLeave' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.CALL_NOTEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTCANCEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.OTCANCELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OTCANCEL' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.OTCANCELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTCANCEL_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.OTCANCEL_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OTCANCEL_DATE' in table 'V_NewInpatientDetialLeave' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.OTCANCEL_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTCANCEL_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.OTCANCEL_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OTCANCEL_NOTE' in table 'V_NewInpatientDetialLeave' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.OTCANCEL_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_ISCANCEL() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.OT_ISCANCELColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OT_ISCANCEL' in table 'V_NewInpatientDetialLeave' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.OT_ISCANCELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIPT_NOM() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.RECEIPT_NOMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECEIPT_NOM' in table 'V_NewInpatientDetialLeave' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.RECEIPT_NOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DONATE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.DONATE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DONATE_NAME' in table 'V_NewInpatientDetialLeave' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.DONATE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SURGERY_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.SURGERY_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SURGERY_NAME' in table 'V_NewInpatientDetialLeave' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.SURGERY_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameEng() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.NameEngColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameEng' in table 'V_NewInpatientDetialLeave' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.NameEngColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_CALL_POSTPONE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.IS_CALL_POSTPONEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_CALL_POSTPONE' in table 'V_NewInpatientDetialLeave' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.IS_CALL_POSTPONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_PATIEN_FOLLOWUP() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.IS_PATIEN_FOLLOWUPColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_PATIEN_FOLLOWUP' in table 'V_NewInpatientDetialLeave' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.IS_PATIEN_FOLLOWUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_POSTPONE_DELETE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableV_NewInpatientDetialLeave.IS_POSTPONE_DELETEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_POSTPONE_DELETE' in table 'V_NewInpatientDetialLeave' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_NewInpatientDetialLeave.IS_POSTPONE_DELETEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameKhmerNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.NameKhmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameKhmerNull()
            Me(Me.tableV_NewInpatientDetialLeave.NameKhmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableV_NewInpatientDetialLeave.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableV_NewInpatientDetialLeave.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableV_NewInpatientDetialLeave.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEyeNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.EyeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEyeNull()
            Me(Me.tableV_NewInpatientDetialLeave.EyeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiagnosisNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.DiagnosisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiagnosisNull()
            Me(Me.tableV_NewInpatientDetialLeave.DiagnosisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVA_RENull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.VA_REColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVA_RENull()
            Me(Me.tableV_NewInpatientDetialLeave.VA_REColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVA_LENull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.VA_LEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVA_LENull()
            Me(Me.tableV_NewInpatientDetialLeave.VA_LEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateDischargeNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.DateDischargeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateDischargeNull()
            Me(Me.tableV_NewInpatientDetialLeave.DateDischargeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFollowUpNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.DateFollowUpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFollowUpNull()
            Me(Me.tableV_NewInpatientDetialLeave.DateFollowUpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSignatureNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.SignatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSignatureNull()
            Me(Me.tableV_NewInpatientDetialLeave.SignatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLeaveNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.LeaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLeaveNull()
            Me(Me.tableV_NewInpatientDetialLeave.LeaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.CreateDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreateDateNull()
            Me(Me.tableV_NewInpatientDetialLeave.CreateDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWaitingNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.WaitingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWaitingNull()
            Me(Me.tableV_NewInpatientDetialLeave.WaitingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeDiagnosisNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.TypeDiagnosisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeDiagnosisNull()
            Me(Me.tableV_NewInpatientDetialLeave.TypeDiagnosisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDR_NAMENull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.DR_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDR_NAMENull()
            Me(Me.tableV_NewInpatientDetialLeave.DR_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelephoneNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.TelephoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelephoneNull()
            Me(Me.tableV_NewInpatientDetialLeave.TelephoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_CALLNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.IS_CALLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_CALLNull()
            Me(Me.tableV_NewInpatientDetialLeave.IS_CALLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCALL_DATENull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.CALL_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCALL_DATENull()
            Me(Me.tableV_NewInpatientDetialLeave.CALL_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCALL_NOTEDNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.CALL_NOTEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCALL_NOTEDNull()
            Me(Me.tableV_NewInpatientDetialLeave.CALL_NOTEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTCANCELNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.OTCANCELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTCANCELNull()
            Me(Me.tableV_NewInpatientDetialLeave.OTCANCELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTCANCEL_DATENull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.OTCANCEL_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTCANCEL_DATENull()
            Me(Me.tableV_NewInpatientDetialLeave.OTCANCEL_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTCANCEL_NOTENull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.OTCANCEL_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTCANCEL_NOTENull()
            Me(Me.tableV_NewInpatientDetialLeave.OTCANCEL_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_ISCANCELNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.OT_ISCANCELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_ISCANCELNull()
            Me(Me.tableV_NewInpatientDetialLeave.OT_ISCANCELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECEIPT_NOMNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.RECEIPT_NOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECEIPT_NOMNull()
            Me(Me.tableV_NewInpatientDetialLeave.RECEIPT_NOMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDONATE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.DONATE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDONATE_NAMENull()
            Me(Me.tableV_NewInpatientDetialLeave.DONATE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSURGERY_NAMENull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.SURGERY_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSURGERY_NAMENull()
            Me(Me.tableV_NewInpatientDetialLeave.SURGERY_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameEngNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.NameEngColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameEngNull()
            Me(Me.tableV_NewInpatientDetialLeave.NameEngColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_CALL_POSTPONENull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.IS_CALL_POSTPONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_CALL_POSTPONENull()
            Me(Me.tableV_NewInpatientDetialLeave.IS_CALL_POSTPONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_PATIEN_FOLLOWUPNull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.IS_PATIEN_FOLLOWUPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_PATIEN_FOLLOWUPNull()
            Me(Me.tableV_NewInpatientDetialLeave.IS_PATIEN_FOLLOWUPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_POSTPONE_DELETENull() As Boolean
            Return Me.IsNull(Me.tableV_NewInpatientDetialLeave.IS_POSTPONE_DELETEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_POSTPONE_DELETENull()
            Me(Me.tableV_NewInpatientDetialLeave.IS_POSTPONE_DELETEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetView_OTRegistrationRows() As View_OTRegistrationRow()
            If (Me.Table.ChildRelations("V_NewInpatientDetialLeave_View_OTRegistration") Is Nothing) Then
                Return New View_OTRegistrationRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("V_NewInpatientDetialLeave_View_OTRegistration")),View_OTRegistrationRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_NewInpatientDetialRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As V_NewInpatientDetialRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_NewInpatientDetialRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_NewInpatientDetialRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class View_OTRegistrationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As View_OTRegistrationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As View_OTRegistrationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As View_OTRegistrationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_IOLRegistrationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As V_IOLRegistrationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_IOLRegistrationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_IOLRegistrationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_NewInpatientDetialLeaveRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As V_NewInpatientDetialLeaveRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_NewInpatientDetialLeaveRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_NewInpatientDetialLeaveRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DSWardWithOTTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class V_NewInpatientDetialTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "V_NewInpatientDetial"
            tableMapping.ColumnMappings.Add("NewInPatientNo", "NewInPatientNo")
            tableMapping.ColumnMappings.Add("PatientNo", "PatientNo")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("Eye", "Eye")
            tableMapping.ColumnMappings.Add("Diagnosis", "Diagnosis")
            tableMapping.ColumnMappings.Add("VA_RE", "VA_RE")
            tableMapping.ColumnMappings.Add("VA_LE", "VA_LE")
            tableMapping.ColumnMappings.Add("DateDischarge", "DateDischarge")
            tableMapping.ColumnMappings.Add("DateFollowUp", "DateFollowUp")
            tableMapping.ColumnMappings.Add("Signature", "Signature")
            tableMapping.ColumnMappings.Add("Leave", "Leave")
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate")
            tableMapping.ColumnMappings.Add("NameKhmer", "NameKhmer")
            tableMapping.ColumnMappings.Add("TypeDiagnosis", "TypeDiagnosis")
            tableMapping.ColumnMappings.Add("Waiting", "Waiting")
            tableMapping.ColumnMappings.Add("TIME_CREATE", "TIME_CREATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        NewInPatientNo, PatientNo, NameKhmer, Age, Sex, Address, Eye, Diagn"& _ 
                "osis, VA_RE, VA_LE, DateDischarge, DateFollowUp, Signature, Leave, CreateDate, W"& _ 
                "aiting, TypeDiagnosis, TIME_CREATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            V_NewInpatientDetial"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Address, Age, CreateDate, DateDischarge, DateFollowUp, Diagnosis, Eye, Lea"& _ 
                "ve, NameKhmer, NewInPatientNo, PatientNo, Sex, Signature, TIME_CREATE, TypeDiagn"& _ 
                "osis, VA_LE, VA_RE, Waiting FROM V_NewInpatientDetial WHERE (Waiting <> 2) AND ("& _ 
                "DeleteOption = 'False')"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSWardWithOT.V_NewInpatientDetialDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSWardWithOT.V_NewInpatientDetialDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSWardWithOT.V_NewInpatientDetialDataTable = New DSWardWithOT.V_NewInpatientDetialDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSWardWithOT.V_NewInpatientDetialDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectPatientStaying() As DSWardWithOT.V_NewInpatientDetialDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As DSWardWithOT.V_NewInpatientDetialDataTable = New DSWardWithOT.V_NewInpatientDetialDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class View_OTRegistrationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "View_OTRegistration"
            tableMapping.ColumnMappings.Add("OTNo", "OTNo")
            tableMapping.ColumnMappings.Add("NewInPatientNo", "NewInPatientNo")
            tableMapping.ColumnMappings.Add("PatientNo", "PatientNo")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("OperationTime", "OperationTime")
            tableMapping.ColumnMappings.Add("Anesthesia", "Anesthesia")
            tableMapping.ColumnMappings.Add("Eye", "Eye")
            tableMapping.ColumnMappings.Add("OperationType", "OperationType")
            tableMapping.ColumnMappings.Add("Surgeon", "Surgeon")
            tableMapping.ColumnMappings.Add("Assistant", "Assistant")
            tableMapping.ColumnMappings.Add("Circulation", "Circulation")
            tableMapping.ColumnMappings.Add("Compli", "Compli")
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("NameKhmer", "NameKhmer")
            tableMapping.ColumnMappings.Add("Anesthetist", "Anesthetist")
            tableMapping.ColumnMappings.Add("IOL", "IOL")
            tableMapping.ColumnMappings.Add("DateOperated", "DateOperated")
            tableMapping.ColumnMappings.Add("Others", "Others")
            tableMapping.ColumnMappings.Add("DR_NAME", "DR_NAME")
            tableMapping.ColumnMappings.Add("TIME_CREATE", "TIME_CREATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        OTNo, NewInPatientNo, PatientNo, NameKhmer, Age, Sex, Address, Oper"& _ 
                "ationTime, Anesthesia, Eye, OperationType, Surgeon, Assistant, Circulation, Comp"& _ 
                "li, CreateDate, Status, Anesthetist, IOL, DateOperated, Others, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "           DR_NAME, TIME_CREATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            View_OTRegistration"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSWardWithOT.View_OTRegistrationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSWardWithOT.View_OTRegistrationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSWardWithOT.View_OTRegistrationDataTable = New DSWardWithOT.View_OTRegistrationDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class V_IOLRegistrationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "V_IOLRegistration"
            tableMapping.ColumnMappings.Add("IOLNo", "IOLNo")
            tableMapping.ColumnMappings.Add("OTNo", "OTNo")
            tableMapping.ColumnMappings.Add("PatientNo", "PatientNo")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Surgeon", "Surgeon")
            tableMapping.ColumnMappings.Add("Eye", "Eye")
            tableMapping.ColumnMappings.Add("IOLNumber", "IOLNumber")
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate")
            tableMapping.ColumnMappings.Add("NameKhmer", "NameKhmer")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     IOLNo, OTNo, PatientNo, NameKhmer, Age, Sex, Surgeon, Eye, IOLNumber, "& _ 
                "CreateDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         V_IOLRegistration"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSWardWithOT.V_IOLRegistrationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSWardWithOT.V_IOLRegistrationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSWardWithOT.V_IOLRegistrationDataTable = New DSWardWithOT.V_IOLRegistrationDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class V_NewInpatientDetialLeaveTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "V_NewInpatientDetialLeave"
            tableMapping.ColumnMappings.Add("NewInPatientNo", "NewInPatientNo")
            tableMapping.ColumnMappings.Add("PatientNo", "PatientNo")
            tableMapping.ColumnMappings.Add("NameKhmer", "NameKhmer")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("Eye", "Eye")
            tableMapping.ColumnMappings.Add("Diagnosis", "Diagnosis")
            tableMapping.ColumnMappings.Add("VA_RE", "VA_RE")
            tableMapping.ColumnMappings.Add("VA_LE", "VA_LE")
            tableMapping.ColumnMappings.Add("DateDischarge", "DateDischarge")
            tableMapping.ColumnMappings.Add("DateFollowUp", "DateFollowUp")
            tableMapping.ColumnMappings.Add("Signature", "Signature")
            tableMapping.ColumnMappings.Add("Leave", "Leave")
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate")
            tableMapping.ColumnMappings.Add("Waiting", "Waiting")
            tableMapping.ColumnMappings.Add("TypeDiagnosis", "TypeDiagnosis")
            tableMapping.ColumnMappings.Add("DR_NAME", "DR_NAME")
            tableMapping.ColumnMappings.Add("Telephone", "Telephone")
            tableMapping.ColumnMappings.Add("IS_CALL", "IS_CALL")
            tableMapping.ColumnMappings.Add("CALL_DATE", "CALL_DATE")
            tableMapping.ColumnMappings.Add("CALL_NOTED", "CALL_NOTED")
            tableMapping.ColumnMappings.Add("OTCANCEL", "OTCANCEL")
            tableMapping.ColumnMappings.Add("OTCANCEL_DATE", "OTCANCEL_DATE")
            tableMapping.ColumnMappings.Add("OTCANCEL_NOTE", "OTCANCEL_NOTE")
            tableMapping.ColumnMappings.Add("OT_ISCANCEL", "OT_ISCANCEL")
            tableMapping.ColumnMappings.Add("RECEIPT_NOM", "RECEIPT_NOM")
            tableMapping.ColumnMappings.Add("DONATE_NAME", "DONATE_NAME")
            tableMapping.ColumnMappings.Add("SURGERY_NAME", "SURGERY_NAME")
            tableMapping.ColumnMappings.Add("NameEng", "NameEng")
            tableMapping.ColumnMappings.Add("IS_CALL_POSTPONE", "IS_CALL_POSTPONE")
            tableMapping.ColumnMappings.Add("IS_PATIEN_FOLLOWUP", "IS_PATIEN_FOLLOWUP")
            tableMapping.ColumnMappings.Add("IS_POSTPONE_DELETE", "IS_POSTPONE_DELETE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        NewInPatientNo, PatientNo, NameKhmer, Age, Sex, Address, Eye, Diagn"& _ 
                "osis, VA_RE, VA_LE, DateDischarge, DateFollowUp, Signature, Leave, CreateDate, W"& _ 
                "aiting, TypeDiagnosis, DR_NAME, Telephone, IS_CALL, CALL_DATE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "          CALL_NOTED, OTCANCEL, OTCANCEL_DATE, OTCANCEL_NOTE, OT_ISCANCEL, RECEI"& _ 
                "PT_NOM, DONATE_NAME, SURGERY_NAME, NameEng, IS_CALL_POSTPONE, IS_PATIEN_FOLLOWUP"& _ 
                ", IS_POSTPONE_DELETE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            V_NewInpatientDetialLeave"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Address, Age, CALL_DATE, CALL_NOTED, CreateDate, DONATE_NAME, DR_NAME, Dat"& _ 
                "eDischarge, DateFollowUp, Diagnosis, Eye, IS_CALL, IS_CALL_POSTPONE, IS_PATIEN_F"& _ 
                "OLLOWUP, IS_POSTPONE_DELETE, Leave, NameEng, NameKhmer, NewInPatientNo, OTCANCEL"& _ 
                ", OTCANCEL_DATE, OTCANCEL_NOTE, OT_ISCANCEL, PatientNo, RECEIPT_NOM, SURGERY_NAM"& _ 
                "E, Sex, Signature, Telephone, TypeDiagnosis, VA_LE, VA_RE, Waiting FROM V_NewInp"& _ 
                "atientDetialLeave WHERE (OTCANCEL_DATE BETWEEN @DFrom AND @DTo) AND (OT_ISCANCEL"& _ 
                " = @OT_ISCANCEL)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "OTCANCEL_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "OTCANCEL_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OT_ISCANCEL", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "OT_ISCANCEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Address, Age, CALL_DATE, CALL_NOTED, CreateDate, DONATE_NAME, DR_NAME, Dat"& _ 
                "eDischarge, DateFollowUp, Diagnosis, Eye, IS_CALL, IS_CALL_POSTPONE, IS_PATIEN_F"& _ 
                "OLLOWUP, IS_POSTPONE_DELETE, Leave, NameEng, NameKhmer, NewInPatientNo, OTCANCEL"& _ 
                ", OTCANCEL_DATE, OTCANCEL_NOTE, OT_ISCANCEL, PatientNo, RECEIPT_NOM, SURGERY_NAM"& _ 
                "E, Sex, Signature, Telephone, TypeDiagnosis, VA_LE, VA_RE, Waiting FROM V_NewInp"& _ 
                "atientDetialLeave WHERE (OTCANCEL_DATE BETWEEN @DFrom AND @DTo) AND (OT_ISCANCEL"& _ 
                " = @OT_ISCANCEL)  and (IS_POSTPONE_DELETE=@IS_POSTPONE_DELETE)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "OTCANCEL_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "OTCANCEL_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OT_ISCANCEL", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "OT_ISCANCEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_POSTPONE_DELETE", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_POSTPONE_DELETE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSWardWithOT.V_NewInpatientDetialLeaveDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSWardWithOT.V_NewInpatientDetialLeaveDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSWardWithOT.V_NewInpatientDetialLeaveDataTable = New DSWardWithOT.V_NewInpatientDetialLeaveDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSWardWithOT.V_NewInpatientDetialLeaveDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal OT_ISCANCEL As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (OT_ISCANCEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(OT_ISCANCEL.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectOTPostone(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal OT_ISCANCEL As Global.System.Nullable(Of Boolean)) As DSWardWithOT.V_NewInpatientDetialLeaveDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (OT_ISCANCEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(OT_ISCANCEL.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSWardWithOT.V_NewInpatientDetialLeaveDataTable = New DSWardWithOT.V_NewInpatientDetialLeaveDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSWardWithOT.V_NewInpatientDetialLeaveDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal OT_ISCANCEL As Global.System.Nullable(Of Boolean), ByVal IS_POSTPONE_DELETE As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (OT_ISCANCEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(OT_ISCANCEL.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IS_POSTPONE_DELETE.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(IS_POSTPONE_DELETE.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectAllWithCancelOrDelete(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal OT_ISCANCEL As Global.System.Nullable(Of Boolean), ByVal IS_POSTPONE_DELETE As Global.System.Nullable(Of Boolean)) As DSWardWithOT.V_NewInpatientDetialLeaveDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (OT_ISCANCEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(OT_ISCANCEL.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IS_POSTPONE_DELETE.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(IS_POSTPONE_DELETE.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSWardWithOT.V_NewInpatientDetialLeaveDataTable = New DSWardWithOT.V_NewInpatientDetialLeaveDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
